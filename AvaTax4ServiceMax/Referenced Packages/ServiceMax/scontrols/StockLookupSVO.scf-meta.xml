<?xml version="1.0" encoding="UTF-8"?>
<Scontrol xmlns="http://soap.sforce.com/2006/04/metadata">
    <contentSource>HTML</contentSource>
    <encodingKey>UTF-8</encodingKey>
    <fileContent>/*========   Global variables used by Stock Lookup Routines   ===========*/
var SLKP_ProductId;
var SLKP_ReqQty;
var SLKP_RecordType;
var SLKP_RecordId;
var SLKP_UserId;
var SLKP_geocoder;
var SLKP_map;
var SLKP_directionsPanel;
var SLKP_directions;
var SLKP_YouAreHere;
var SLKP_radius = 0;
var SLKP_StartingPoint;
var SLKP_ShowResults;
var SLKP_ShowMap;
var SLKP_ShowOptions;
var GMLKP_Lat1; 
var GMLKP_Lon1; 
var GMLKP_geocoder; 
var SLKP_rownum;
var recFound=""; 
/*========   Global variables used by Cancel Parts Request ===========*/
var CNPR_RequestId;
var CNPR_UserId;

/*========   Global variables used by Cancel Shipment Order ===========*/
var CNSHP_ShipmentOrderId;
var CNSHP_UserId;

/*========   Global variables used by Create Shipment Order from Parts Request ===========*/
var SHPR_RequestId;
var SHPR_UserId;
var SHPR_ShipmentOrderId;
var SHPR_RequestedFromId;
var SHPR_RequiredAtId;
var SHPR_CompanyId;
var SHPR_OwnerId;
var SHPR_AddlInfo;

/*========   Global variables used by Create Shipment Order from SVO ===========*/
var SHSVO_SVOId;
var SHSVO_UserId;
var SHSVO_CompanyId;
var SHSVO_CaseId;
var SHSVO_ContactId;
var SHSVO_RequiredAtId;
var SHSVO_OwnerId;

/*========   Global variables used by Cancel SVO Parts Request ===========*/
var CNSVOPR_SVOId;
var CNSVOPR_UserId;
var CNSVOPR_SVOLineId;

/*========   Global variables used by Process Parts Request Receipts ===========*/
var PPRR_RequestId;
var PPRR_UserId;
var PPRR_SiteId;
var PPRR_Receipts;
var PPRR_PRNumber;
var PPRR_SessionId;
var PPRR_SupplierId;
var PPRR_SourceLocId;		// HS 04/28/2008
var PPRR_SourceLocStockable;

/*========   Global variables used by Process SVO Receipts ===========*/
var PRSVO_SVOId;
var PRSVO_UserId;
var PRSVO_SVOLineId;
var PRSVO_ReqRecordTypeId;
var PRSVO_Receipts;
var PRSVO_SVONumber;
var PRSVO_SessionId;

/*========   Global variables used by Process Shipments ===========*/
var PRSHP_ShipmentOrderId;
var PRSHP_UserId;
var PRSHP_Shipments;
var PRSHP_ShipmentNumber;
var PRSHP_SessionId;
var PRSHP_SourceLocId;
var PRSHP_DestLocId;
var PRSHP_DestLocStockable;

/*========   Global variables used by Post Stock Adjustment to Inventory ===========*/
var ADJINV_AdjustmentId;
var ADJINV_AdjNumber;
var ADJINV_UserId;
var ADJINV_SessionId;
var ADJINV_ProdId;
var ADJINV_AdjQty;
var ADJINV_SiteId;

/*========   Global variables used by Post SVO Usage to Inventory ===========*/
var SVOUSGINV_SVOId;
var SVOUSGINV_UserId;
var SVOUSGINV_SVOLineId;
var SVOUSGINV_SessionId;
var SVOUSGINV_SVONumber;
var SVOUSGINV_UsageRecords;

/*========   Global variables used by Post Stock Transfer to Inventory ===========*/
var XFRINV_XferId;
var XFRINV_UserId;
var XFRINV_SessionId;
var XFRINV_XferNumber;
var XFRINV_SourceLocId;
var XFRINV_DestLocId;
var XFRINV_XferRecords;

/*========   Global variables used by Process RMA Receipts ===========*/
var PRRMA_RMAId;
var PRRMA_UserId;
var PRRMA_RMALineId;
var PRRMA_RMANumber;
var PRRMA_SessionId;
var PRRMA_Receipts;
var PRRMA_RecordTypeId;
var PRRMA_SourceLocId;
var PRRMA_DestLocId;
var PRRMA_DestCostedAtValue;
var PRRMA_SourceStockable;
var PRRMA_DestStockable;

/*==========================================================*/

function SVMXC_SetupStockLookupPage(reqId, reqType, uId)
{
	SVMXI_InitMessageList("SLKPSC1"); 
	SVMXI_SetLabels("StockLookupPR"); 

    var ProdName;

    SLKP_UserId = uId;
    SLKP_RecordType = reqType;

    if (SLKP_RecordType == 'SVO')
    	{
	var soql1 = "SELECT Id, SVMXC__Product__c, SVMXC__Product__r.Name, SVMXC__Requested_Quantity2__c, " +
		    "SVMXC__Requested_Location__c FROM SVMXC__Service_Order_Line__c WHERE Id = '" + reqId + "'";
	var qr1 = sforce.connection.query(soql1);
	if (qr1.size <= 0)
	    {
	    alert(SVMXI_GetMessage("MSG002"));
	    CloseWindow();
	    return;
	    }
	rec1 = qr1.getArray("records");
	SLKP_ProductId = rec1[0].SVMXC__Product__c;
	ProdName = rec1[0].SVMXC__Product__c ? rec1[0].SVMXC__Product__r.Name : "Unknown";
	SLKP_ReqQty = rec1[0].SVMXC__Requested_Quantity2__c;
	SLKP_RecordId = rec1[0].Id;
	SLKP_SiteId = rec1[0].SVMXC__Requested_Location__c;
	if (SLKP_SiteId == null)
	    {
	    alert(SVMXI_GetMessage("MSG003"));
	    CloseWindow();
	    return;
	    }
	}
    else if (reqType == 'PR')
    	{
	var soql2 = "SELECT SVMXC__Parts_Request__c, SVMXC__Product__c, SVMXC__Product__r.Name, SVMXC__Quantity_Required2__c, " +
		    "SVMXC__Parts_Request__r.SVMXC__Required_At_Location__c FROM SVMXC__Parts_Request_Line__c WHERE Id = '" + reqId + "'";
	var qr2 = sforce.connection.query(soql2);
	if (qr2.size <= 0)
	    {
	    alert(SVMXI_GetMessage("MSG002"));
	    CloseWindow();
	    return;
	    }
	rec2 = qr2.getArray("records");
	SLKP_ProductId = rec2[0].SVMXC__Product__c;
	ProdName = rec2[0].SVMXC__Product__c ? rec2[0].SVMXC__Product__r.Name : "Unknown";
	SLKP_ReqQty = rec2[0].SVMXC__Quantity_Required2__c;
	SLKP_RecordId = rec2[0].SVMXC__Parts_Request__c;
	SLKP_SiteId = rec2[0].SVMXC__Parts_Request__r.SVMXC__Required_At_Location__c;
	}
    else
    	{
	alert(SVMXI_GetMessage("MSG004"));
	CloseWindow();
	return;
	}
    document.getElementById("ProdName").innerHTML = SVMXI_GetMessage("MSG006") + ProdName;
    document.getElementById("ReqQty").innerHTML =   SVMXI_GetMessage("MSG007")+ parseFloat(SLKP_ReqQty);//"Required Quantity: "

    var soql3 = "SELECT SVMXC__Street__c, SVMXC__City__c, SVMXC__State__c, SVMXC__Zip__c, SVMXC__Country__c " +
    		"FROM SVMXC__Site__c WHERE Id = '" + SLKP_SiteId + "'";
    qr3 = sforce.connection.query(soql3);
    if (qr3.size <= 0)
	{
	SLKP_YouAreHere = SVMXI_GetMessage("MSG005");
	document.getElementById("userAddress").innerHTML = "<strong>"+SVMXI_GetMessage("MSG005")+"</>"  
	document.getElementById("Radius").disabled = true;
	document.getElementById("LAB020").disabled = true;
	}
    else
	{
	rec3 = qr3.getArray("records");

	if (rec3[0].SVMXC__Street__c) var myStreet = rec3[0].SVMXC__Street__c;
	else var myStreet = "";

	if (rec3[0].SVMXC__City__c) var myCity = rec3[0].SVMXC__City__c;
	else var myCity = "";

	if (rec3[0].SVMXC__State__c) var myState = rec3[0].SVMXC__State__c;
	else var myState = "";

	if (rec3[0].SVMXC__Zip__c) var myZip = rec3[0].SVMXC__Zip__c;
	else var myZip = "";

	if (rec3[0].SVMXC__Country__c) var myCountry = rec3[0].SVMXC__Country__c;
	else var myCountry = "";

	SLKP_YouAreHere = myStreet + " " + myCity + " " + myState + " " + myZip + " " + myCountry;
	document.getElementById("userAddress").innerHTML = myStreet + "<br>" + myCity + " " + myState + " " + myZip + "<br>" + myCountry;
	}
    SVMXI_ShowMap();
}
/*=====================================================================================*/
function SVMXI_ComputeDistance(point) 
{
    if (!SLKP_StartingPoint) { return 0; }
    var units = document.getElementById("LAB020").value;  
    var rawDistance = SLKP_StartingPoint.distanceFrom(point);
    var kilometers = rawDistance/1000;
    var miles = kilometers * 0.621371192;
    if (units == "Miles") { return Math.round(miles); }
    else { return (Math.round(kilometers)); }
}
/*=====================================================================================*/
/********************************************************************************/ 
// This function uses the haversine (half-versed-sine) method to calculate 
// distance between two 'points' 
function SVMXI_CalculateDistance(lat1, lon1, lat2, lon2, units) 
{ 
	var R = 6371; // km 
	//var units = document.getElementById("LAB020").value;
	var dLat = (lat2-lat1) * Math.PI / 180; 
	var dLon = (lon2-lon1) * Math.PI / 180; 
	var a = Math.sin(dLat/2) * Math.sin(dLat/2) + 
	Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
	Math.sin(dLon/2) * Math.sin(dLon/2); 
	var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
	var dkm = R * c;
	var dmiles = dkm * 0.621371192; 
	if (units == "Miles")
	{
		return Math.round(dmiles);
	}
	else {return Math.round(dkm);}
} 
/*=====================================================================================*/
function SVMXI_SLKP_ShowDirections(FromAddress, ToAddress)
{
    SLKP_directionsPanel = document.getElementById("divRoute");  
    if (!SLKP_directions)
	SLKP_directions = new GDirections(SLKP_map, SLKP_directionsPanel);  
    else
	SLKP_directions.clear();
    SLKP_directions.load(FromAddress + " to " + ToAddress);
}
/*=====================================================================================*/
function SVMXI_SLKP_SetRequestFromLocation(SiteId, Tag)
{
    var ans = confirm(Tag + SVMXI_GetMessage("MSG015"));
    if (!ans) { return; }

    if (SLKP_RecordType == 'SVO')
    	{
			var cObj = new sforce.SObject("SVMXC__Service_Order_Line__c");
			cObj.Id = SLKP_RecordId;
			//cObj.SVMXC__Requested_Location__c = SiteId;
			cObj.SVMXC__From_Location__c= SiteId;
			try {
			        
					var ret = sforce.connection.update([cObj]);                        
					if (ret[0].success!='true')
					{
					    alert('failed for wd');
						alert(ret[0].errors.message);
					}
					else
					{
						alert(SVMXI_GetMessage("MSG017"));
						window.opener.location = "/" + SLKP_RecordId;
						CloseWindow();
					}
			   }
                catch(error) {
				alert(SVMXI_GetMessage("MSG018")+"\n" + "123" + error);
			}
		}
    else if (SLKP_RecordType == 'PR')
    	{
	var cObj = new sforce.SObject("SVMXC__Parts_Request__c");
	cObj.Id = SLKP_RecordId;
	cObj.SVMXC__Requested_From__c = SiteId;
	try {
	    var ret = sforce.connection.update([cObj]);
		
	    alert(SVMXI_GetMessage("MSG020"));	
	    window.opener.location = "/" + SLKP_RecordId;
	    CloseWindow();
	    }
	catch(error) {
	
	    alert(SVMXI_GetMessage("MSG018")+"\n" + "456"+ error);
	    }
	}
    else
	{
	alert(SVMXI_GetMessage("MSG019")+"\n");
	}
}
/*=====================================================================================*/
function SVMXI_SLKP_AddLocationToMap(StockRec, SiteName, Street, City, State, Zip, Country, Phone, QtyAvlbl, SiteId,currcnt,totcnt)
{
    var add_row_to_grid = true;
    var addr = Street + ", " + City + ", " + State + " " + Zip + ", " + Country;
    var Distance = "Unknown";
	
	//Commented by Sumit and Manish due to Google Map API updation from v2 to v3.
   /* SLKP_geocoder.getLatLng
    (addr, 
	function(point)
	{
	if (point)
	    {
			Distance = SVMXI_ComputeDistance(point);
			if (Distance <= SLKP_radius || SLKP_radius == 0)
			{
				recFound ="YES";
				var StockTag = "<b>" + SiteName + "</b><br>" + 
						  Street + "<br>" + City + ", " + State + " " + Zip + ", " + Country + "<br>" + 
						  SVMXI_GetMessage("MSG013") + Phone + "<br>" + 
						  "<b> "+SVMXI_GetMessage("MSG014") + parseFloat(StockRec.SVMXC__Quantity2__c) + "</b>" +
						  "<br>"+SVMXI_GetMessage("MSG012");

				var myIcon = new GIcon(G_DEFAULT_ICON);
				if (parseFloat(QtyAvlbl) >= parseFloat(SLKP_ReqQty)) 
					{
						myIcon.image = "http://maps.google.com/mapfiles/kml/pal2/icon5.png"; 
					}
				else 
					{
						myIcon.image = "http://maps.google.com/mapfiles/kml/pal4/icon53.png"; 
					}

				myIcon.iconSize=new GSize(32,32);
				myIcon.shadowSize=new GSize(56,32);
				myIcon.iconAnchor=new GPoint(16,32);
				myIcon.infoWindowAnchor=new GPoint(16,0);
				markerOptions2 = { icon:myIcon };
				var marker = new GMarker(point, markerOptions2);
				SLKP_map.setCenter(point, 8);
				SLKP_map.addOverlay(marker);
				GEvent.addListener(marker, "mouseover", function() { marker.openInfoWindowHtml(StockTag); }) ;
				GEvent.addListener(marker, "mouseout", function() { marker.closeInfoWindow(); }) ;
				GEvent.addListener(marker, "click", function() { SVMXI_SLKP_ShowDirections(SLKP_YouAreHere, addr); });
				GEvent.addListener(marker, "dblclick", function() { SVMXI_SLKP_SetRequestFromLocation(SiteId, SiteName); });
				SVMXI_SLKP_AddResultRow(StockRec, SiteName, Street, City, State, Zip, Country, Phone, SiteId, Distance);
			}
			else if (Distance > SLKP_radius)
			{
				if(parseInt(currcnt)==parseInt(totcnt) && recFound =="NO")
				{
					alert(SVMXI_GetMessage("MSG022"));
					try{
						var tbody = document.getElementById("list_tbody");
						clear_table(tbody);
					}catch(e){}
				}
			}
	   }
	else
		{
	    SVMXI_SLKP_AddResultRow(StockRec, SiteName, Street, City, State, Zip, Country, Phone, SiteId, SVMXI_GetMessage("MSG021"));  
		}
     }
    ); 
	*/
	
	SLKP_geocoder.geocode( {'address': addr }, function(results, status) {
		if (status == google.maps.GeocoderStatus.OK) {
			var point = results.geometry.location;
			if (point)
			{
				alert('sumit');
				Distance = SVMXI_ComputeDistance(point);
				if (Distance <= SLKP_radius || SLKP_radius == 0)
				{
					recFound ="YES";
					var StockTag = "<b>" + SiteName + "</b><br>" + 
						  Street + "<br>" + City + ", " + State + " " + Zip + ", " + Country + "<br>" + 
						  SVMXI_GetMessage("MSG013") + Phone + "<br>" + 
						  "<b> "+SVMXI_GetMessage("MSG014") + parseFloat(StockRec.SVMXC__Quantity2__c) + "</b>" +
						  "<br>"+SVMXI_GetMessage("MSG012");
				
					var myIcon = {
						size: new google.maps.Size(32, 32), 
						anchor: new google.maps.Point(16, 32)
					}
					
					if (parseFloat(QtyAvlbl) >= parseFloat(SLKP_ReqQty)) 
					{
						myIcon.image = "http://maps.google.com/mapfiles/kml/pal2/icon5.png"; 
					}
					else 
					{
						myIcon.image = "http://maps.google.com/mapfiles/kml/pal4/icon53.png"; 
					}
					markerOptions2 = { 
						map: SLKP_map,
						icon: myIcon, 
						position: point, 
						shadow: { size: new google.maps.Size(56, 32)}	
					};
					var marker = new google.maps.Marker(markerOptions2);
					SLKP_map.setCenter(marker.Position);
					SLKP_map.setZoom(8)
					SLKP_map.panTo(point);
					var info_window = new google.maps.InfoWindow(StockTag);
					google.maps.event.addListener(marker, "mouseover", function() { info_window.open(SLKP_map, marker); }) ;
					google.maps.event.addListener(marker, "mouseout", function() { info_window.close();}) ;
					google.maps.event.addListener(marker, "click", function() { SVMXI_SLKP_ShowDirections(SLKP_YouAreHere, addr); });
					google.maps.event.addListener(marker, "dblclick", function() { SVMXI_SLKP_SetRequestFromLocation(SiteId, SiteName); });
					SVMXI_SLKP_AddResultRow(StockRec, SiteName, Street, City, State, Zip, Country, Phone, SiteId, Distance);
				}
				else if (Distance > SLKP_radius)
				{
					if(parseInt(currcnt)==parseInt(totcnt) && recFound =="NO")
					{
						alert(SVMXI_GetMessage("MSG022"));
						try{
							var tbody = document.getElementById("list_tbody");
							clear_table(tbody);
						}catch(e){}
					}
				}
			}
			else
			{
				SVMXI_SLKP_AddResultRow(StockRec, SiteName, Street, City, State, Zip, Country, Phone, SiteId, SVMXI_GetMessage("MSG021"));  
			}
		}
	})
}
/*=====================================================================================*/
function SVMXI_ShowMap() 
{
    if (window.screen)
    {
	window.moveTo(0,0);
	window.resizeTo(screen.width, screen.height);
    }
	
	//Commented by Sumit and Manish due to Google Map API updation from v2 to v3.
  /*  SLKP_map = new GMap2(document.getElementById("divMap"));
    SLKP_map.addControl(new GLargeMapControl());
    SLKP_map.addControl(new GMapTypeControl());
    SLKP_map.enableScrollWheelZoom();

    SLKP_geocoder = new GClientGeocoder();
    if (!SLKP_geocoder)
	{
	alert(SVMXI_GetMessage("MSG008"));
	CloseWindow();
	}
   SLKP_StartingPoint = new GLatLng();
   SVMXI_SLKP_AddStartingPoint();
   SVMXI_SLKP_AddStartingPointWithLatLong();
   */
   var mapOptions = {
		zoom: 8,
		mapTypeControl: true,
		mapTypeId: google.maps.MapTypeId.ROADMAP
	}

	SLKP_map = new google.maps.Map(document.getElementById("divMap"), mapOptions);
	SLKP_geocoder = new google.maps.Geocoder(); 
    if (!SLKP_geocoder)
	{
	alert(SVMXI_GetMessage("MSG008"));
	CloseWindow();
	}
   SLKP_StartingPoint = new google.maps.LatLng();
   SVMXI_SLKP_AddStartingPoint();
   SVMXI_SLKP_AddStartingPointWithLatLong();
}
/*=====================================================================================*/
function SVMXI_SLKP_AddStartingPoint()
{
	//Commented by Sumit and Manish due to Google Map API updation from v2 to v3.
   /* if (GBrowserIsCompatible())
    {
		SLKP_geocoder.getLatLng
		(SLKP_YouAreHere, 
			function(point)
			{
			if (point)
			{
			SLKP_StartingPoint = point;
			var blueIcon = new GIcon(G_DEFAULT_ICON);
			blueIcon.image = "http://maps.google.com/mapfiles/kml/pal3/icon38.png";
			blueIcon.iconSize=new GSize(32,32);
			blueIcon.shadowSize=new GSize(56,32);
			blueIcon.iconAnchor=new GPoint(16,32);
			blueIcon.infoWindowAnchor=new GPoint(16,0);
			markerOptions = { icon:blueIcon };
			var marker = new GMarker(point, markerOptions);
			SLKP_map.setCenter(point, 8);
			SLKP_map.addOverlay(marker);
			SLKP_map.panTo(point);
			GEvent.addListener(marker, "mouseover", function() { marker.openInfoWindowHtml(SVMXI_GetMessage("MSG010")); }) ;
			GEvent.addListener(marker, "mouseout", function() { marker.closeInfoWindow(); }) ;
			}
			else
			{
			alert(SVMXI_GetMessage("MSG009"));
			SVMXI_SLKP_ShowUnitedStates();
			}
			}
		);
    }
//	SVMXI_SLKP_AddStartingPointWithLatLong();
	*/
	
	SLKP_geocoder.geocode( {'address': SLKP_YouAreHere }, function(results, status) {
		if (status == google.maps.GeocoderStatus.OK) {
			var point = results[0].geometry.location;		
			if (point)
			{
				SLKP_StartingPoint = point;
				var blueIcon = {
						size: new google.maps.Size(32, 32), 
						anchor: new google.maps.Point(16, 32),
						url: "http://maps.google.com/mapfiles/kml/pal3/icon38.png"
				}
				markerOptions = { 
					map: SLKP_map,
					icon: blueIcon, 
					position: point, 
					shadow: {size: new google.maps.Size(56, 32)}	
				};
				var marker = new google.maps.Marker(markerOptions);
				SLKP_map.setCenter(marker.Position);
				SLKP_map.setZoom(8)
				SLKP_map.panTo(point);				
				var info_window = new google.maps.InfoWindow({content: SVMXI_GetMessage("MSG010")});
				google.maps.event.addListener(marker, "mouseover", function() {info_window.open(SLKP_map, marker);}) ;
				google.maps.event.addListener(marker, "mouseout", function() {info_window.close();}) ;
			}
			else
			{
				alert(SVMXI_GetMessage("MSG009"));
				SVMXI_SLKP_ShowUnitedStates();
			}
		}
	})
}
/*=====================================================================================*/
function SVMXI_SLKP_ShowUnitedStates()
{
	//Commented by Sumit and Manish due to Google Map API updation from v2 to v3.
   /* SLKP_StartingPoint = new GLatLng();
   
	if (GBrowserIsCompatible())
    {
    SLKP_geocoder.getLatLng
	("United States", 
	    function(point)
	    {
	    if (point)
		{
		SLKP_StartingPoint = point;
		var blueIcon = new GIcon(G_DEFAULT_ICON);
		blueIcon.image = "http://maps.google.com/mapfiles/kml/pal3/icon38.png";
		blueIcon.iconSize=new GSize(32,32);
		blueIcon.shadowSize=new GSize(56,32);
		blueIcon.iconAnchor=new GPoint(16,32);
		blueIcon.infoWindowAnchor=new GPoint(16,0);
		markerOptions = { icon:blueIcon };
		var marker = new GMarker(point, markerOptions);
		SLKP_map.setCenter(point, 8);
		SLKP_map.addOverlay(marker);
		SLKP_map.panTo(point);
		GEvent.addListener(marker, "mouseover", function() { marker.openInfoWindowHtml(SVMXI_GetMessage("MSG010")); }) ;
		GEvent.addListener(marker, "mouseout", function() { marker.closeInfoWindow(); }) ;
		}
	    }
	);
    }
	*/
	
	SLKP_StartingPoint = new google.maps.LatLng(0,0); 
	SLKP_geocoder.geocode( {'address': "United States" }, function(results, status) {
		if (status == google.maps.GeocoderStatus.OK) {
			var point = results[0].geometry.location;		
			if (point)
			{
				SLKP_StartingPoint = point;
				var blueIcon = {
						size: new google.maps.Size(32, 32), 
						anchor: new google.maps.Point(16, 32),
						url: "http://maps.google.com/mapfiles/kml/pal3/icon38.png"
				}
				markerOptions = { 
					map: SLKP_map,
					icon: blueIcon, 
					position: point, 
					shadow: {size: new google.maps.Size(56, 32)}	
				};
				var marker = new google.maps.Marker(markerOptions);
				SLKP_map.setCenter(marker.Position);
				SLKP_map.setZoom(8)
				SLKP_map.panTo(point);				
				var info_window = new google.maps.InfoWindow({content: SVMXI_GetMessage("MSG010")});
				google.maps.event.addListener(marker, "mouseover", function() {info_window.open(SLKP_map, marker);}) ;
				google.maps.event.addListener(marker, "mouseout", function() {info_window.close();}) ;
			}
			else
			{
				alert(SVMXI_GetMessage("MSG009"));
				SVMXI_SLKP_ShowUnitedStates();
			}
		}
	})
}
/*=====================================================================================*/ 
/*=====================================================================================*/ 
function SVMXI_SLKP_AddStartingPointWithLatLong() 
{ 
	//Commented by Sumit and Manish due to Google Map API updation from v2 to v3.
   /*	GMLKP_StartingPoint = new GLatLng(); 
	GMLKP_geocoder = new GClientGeocoder(); 
	if (!GMLKP_geocoder) 
	{ 
		alert(SVMXI_GetMessage("MSG023"));
		//alert('Unable to launch Geocoder to calculate coordinates.Please contact your ServiceMax adminsitrator.');
		// SVMXDC_CloseWindow(); 
		window.close(); 
	} 
	if (GBrowserIsCompatible()) 
	{ 
		GMLKP_geocoder.getLocations 
		(SLKP_YouAreHere, 
		function(response) 
		{ 
			if (response && response.Status.code == 200) 
			{ 
				var place = response.Placemark[0]; 
				var point = new GLatLng(place.Point.coordinates[1], place.Point.coordinates[0]); 
				GMLKP_Lat1 = place.Point.coordinates[1]; 
				GMLKP_Lon1 = place.Point.coordinates[0]; 

/*				GMLKP_StartingPoint = point; 
				var blueIcon = new GIcon(G_DEFAULT_ICON); 
				blueIcon.image = "http://maps.google.com/mapfiles/kml/pal3/icon38.png"; 
				blueIcon.iconSize=new GSize(32,32); 
				blueIcon.shadowSize=new GSize(56,32); 
				blueIcon.iconAnchor=new GPoint(16,32); 
				blueIcon.infoWindowAnchor=new GPoint(16,0); 
				markerOptions = { icon:blueIcon }; 
				var marker = new GMarker(point, markerOptions); 
				SLKP_map.setCenter(point, 8); 
				SLKP_map.addOverlay(marker); 
				SLKP_map.panTo(point); 
				GEvent.addListener(marker, "mouseover", function() { marker.openInfoWindowHtml(SLKP_YouAreHere); }) ; 
				GEvent.addListener(marker, "mouseout", function() { marker.closeInfoWindow(); }) ; */
		/*	} 
			else 
			{ 
//				alert(SVMXI_GetMessage("MSG009"));
//				SVMXI_SLKP_ShowUnitedStates();
				null;
			} 
		} 
		); 
	} 
	*/
	
	GMLKP_StartingPoint = new google.maps.LatLng(0,0); 
	GMLKP_geocoder = new google.maps.Geocoder(); 
	if (!GMLKP_geocoder) 
	{ 
		alert(SVMXI_GetMessage("MSG023"));
		//alert('Unable to launch Geocoder to calculate coordinates.Please contact your ServiceMax adminsitrator.');
		// SVMXDC_CloseWindow(); 
		window.close(); 
	} 
		GMLKP_geocoder.geocode( { 'address': SLKP_YouAreHere},		
		function(results, status)
		{ 
			if (status == google.maps.GeocoderStatus.OK) 
			{ 
				GMLKP_Lat1 = results[0].geometry.location.lat(); 
				GMLKP_Lon1 = results[0].geometry.location.lng(); 

/*				GMLKP_StartingPoint = point; 
				var blueIcon = new GIcon(G_DEFAULT_ICON); 
				blueIcon.image = "http://maps.google.com/mapfiles/kml/pal3/icon38.png"; 
				blueIcon.iconSize=new GSize(32,32); 
				blueIcon.shadowSize=new GSize(56,32); 
				blueIcon.iconAnchor=new GPoint(16,32); 
				blueIcon.infoWindowAnchor=new GPoint(16,0); 
				markerOptions = { icon:blueIcon }; 
				var marker = new GMarker(point, markerOptions); 
				SLKP_map.setCenter(point, 8); 
				SLKP_map.addOverlay(marker); 
				SLKP_map.panTo(point); 
				GEvent.addListener(marker, "mouseover", function() { marker.openInfoWindowHtml(SLKP_YouAreHere); }) ; 
				GEvent.addListener(marker, "mouseout", function() { marker.closeInfoWindow(); }) ; */
			} 
			else 
			{ 
//				alert(SVMXI_GetMessage("MSG009"));
//				SVMXI_SLKP_ShowUnitedStates();
				null;
			} 
		} 
		); 
} 
/*=====================================================================================*/
/*=====================================================================================*/
function SVMXC_SLKP_FindStock()
{
    var SiteName;
    var Street;
    var City;
    var State;
    var Zip;
    var Country;
    var Phone;
	recFound ="NO";
    SLKP_radius = document.getElementById("Radius").value;

/*    var soql = "SELECT Id, SVMXC__Location__c, SVMXC__Quantity2__c, SVMXC__Location__r.Name, SVMXC__Location__r.SVMXC__Street__c, " +
    	       "SVMXC__Location__r.SVMXC__City__c, SVMXC__Location__r.SVMXC__State__c, SVMXC__Location__r.SVMXC__Zip__c, " +
	       "SVMXC__Location__r.SVMXC__Country__c, SVMXC__Location__r.SVMXC__Site_Phone__c, " +
	       "SVMXC__Location__r.SVMXC__Service_Engineer__c FROM SVMXC__Product_Stock__c " +
    	       "WHERE SVMXC__Product__c = '" + SLKP_ProductId + "' AND SVMXC__Status__c = 'Available' AND SVMXC__Quantity2__c > 0";*/
	 var soql = "SELECT Id, SVMXC__Location__c, SVMXC__Quantity2__c, SVMXC__Location__r.Name, SVMXC__Location__r.SVMXC__Street__c, " +
    	       "SVMXC__Location__r.SVMXC__City__c, SVMXC__Location__r.SVMXC__State__c,   SVMXC__Location__r.SVMXC__Zip__c, " +
	           "SVMXC__Location__r.SVMXC__Country__c, SVMXC__Location__r.SVMXC__Site_Phone__c, " +
		       "SVMXC__Location__r.SVMXC__Latitude__c, SVMXC__Location__r.SVMXC__Longitude__c, " +
	           "SVMXC__Location__r.SVMXC__Service_Engineer__c FROM SVMXC__Product_Stock__c " +
    	       "WHERE SVMXC__Location__r.SVMXC__Latitude__c <> null and SVMXC__Location__r.SVMXC__Longitude__c <> null and SVMXC__Product__c = '" + SLKP_ProductId + "' AND SVMXC__Status__c = 'Available' AND SVMXC__Quantity2__c > 0 Order By SVMXC__Location__r.Name" ;

    var queryResult = sforce.connection.query(soql); 
    if (queryResult.size <= 0)
		{
			alert(SVMXI_GetMessage("MSG011"));	   		
		}
		
	// Commented by Sumit and Manish due to Google Map API updation from v2 to v3.
	// SLKP_map.clearOverlays();
    SVMXI_SLKP_AddStartingPoint();
 	SVMXI_SLKP_AddStartingPointWithLatLong();

    SLKP_rownum = 0;
    var header = false;
    var stockrecords = queryResult.getArray("records");
    var tbody = document.getElementById("list_tbody");

    for (var i = 0; i < stockrecords.length; i++)
	{
		var rec = stockrecords[i];
		if(rec.SVMXC__Location__c != null)
		{
			var SvcEngrId = rec.SVMXC__Location__r.SVMXC__Service_Engineer__c;
			if (SvcEngrId ==null || SvcEngrId.substr(0,15) != SLKP_UserId)	// Skip current user's sites
			{
				if (!rec.SVMXC__Location__r.Name) SiteName = "";
				else SiteName = rec.SVMXC__Location__r.Name;

				if (!rec.SVMXC__Location__r.SVMXC__Street__c) Street = "";
				else Street = rec.SVMXC__Location__r.SVMXC__Street__c;

				if (!rec.SVMXC__Location__r.SVMXC__City__c) City = "";
				else City = rec.SVMXC__Location__r.SVMXC__City__c;

				if (!rec.SVMXC__Location__r.SVMXC__State__c) State = "";
				else State = rec.SVMXC__Location__r.SVMXC__State__c;

				if (!rec.SVMXC__Location__r.SVMXC__Zip__c) Zip = "";
				else Zip = rec.SVMXC__Location__r.SVMXC__Zip__c;

				if (!rec.SVMXC__Location__r.SVMXC__Country__c) Country = "";
				else Country = rec.SVMXC__Location__r.SVMXC__Country__c;

				if (!rec.SVMXC__Location__r.SVMXC__Site_Phone__c) Phone = "";
				else Phone = rec.SVMXC__Location__r.SVMXC__Site_Phone__c;

				if (!header) {
				SVMXI_SLKP_DrawHeader(tbody);
				header = true;
				}
			
			//Commented by Sumit and Manish due to Google Map API updation from v2 to v3.
			//	var point = new GLatLng(rec.SVMXC__Location__r.SVMXC__Latitude__c, rec.SVMXC__Location__r.SVMXC__Longitude__c);
				var point = new google.maps.LatLng(rec.SVMXC__Location__r.SVMXC__Latitude__c, rec.SVMXC__Location__r.SVMXC__Longitude__c); 		
 				SVMXI_SLKP_AddPointToMap(rec,point,rec.SVMXC__Location__r.SVMXC__Latitude__c,rec.SVMXC__Location__r.SVMXC__Longitude__c, SiteName, Street, City, State, Zip, Country, Phone, parseFloat(rec.SVMXC__Quantity2__c), rec.SVMXC__Location__c,i,stockrecords.length);


			/*	if (rec.SVMXC__Location__r.SVMXC__Latitude__c != null && rec.SVMXC__Location__r.SVMXC__Longitude__c != null)
				{
					var point = new GLatLng(rec.SVMXC__Location__r.SVMXC__Latitude__c, rec.SVMXC__Location__r.SVMXC__Longitude__c); 				SVMXI_SLKP_AddPointToMap(rec,point,rec.SVMXC__Location__r.SVMXC__Latitude__c,rec.SVMXC__Location__r.SVMXC__Longitude__c, SiteName, Street, City, State, Zip, Country, Phone, parseFloat(rec.SVMXC__Quantity2__c), rec.SVMXC__Location__c,i,stockrecords.length);
				 
				}
				else
				{
					SVMXI_SLKP_AddLocationToMap(rec,SiteName, Street, City, State, Zip, Country, Phone, parseFloat(rec.SVMXC__Quantity2__c), rec.SVMXC__Location__c,i,stockrecords.length);
				}*/
				SLKP_rownum += 1;
			}
		}
	}

    var rv = document.getElementById("LAB019").value;
    if (rv == "Map") { SLKP_ShowMap = false; SLKP_ShowResults = true; }
    if (rv == "Grid") { SLKP_ShowResults = false; SLKP_ShowMap = true; }
    if (rv == "Both") { SLKP_ShowResults = false; SLKP_ShowMap = false; }

    SVMXC_SLKP_ToggleMap();
    SVMXC_SLKP_ToggleResults();
}
/*=====================================================================================*/
function SVMXI_SLKP_AddPointToMap(StockRec, Point,latitude,longitute, SiteName, Street, City, State, Zip, Country, Phone, QtyAvlbl, SiteId,currcnt,totcnt) 
{ 
	//Commented by Sumit and Manish due to Google Map API updation from v2 to v3.
   /*	var myIcon = new GIcon(G_DEFAULT_ICON); 
	myIcon.image = "http://maps.google.com/mapfiles/kml/pal2/icon5.png"; 
	var StockTag = "<b>" + SiteName + "</b><br>" + 
									  Street + "<br>" + City + ", " + State + " " + Zip + ", " + Country + "<br>" + 
									  SVMXI_GetMessage("MSG013") + Phone + "<br>" + 
									  "<b> "+SVMXI_GetMessage("MSG014") + parseFloat(StockRec.SVMXC__Quantity2__c) + "</b>" +
									  "<br>"+SVMXI_GetMessage("MSG012");
	var units = document.getElementById("LAB020").value; 
	Distance = SVMXI_CalculateDistance(GMLKP_Lat1,GMLKP_Lon1,latitude,longitute,units);
	if(Distance == 0)
	{
		SVMXI_SLKP_AddLocationToMap(StockRec,SiteName, Street, City, State, Zip, Country, Phone, QtyAvlbl, SiteId,currcnt,totcnt);
	}
	else if (Distance <= SLKP_radius || SLKP_radius == 0)
	{
		recFound =="YES"
		myIcon.iconSize=new GSize(32,32); 
		myIcon.shadowSize=new GSize(56,32); 
		myIcon.iconAnchor=new GPoint(16,32); 
		myIcon.infoWindowAnchor=new GPoint(16,0); 
		var markerOptions2 = { icon:myIcon }; 
		var marker = new GMarker(Point, markerOptions2);
		SLKP_map.addOverlay(marker); 
		GEvent.addListener(marker, "mouseover", function() { marker.openInfoWindowHtml(StockTag);}) ; 
		GEvent.addListener(marker, "mouseout", function() { marker.closeInfoWindow(); }) ; 
		GEvent.addListener(marker, "dblclick", function() { SVMXI_SLKP_SetRequestFromLocation(SiteId, SiteName); }); 
		SVMXI_SLKP_AddResultRow(StockRec, SiteName, Street, City, State, Zip, Country, Phone, SiteId, Distance);
	}
	else if (Distance > SLKP_radius)
	{
		if(parseInt(currcnt)==parseInt(totcnt) && recFound =="NO")
		{
			alert(SVMXI_GetMessage("MSG022"));
			try{
				var tbody = document.getElementById("list_tbody");
				clear_table(tbody);
			}catch(e){}
		}
	}
	*/
	
	var myIcon = {
		size: new google.maps.Size(32, 32), 
		anchor: new google.maps.Point(16, 32),
		url: "http://maps.google.com/mapfiles/kml/pal2/icon5.png"
	}
	var StockTag = "<b>" + SiteName + "</b><br>" + 
									  Street + "<br>" + City + ", " + State + " " + Zip + ", " + Country + "<br>" + 
									  SVMXI_GetMessage("MSG013") + Phone + "<br>" + 
									  "<b> "+SVMXI_GetMessage("MSG014") + parseFloat(StockRec.SVMXC__Quantity2__c) + "</b>" +
									  "<br>"+SVMXI_GetMessage("MSG012");
	var units = document.getElementById("LAB020").value; 
	Distance = SVMXI_CalculateDistance(GMLKP_Lat1,GMLKP_Lon1,latitude,longitute,units);
	if(Distance == 0)
	{
		SVMXI_SLKP_AddLocationToMap(StockRec,SiteName, Street, City, State, Zip, Country, Phone, QtyAvlbl, SiteId,currcnt,totcnt);
	}
	else if (Distance <= SLKP_radius || SLKP_radius == 0)
	{
		recFound =="YES"
		myIcon.size = google.maps.Size(32, 32);
		myIcon.anchor = new google.maps.Point(16, 32);
		markerOptions2 = { 
			map: SLKP_map,
			icon: myIcon, 
			position: Point, 
			shadow: { size: new google.maps.Size(56, 32)}	
		};
		var marker = new google.maps.Marker(markerOptions2);
		var info_window = new google.maps.InfoWindow({content: StockTag});
		google.maps.event.addListener(marker, "mouseover", function() {info_window.open(SLKP_map, marker);}) ;
		google.maps.event.addListener(marker, "mouseout", function() {info_window.close();}) ;
		google.maps.event.addListener(marker, "dblclick", function() { SVMXI_SLKP_SetRequestFromLocation(SiteId, SiteName); }); 
		SVMXI_SLKP_AddResultRow(StockRec, SiteName, Street, City, State, Zip, Country, Phone, SiteId, Distance);
	}
	else if (Distance > SLKP_radius)
	{
		if(parseInt(currcnt)==parseInt(totcnt) && recFound =="NO")
		{
			alert(SVMXI_GetMessage("MSG022"));
			try{
				var tbody = document.getElementById("list_tbody");
				clear_table(tbody);
			}catch(e){}
		}
	}
} 
/*=====================================================================================*/
/*=====================================================================================*/
function SVMXI_SLKP_AddResultRow(StockRec, SiteName, Street, City, State, Zip, Country, Phone, SiteId, Distance)
{
    var tbody = document.getElementById("list_tbody");
    var tr = makeRow(makeAttrs(SLKP_rownum,tbody));
    tr.sobject = StockRec;
    tbody.appendChild(tr);

	    // Col 1. Location Name
    createTag(tr,"th",{"scope":"row"}).innerHTML =
	    "<a target=_blank id=\"" + StockRec.Id + "SiteName\" href=\"/" + StockRec.Id + "\">" + SiteName + "</a>";

	    // Col 2. Street
    createTag(tr,"th",{"scope":"row"}).innerHTML =
	    "<a target=_blank href=\"/" + StockRec.Id + "\">" + Street + "</a>";

	    // Col 3. City
    createTag(tr,"th",{"scope":"row"}).innerHTML =
	    "<a target=_blank href=\"/" + StockRec.Id + "\">" + City + "</a>";

	    // Col 4. State
    createTag(tr,"th",{"scope":"row"}).innerHTML =
	    "<a target=_blank href=\"/" + StockRec.Id + "\">" + State + "</a>";

	    // Col 5. Zip
    createTag(tr,"th",{"scope":"row"}).innerHTML =
	    "<a target=_blank href=\"/" + StockRec.Id + "\">" + Zip + "</a>";

	    // Col 6. Country
    createTag(tr,"th",{"scope":"row"}).innerHTML =
	    "<a target=_blank href=\"/" + StockRec.Id + "\">" + Country + "</a>";

	    // Col 7. Phone
    createTag(tr,"th",{"scope":"row"}).innerHTML =
	    "<a target=_blank href=\"/" + StockRec.Id + "\">" + Phone + "</a>";

	    // Col 8. Available Quantity
    createTag(tr,"th",{"scope":"row", "align":"right"}).innerHTML =
	    "<a target=_blank href=\"/" + StockRec.Id + "\">" + StockRec.SVMXC__Quantity2__c + "</a>";

	    // Col 9. Distance
    createTag(tr,"th",{"scope":"row", "align":"right"}).innerHTML =
	    "<a target=_blank href=\"/" + StockRec.Id + "\">" + Distance + "</a>";

	    // Col 10. Radio button
    createTag(tr,"td",[]).innerHTML =
	"<input type=\"radio\" name=\"radio\" value=\"" + StockRec.Id + "\"></input>";

	    // Col 11. Hidden Site Id
    createTag(tr,"td",[]).innerHTML =
	"<input type=\"hidden\" id=\"" + StockRec.Id + "SiteId\" value=\"" + StockRec.SVMXC__Location__c + "\"></input>";
}
/*=====================================================================================*/
function SVMXI_SLKP_DrawHeader(ta)
{
    clear_table(ta);
    var tr = makeRow({'class':'headerRow'});
    ta.appendChild(tr);

    createTag(tr,"th",{'scope':'col'}).innerHTML =
	    "<a href=\"#\" title=\"\">"+SVMXI_GetMessage("LAB009")+"</a>";

    createTag(tr,"th",{'scope':'col'}).innerHTML =
	    "<a href=\"#\" title=\"\">"+SVMXI_GetMessage("LAB010")+"</a>";

    createTag(tr,"th",{'scope':'col'}).innerHTML =
	    "<a href=\"#\" title=\"\">"+SVMXI_GetMessage("LAB011")+"</a>";

    createTag(tr,"th",{'scope':'col'}).innerHTML =
	    "<a href=\"#\" title=\"\">"+SVMXI_GetMessage("LAB012")+"</a>";

    createTag(tr,"th",{'scope':'col'}).innerHTML =
	    "<a href=\"#\" title=\"\">"+SVMXI_GetMessage("LAB013")+"</a>";

    createTag(tr,"th",{'scope':'col'}).innerHTML =
	    "<a href=\"#\" title=\"\">"+SVMXI_GetMessage("LAB014")+"</a>";

    createTag(tr,"th",{'scope':'col'}).innerHTML =
	    "<a href=\"#\" title=\"\">"+SVMXI_GetMessage("LAB015")+" #</a>";

    createTag(tr,"th",{'scope':'col','align':'right'}).innerHTML =
	    "<a href=\"#\" title=\"\">"+SVMXI_GetMessage("LAB016")+"</a>";

    createTag(tr,"th",{'scope':'col','align':'right'}).innerHTML =
	    "<a href=\"#\" title=\"\">"+SVMXI_GetMessage("LAB017")+"</a>";

    createTag(tr,"th",{'scope':'col','align':'center'}).innerHTML =
	    "<a href=\"#\" title=\"\">"+SVMXI_GetMessage("LAB018")+"</a>";
}
/*=====================================================================================*/
function SVMXC_SLKP_ToggleMap()
{
    if (SLKP_ShowMap)
    	{
	document.getElementById("divMap").style.display = 'none';
	document.getElementById("divRoute").style.display = 'none';
	SLKP_ShowMap = false;
	}
    else
	{
	document.getElementById("divMap").style.display = 'block';
	document.getElementById("divRoute").style.display = 'block';
	SLKP_ShowMap = true;
	}
}
/*=====================================================================================*/
function SVMXC_SLKP_ToggleResults()
{
    if (SLKP_ShowResults)
	{
	document.getElementById("divResults").style.display = 'none';
	SLKP_ShowResults = false;
	}
    else
	{
	document.getElementById("divResults").style.display = 'block';
	SLKP_ShowResults = true;
	}
}
/*=====================================================================================*/
function SVMXC_SLKP_ToggleOptions()
{
    if (SLKP_ShowOptions)
	{
	document.getElementById("divOptions").style.display = 'none';
	SLKP_ShowOptions = false;
	}
    else
	{
	document.getElementById("divOptions").style.display = 'block';
	SLKP_ShowOptions = true;
	}
}
/*=====================================================================================*/
function createTag(parent, name, keyvalPairs)
{
    var ret;
    var browser = navigator.appName;
    if (browser == "Microsoft Internet Explorer") {
	    var trTag = "<"+name+" ";
	    for (key in keyvalPairs) {
			    trTag += key + "=\"" + keyvalPairs[key] + "\"";
	    }
	    trTag += ">";
	    ret = document.createElement(trTag);
    } else {
	    ret = document.createElement(name);
	    for (key in keyvalPairs) {
		    ret.setAttribute(key, keyvalPairs[key]);
	    }
    }
    parent.appendChild(ret);
    return ret;
}
/*=====================================================================================*/
function SVMXC_SLKP_RequestStock()
{
    var checked = false;
    var rlist = document.getElementsByName("radio");
    for (var i = 0; i < rlist.length; i++)
    	{
	if (rlist[i].checked)
	    {
	    checked = true;
	    break;
	    }
	}
    if (!checked)
    	{
	alert(SVMXI_GetMessage("MSG003"));
	return;
	}
    var sid = document.getElementById(rlist[i].value+"SiteId").value;
    var sn = document.getElementById(rlist[i].value+"SiteName").innerHTML;
    SVMXI_SLKP_SetRequestFromLocation(sid, sn);
}
/*=====================================================================================*/
function SVMXC_CancelPartsRequest(reqId, uId)
{
    SVMXI_InitMessageList("PREQSC1");
    SVMXI_SetLabels("cancelpartsrequest");

    var ans = confirm(SVMXI_GetMessage("MSG003"));
    if (!ans) { return; }

    CNPR_RequestId = reqId;
    CNPR_UserId = uId;

    // Get Parts Request header info
    var soql1 = "SELECT SVMXC__Status__c FROM SVMXC__Parts_Request__c WHERE Id = '" + CNPR_RequestId + "'";
    var qr1 = sforce.connection.query(soql1);
    if (qr1.size <= 0)
	{
	alert(SVMXI_GetMessage("MSG002"));
	CloseWindow();
	return;
	}
    var rec1 = qr1.getArray("records");
    if (rec1[0].SVMXC__Status__c == "Completed")
    	{
	alert(SVMXI_GetMessage("MSG004"));
	CloseWindow();
	return;
	}
    if (rec1[0].SVMXC__Status__c == "Canceled")
    	{
	alert(SVMXI_GetMessage("MSG005"));
	CloseWindow();
	return;
	}

    // Get open Parts Request lines
    var soql2 = "SELECT Id, SVMXC__Quantity_Shipment_Initiated2__c, SVMXC__Quantity_Shipped2__c, " +
    		"SVMXC__Quantity_Received2__c, SVMXC__Line_Status__c " +
		"FROM SVMXC__Parts_Request_Line__c WHERE SVMXC__Parts_Request__c = '" + CNPR_RequestId + "'";
    var qr2 = sforce.connection.query(soql2);
    recs = qr2.getArray("records");

    var curdate = new Date();
    var invalid = false;
    var reqlines = new Array();
    for (var k = 0; k < recs.length; k++)
    	{
	var rec = recs[k];

	if (rec.SVMXC__Line_Status__c == "Completed" || rec.SVMXC__Quantity_Shipment_Initiated2__c > 0 ||
				rec.SVMXC__Quantity_Received2__c > 0 || rec.SVMXC__Quantity_Shipped2__c > 0)
	    {
	    invalid = true;
	    break;
	    }
	var reqline = new sforce.SObject("SVMXC__Parts_Request_Line__c");
	reqline.Id = rec.Id;
	reqline.SVMXC__Line_Status__c = "Canceled";
	reqline.SVMXC__Canceled_On__c = SVMXI_GetCurrentTime();
	reqline.SVMXC__Canceled_By__c = CNPR_UserId;
	reqlines.push(reqline);
	}

    if (invalid)
    	{
	alert(SVMXI_GetMessage("MSG006")+"\n"+SVMXI_GetMessage("MSG007"));
	CloseWindow();
	return;
	}

    try {
	sforce.connection.update(reqlines);
	}
    catch (e) {
	alert(SVMXI_GetMessage("MSG001") + "\n" + e);
	CloseWindow();
	return false;
    	}
    var reqhdr = new sforce.SObject("SVMXC__Parts_Request__c");
    reqhdr.Id = CNPR_RequestId;
    reqhdr.SVMXC__Status__c = "Canceled";
    reqhdr.SVMXC__Canceled_On__c = SVMXI_GetCurrentTime();
    reqhdr.SVMXC__Canceled_By__c = CNPR_UserId;
    try {
	sforce.connection.update([reqhdr]);
	}
    catch (e) {
	alert(SVMXI_GetMessage("MSG001") + "\n" + e);
	CloseWindow();
	return false;
    	}
    window.opener.location.reload(true);
    CloseWindow();
    return true;
}
/*=====================================================================================*/
function SVMXC_CancelShipmentOrder(shpId, uId)
{
	SVMXI_InitMessageList("PORDSC1");
	SVMXI_SetLabels("CancelShipmentorder");
	
    CNSHP_ShipmentOrderId = shpId;
    CNSHP_UserId = uId;

    // Get Shipment order header info
    var soql1 = "SELECT SVMXC__Order_Status__c FROM SVMXC__RMA_Shipment_Order__c WHERE Id = '" + CNSHP_ShipmentOrderId + "'";
    var qr1 = sforce.connection.query(soql1);
    if (qr1.size <= 0)
	{
	alert(SVMXI_GetMessage("MSG002"));
	CloseWindow();
	return;
	}
    var rec1 = qr1.getArray("records");
    if (rec1[0].SVMXC__Order_Status__c == "Closed")
    	{
	alert(SVMXI_GetMessage("MSG003"));
	CloseWindow();
	return;
	}
    if (rec1[0].SVMXC__Order_Status__c == "Canceled")
    	{
	alert(SVMXI_GetMessage("MSG004"));
	CloseWindow();
	return;
	}

    // Get open shipment order lines
    var soql2 = "SELECT Id, SVMXC__Line_Status__c, SVMXC__Actual_Quantity2__c FROM SVMXC__RMA_Shipment_Line__c WHERE SVMXC__RMA_Shipment_Order__c = '" + CNSHP_ShipmentOrderId + "'";
    var qr2 = sforce.connection.query(soql2);
    recs = qr2.getArray("records");

    var curdate = new Date();
    var invalid = false;
    var shplines = new Array();
    for (var k = 0; k < recs.length; k++)
    	{
	var rec = recs[k];

	if (rec.SVMXC__Line_Status__c == "Completed" || rec.SVMXC__Line_Status__c == "Canceled" || parseFloat(rec.SVMXC__Actual_Quantity2__c) > 0)
	    {
	    invalid = true;
	    break;
	    }
	var shpline = new sforce.SObject("SVMXC__RMA_Shipment_Line__c");
	shpline.Id = rec.Id;
	shpline.SVMXC__Line_Status__c = "Canceled";
	shpline.SVMXC__Canceled_On__c = SVMXI_GetCurrentTime();
	shpline.SVMXC__Canceled_By__c = CNSHP_UserId;
	shplines.push(shpline);
	}

    if (invalid)
    	{
	alert(SVMXI_GetMessage("MSG005")+"\n"+SVMXI_GetMessage("MSG006"));
	CloseWindow();
	return;
	}

    try {
	sforce.connection.update(shplines);
	}
    catch (e) {
	alert(SVMXI_GetMessage("MSG001") + "\n" + e);
	CloseWindow();
	return false;
    	}
    var shphdr = new sforce.SObject("SVMXC__RMA_Shipment_Order__c");
    shphdr.Id = CNSHP_ShipmentOrderId;
    shphdr.SVMXC__Order_Status__c = "Canceled";
    shphdr.SVMXC__Canceled_On__c = SVMXI_GetCurrentTime();
    shphdr.SVMXC__Canceled_By__c = CNSHP_UserId;
    try {
	sforce.connection.update([shphdr]);
	}
    catch (e) {
	alert(SVMXI_GetMessage("MSG001") + "\n" + e);
	CloseWindow();
	return false;
    	}
    window.opener.location.reload(true);
    CloseWindow();
    return true;
}
/*=====================================================================================*/
function SVMXI_PRShp_ShowPRToBeShipped(reqId, uId)
{

	SVMXI_InitMessageList("PREQSC2");
	SVMXI_SetLabels("CreateShipmentFromPR");

    SHPR_RequestId = reqId;
    SHPR_UserId = uId;

    // Get Parts Request header info
    var soql1 = "SELECT OwnerId, SVMXC__Company__c, SVMXC__Status__c, SVMXC__Requested_From__c, " +
    		"SVMXC__Required_At_Location__c, SVMXC__Additional_Information__c " +
		"FROM SVMXC__Parts_Request__c WHERE Id = '" + SHPR_RequestId + "'";
    var qr1 = sforce.connection.query(soql1);
    if (qr1.size <= 0)
	{
	alert(SVMXI_GetMessage("MSG002") + "\n" + e);
	CloseWindow();
	return;
	}
    var rec1 = qr1.getArray("records");
    if (rec1[0].SVMXC__Status__c == "Completed")
    	{
	alert(SVMXI_GetMessage("MSG003"));
	CloseWindow();
	return;
	}
    if (rec1[0].SVMXC__Status__c == "Canceled")
    	{
	alert(SVMXI_GetMessage("MSG004"));
	CloseWindow();
	return;
	}
    SHPR_CompanyId = rec1[0].SVMXC__Company__c;
    SHPR_RequestedFromId = rec1[0].SVMXC__Requested_From__c;
    SHPR_RequiredAtId = rec1[0].SVMXC__Required_At_Location__c;
    SHPR_OwnerId = rec1[0].OwnerId;
    SHPR_AddlInfo = rec1[0].SVMXC__Additional_Information__c;

    // Get open Parts Request lines
    var soql2 = "SELECT Id, SVMXC__Parts_Request__c, SVMXC__Product__c, SVMXC__Product__r.Name, SVMXC__Quantity_Required2__c, " +
    		"SVMXC__Date_Required__c, SVMXC__Quantity_Shipment_Initiated2__c, SVMXC__Quantity_Shipped2__c, SVMXC__Additional_Information__c,SVMXC__Unit_Price2__c " +
		"FROM SVMXC__Parts_Request_Line__c WHERE SVMXC__Parts_Request__c = '" + SHPR_RequestId + "' AND " +
		"SVMXC__Line_Status__c = 'Open'"; //By Gm 18jun08 added fld : SVMXC__Unit_Price2__c  
    try {
    var qr2 = sforce.connection.query(soql2);
    } catch (e) { alert(e); }
    if (qr2.size <= 0)
	{
	alert(SVMXI_GetMessage("MSG005"));
	CloseWindow();
	return;
	}
    var reqrecs = new sforce.QueryResultIterator(qr2);

    var rowcnt = 0;
    var tbody = document.getElementById("list_tbody");

    SVMXI_PRShp_DrawHeader(tbody);

    while(reqrecs.hasNext())
	{
	var reqrec = reqrecs.next();
	var reqid = reqrec.Id;
	var prodid = reqrec.SVMXC__Product__c;
	var ReqQty = parseFloat(reqrec.SVMXC__Quantity_Required2__c);

	if (reqrec.SVMXC__Quantity_Shipment_Initiated2__c == null || isNaN(reqrec.SVMXC__Quantity_Shipment_Initiated2__c))
	    var ShipInitQty = 0;
	else
	    var ShipInitQty = parseFloat(reqrec.SVMXC__Quantity_Shipment_Initiated2__c);

	var RemQty = ReqQty-ShipInitQty;

	if (RemQty > 0)
	    {
	    var tr = makeRow(makeAttrs(rowcnt,tbody) );
	    tr.sobject = reqrec;
	    tbody.appendChild(tr);

		    // Col 1. Product Name
	    createTag(tr,"th",{"scope":"row"}).innerHTML =
		    "<a target=_blank href=\"/" + prodid + "\">" + reqrec.SVMXC__Product__r.Name + "</a>";

		    // Col 2. Remaining Quantity
	    createTag(tr,"td", []).innerHTML =
		    "<input disabled=\"true\" type=\"text\" id=\"" + reqid + "RemQty\" name=\"" + reqid + "RemQty\" value=\"" + RemQty + "\"></input>";

		    // Col 3. Quantity to be shipped
	    createTag(tr,"td", []).innerHTML =
		    "<input type=\"text\" id=\"" + reqid + "ShpQty\" name=\"" + reqid + "ShpQty\" value=\"" + RemQty + "\"></input>";

		    // Col 4. Quantity shipment initiated (hidden for update later)
	    createTag(tr,"td", []).innerHTML =
		    "<input type=\"hidden\" id=\"" + reqid + "ShipInitQty\" name=\"" + reqid + "ShipInitQty\" value=\"" + ShipInitQty + "\"></input>";

		    // Col 5. Status Message
	    createTag(tr,"td", []).innerHTML =
		    "<div id=\"" + reqid + "ErrMsg\" name=\"" + reqid + "ErrMsg\"></div>";

		    // Col 5. Hidden field to get a handle on the entire row. No UI purpose
	    createTag(tr,"td", []).innerHTML =
		    "<input type=\"hidden\" id=\"rowid\" name=\"rowid\"></input>";

	    rowcnt += 1;
	    }
	}
    if (rowcnt == 0)
    	{
	
	alert(SVMXI_GetMessage("MSG005"));
	CloseWindow();
	return;
	}
    document.getElementById('waitmsg').style.visibility = 'hidden'; 
    document.getElementById('waitmsg').style.height = 0; 
}
/*=====================================================================================*/
function SVMXI_PRShp_DrawHeader(ta)
{
    var tr = makeRow({'class':'headerRow'});
    ta.appendChild(tr);

    createTag(tr,"th",{'scope':'col'}).innerHTML =
	    "<a href=\"#\" title=\"\">"+SVMXI_GetMessage("LAB005")+"</a>";

    createTag(tr,"th",{'scope':'col','align':'right'}).innerHTML =
	    "<a href=\"#\" title=\"\">"+SVMXI_GetMessage("LAB006")+"</a>";

    createTag(tr,"th",{'scope':'col','align':'right'}).innerHTML =
	    "<a href=\"#\" title=\"\">"+SVMXI_GetMessage("LAB007")+"</a>";
}
/*=====================================================================================*/
function SVMXI_PRShp_ValidateAndProcess()
{
    var form = document.forms['CreateShipmentFromPR'];


    var sobjectList = new Array();
    for (i = 0; i < form.elements.length; i++)
	{
	if (form.elements[i].name == 'rowid')		// Need an identifier to process each row only once
	    {
	    var pn = form.elements[i].parentNode;
	    var ppn = form.elements[i].parentNode.parentNode;
	    if (ppn.sobject)
		{
		sobjectList.push(ppn.sobject);
		}
	    }
	}

    var invalid = false;
    var skipcnt = 0;
    for (var k = 0; k < sobjectList.length; k++)
    	{
	var rec_invalid = false;
	var rec = sobjectList[k];
	var RemQty = parseFloat(document.getElementById(rec.Id+"RemQty").value);
	var ShpQty = parseFloat(document.getElementById(rec.Id+"ShpQty").value);
	var ErrMsg = "";
	if (isNaN(ShpQty) || ShpQty < 0)
	    {
	    ErrMsg = SVMXI_GetMessage("MSG006"); 
	    rec_invalid = true;
	    invalid = true;
	    }
	else if (ShpQty == 0)
	    {
	    skipcnt += 1;
	    }
	else if(ShpQty > RemQty)
	    {
	    ErrMsg =SVMXI_GetMessage("MSG007"); 
	    rec_invalid = true;
	    invalid = true;
	    }
	if (rec_invalid)
	    {
	    document.getElementById(rec.Id+"ErrMsg").style.border = "#FF0000 2px solid";
	    document.getElementById(rec.Id+"ErrMsg").innerHTML = ErrMsg;
	    }
	else
	    {
	    document.getElementById(rec.Id+"ErrMsg").style.border = "0";
	    document.getElementById(rec.Id+"ErrMsg").innerHTML = "";
	    }
	}
    if(invalid) { return; }

    if(skipcnt == sobjectList.length)
    	{
	alert(SVMXI_GetMessage("MSG008"));
	return;
	}

    if (SVMXI_PRShp_CreateShipmentOrder(sobjectList))
    	{
	alert(SVMXI_GetMessage("MSG009"));
	window.opener.location = "/" + SHPR_ShipmentOrderId;
	CloseWindow();
	}
}
/*=====================================================================================*/
function SVMXI_PRShp_CreateShipmentOrder(sobjectList)
{
    // Get Salesforce internal Record Type ID for RMA Header "Shipment"
    var soql = "SELECT Id FROM RecordType WHERE SobjectType = 'SVMXC__RMA_Shipment_Order__c' AND Name = 'Shipment'"
    var queryResult = sforce.connection.query(soql); 
    var rtrecords = queryResult.getArray("records");
    if (rtrecords.length == 0) {        
	alert(SVMXI_GetMessage("MSG010")); 
        window.close();
        return;
    }
    var ShipmentHdrRecordType = rtrecords[0].Id;

    // Get Salesforce internal Record Type ID for RMA Line "Shipment"
    var soql = "SELECT Id FROM RecordType WHERE SobjectType = 'SVMXC__RMA_Shipment_Line__c' AND Name = 'Shipment'"
    var queryResult = sforce.connection.query(soql); 
    var rtrecords = queryResult.getArray("records");
    if (rtrecords.length == 0) {
	alert(SVMXI_GetMessage("MSG010")); 
	window.close();
        return;
    }
    var ShipmentLineRecordType = rtrecords[0].Id;
    var curdate = new Date();

    var shpHdr = new sforce.SObject("SVMXC__RMA_Shipment_Order__c");
    shpHdr.RecordTypeId = ShipmentHdrRecordType;
    shpHdr.SVMXC__Company__c = SHPR_CompanyId;
    shpHdr.SVMXC__Order_Status__c = "Open";
    shpHdr.SVMXC__Expected_Delivery_Date__c = sobjectList[0].SVMXC__Date_Required__c;
    shpHdr.SVMXC__Source_Location__c = SHPR_RequestedFromId;
    shpHdr.SVMXC__Destination_Location__c = SHPR_RequiredAtId;
    shpHdr.SVMXC__Service_Engineer__c = SHPR_OwnerId;
    shpHdr.SVMXC__Parts_Request__c = SHPR_RequestId;
    shpHdr.SVMXC__Shipping_Receiving_Notes__c = SHPR_AddlInfo;
    try {
        var ret = sforce.connection.create([shpHdr]); 
		if (ret[0].getBoolean("success")) 
                {
                                //return ret[0].id;                
                } 
                else 
                {
                                alert(ret[0].errors.message);
                                //return null;
                }  
		}
    catch(error) {
	alert(SVMXI_GetMessage("MSG011")+"\n"+ error);              
    }
    SHPR_ShipmentOrderId = ret[0].id;

    // build an array of shipment lines
    var shplines = new Array();
    var reqlines = new Array();
    for (var k = 0; k < sobjectList.length; k++)
    	{
	var rec = sobjectList[k];
	var ShpQty = parseFloat(document.getElementById(rec.Id+"ShpQty").value);
	var RemQty = parseFloat(document.getElementById(rec.Id+"RemQty").value);
	var ShipInitQty = parseFloat(document.getElementById(rec.Id+"ShipInitQty").value);

	if (ShpQty == 0) { continue; }		// Item not shipped. Skip.

	var shpLine = new sforce.SObject("SVMXC__RMA_Shipment_Line__c");
        shpLine.SVMXC__RMA_Shipment_Order__c = SHPR_ShipmentOrderId;
        shpLine.RecordTypeId = ShipmentLineRecordType;
        shpLine.SVMXC__Product__c = rec.SVMXC__Product__c;
        shpLine.SVMXC__Expected_Ship_Date__c = rec.SVMXC__Date_Required__c;
		shpLine.SVMXC__Expected_Quantity2__c = ShpQty;
        shpLine.SVMXC__Ship_Location__c = SHPR_RequiredAtId;
        shpLine.SVMXC__Line_Status__c = "Open";
        shpLine.SVMXC__Line_Type__c = "Outbound (Shipment)";
        shpLine.SVMXC__Parts_Request_Line__c = rec.Id;
        shpLine.SVMXC__Posted_To_Inventory__c = false;
        shpLine.SVMXC__Packing_Instructions__c = rec.SVMXC__Additional_Information__c;
        shpLine.SVMXC__Service_Engineer__c = SHPR_OwnerId;
		shpLine.SVMXC__Line_Price2__c = rec.SVMXC__Unit_Price2__c; //By Gm 18Jun08 
		shpLine.SVMXC__Use_Price_From_Pricebook__c = "False"; //BY GM 18Jun08
	shplines.push(shpLine);

	var reqline = new sforce.SObject("SVMXC__Parts_Request_Line__c");
	reqline.Id = rec.Id;
	reqline.SVMXC__Quantity_Shipment_Initiated2__c = ShipInitQty + ShpQty;
	reqlines.push(reqline);
	}

    try {
	sforce.connection.create(shplines);
	}
    catch (e) {		
		alert(SVMXI_GetMessage("MSG012")+"\n"+ e);              
		return false;
    	}

    // Update the parts request lines with shipment initiated quantity
    try {
	sforce.connection.update(reqlines);
	}
    catch (e) {
	alert(SVMXI_GetMessage("MSG001") + "\n" + e);
	return false;
    	}
    return true;
}
/*=====================================================================================*/
function SVMXI_SVOShp_ShowScreen(servId, uId)
{

	SVMXI_InitMessageList("WORDSC5");
	SVMXI_SetLabels("CreateShipmentFromSVO");

    SHSVO_SVOId = servId;
    SHSVO_UserId = uId;

    // Get Service Order header info
    var soql1 = "SELECT OwnerId, SVMXC__Company__c, SVMXC__Case__c, SVMXC__Contact__c, SVMXC__Order_Status__c FROM SVMXC__Service_Order__c WHERE Id = '" + SHSVO_SVOId + "'";
    var qr1 = sforce.connection.query(soql1);
    if (qr1.size <= 0)
	{	 
	alert(SVMXI_GetMessage("MSG002") );
	CloseWindow();
	return;
	}
    var rec1 = qr1.getArray("records");
    if (rec1[0].SVMXC__Order_Status__c == "Closed")
    	{
	alert(SVMXI_GetMessage("MSG003"));
	CloseWindow();
	return;
	}
    if (rec1[0].SVMXC__Order_Status__c == "Canceled")
    	{
	alert(SVMXI_GetMessage("MSG004"));
	CloseWindow();
	return;
	}
    SHSVO_CompanyId = rec1[0].SVMXC__Company__c;
    SHSVO_CaseId = rec1[0].SVMXC__Case__c;
    SHSVO_ContactId = rec1[0].SVMXC__Contact__c;
    SHSVO_OwnerId = rec1[0].OwnerId;

    // Get Salesforce internal Record Type ID for SVO Line "Request/Receipt"
    var soql2 = "SELECT Id FROM RecordType WHERE SobjectType = 'SVMXC__Service_Order_Line__c' AND Name = 'Request/Receipt'"
    var qr2 = sforce.connection.query(soql2); 
    if (qr2.size <= 0)
    	{
	alert(SVMXI_GetMessage("MSG010"));              
        window.close();
        return;
	}
    var rec2 = qr2.getArray("records");

    // Get open Service Order lines
    var soql3 = "SELECT Id, SVMXC__Requested_Location__c,SVMXC__Requested_Location__r.Name " +
		"FROM SVMXC__Service_Order_Line__c WHERE SVMXC__Service_Order__c = '" + SHSVO_SVOId + "' AND " +
		"SVMXC__Line_Status__c = 'Open' AND RecordTypeId = '" + rec2[0].Id + "'";
    try {
    var qr3 = sforce.connection.query(soql3);
    } catch (e) { alert(e); }
    if (qr3.size <= 0)
	{
	alert(SVMXI_GetMessage("MSG005"));
	CloseWindow();
	return;
	}
    var RequiredAt = false;
    var reccnt = 0;
    var k = 0;
    var rec3 = new sforce.QueryResultIterator(qr3);
    var LocList = document.getElementById("LocationList");
    while(rec3.hasNext())
    	{
	var svoline = rec3.next();
	if (svoline.SVMXC__Requested_Location__c)
	    {
	    var skip = false;
	    for (var i = 0; i < LocList.length; i++)
		{
		if (LocList[i].value == svoline.SVMXC__Requested_Location__c)
		    {
		    skip = true;
		    break;
		    }
		}
	    if (!skip)
		{
		loc = new Option(svoline.SVMXC__Requested_Location__r.Name, svoline.SVMXC__Requested_Location__c);
		LocList.options[k++] = loc;
		reccnt += 1;
		}
	    }
	if (svoline.SVMXC__Requested_Location__c && !SHSVO_RequiredAtId)
	    {
	    SHSVO_RequiredAtId = svoline.SVMXC__Requested_Location__c;
	    RequiredAt = true;
	    }
	}

    if (reccnt == 0)
    	{
	alert(SVMXI_GetMessage("MSG006"));
        window.close();
        return;
	}

    if (!RequiredAt)
    	{
	alert(SVMXI_GetMessage("MSG007"));
        window.close();
        return;
	}

    if (reccnt == 1)		// If only one location is available, pre-select it
	{
	LocList.selectedIndex = 0;
	SVMXI_SVOShp_ShowProductsForLocation(LocList);
	}
    else { LocList.selectedIndex = -1; }

    document.getElementById('waitmsg').style.visibility = 'hidden'; 
    document.getElementById('waitmsg').style.height = 0; 

    return;
}
/*=====================================================================================*/
function SVMXI_SVOShp_ShowProductsForLocation(LocList)
{
    if (LocList.selectedIndex < 0) { return; }		// just to be safe

    // Get open Service Order lines
    var soql2 = "SELECT Id, SVMXC__Service_Order__c, SVMXC__Product__c, SVMXC__Product__r.Name, SVMXC__Requested_Quantity2__c, " +
    		"SVMXC__Date_Requested__c, SVMXC__Quantity_Shipment_Initiated2__c, SVMXC__Quantity_Shipped2__c, SVMXC__Requested_Location__c " +
		"FROM SVMXC__Service_Order_Line__c WHERE SVMXC__Service_Order__c = '" + SHSVO_SVOId + "' AND " +
		"SVMXC__Line_Status__c = 'Open' AND SVMXC__Requested_Location__c = '" + LocList[LocList.selectedIndex].value + "'";
    try {
    var qr2 = sforce.connection.query(soql2);
    } catch (e) { alert(e); }
    if (qr2.size <= 0)
	{
	alert(SVMXI_GetMessage("MSG008"));
	CloseWindow();
	return;
	}
    var reqrecs = new sforce.QueryResultIterator(qr2);

    var rowcnt = 0;
    var tbody = document.getElementById("list_tbody");

    SVMXI_SVOShp_DrawHeader(tbody);

    while(reqrecs.hasNext())
	{
	var reqrec = reqrecs.next();
	var reqid = reqrec.Id;
	var prodid = reqrec.SVMXC__Product__c;
	var ReqQty = parseFloat(reqrec.SVMXC__Requested_Quantity2__c);

	if (reqrec.SVMXC__Quantity_Shipment_Initiated2__c == null || isNaN(reqrec.SVMXC__Quantity_Shipment_Initiated2__c))
	    var ShipInitQty = 0;
	else
	    var ShipInitQty = parseFloat(reqrec.SVMXC__Quantity_Shipment_Initiated2__c);

	var RemQty = ReqQty-ShipInitQty;

	if (RemQty > 0)
	    {
	    var tr = makeRow(makeAttrs(rowcnt,tbody) );
	    tr.sobject = reqrec;
	    tbody.appendChild(tr);

		    // Col 1. Product Name
	    createTag(tr,"th",{"scope":"row"}).innerHTML =
		    "<a target=_blank href=\"/" + prodid + "\">" + prodid ? reqrec.SVMXC__Product__r.Name : "Unknown" + "</a>";

		    // Col 2. Remaining Quantity
	    createTag(tr,"td", []).innerHTML =
		    "<input disabled=\"true\" type=\"text\" id=\"" + reqid + "RemQty\" name=\"" + reqid + "RemQty\" value=\"" + RemQty + "\"></input>";

		    // Col 3. Quantity to be shipped
	    createTag(tr,"td", []).innerHTML =
		    "<input type=\"text\" id=\"" + reqid + "ShpQty\" name=\"" + reqid + "ShpQty\" value=\"" + RemQty + "\"></input>";

		    // Col 4. Quantity shipment initiated (hidden for update later)
	    createTag(tr,"td", []).innerHTML =
		    "<input type=\"hidden\" id=\"" + reqid + "ShipInitQty\" name=\"" + reqid + "ShipInitQty\" value=\"" + ShipInitQty + "\"></input>";

		    // Col 5. Status Message
	    createTag(tr,"td", []).innerHTML =
		    "<div id=\"" + reqid + "ErrMsg\" name=\"" + reqid + "ErrMsg\"></div>";

		    // Col 5. Hidden field to get a handle on the entire row. No UI purpose
	    createTag(tr,"td", []).innerHTML =
		    "<input type=\"hidden\" id=\"rowid\" name=\"rowid\"></input>";

	    rowcnt += 1;
	    }
	}
    if (rowcnt == 0)
    	{
	alert(SVMXI_GetMessage("MSG008"));
	CloseWindow();
	return;
	}
}
/*=====================================================================================*/
function SVMXI_SVOShp_DrawHeader(ta)
{
    clear_table(null);

    var tr = makeRow({'class':'headerRow'});
    ta.appendChild(tr);

    createTag(tr,"th",{'scope':'col'}).innerHTML =
	    "<a href=\"#\" title=\"\">"+SVMXI_GetMessage("LAB005")+"</a>";

    createTag(tr,"th",{'scope':'col','align':'right'}).innerHTML =
	    "<a href=\"#\" title=\"\">"+SVMXI_GetMessage("LAB006")+"</a>";

    createTag(tr,"th",{'scope':'col','align':'right'}).innerHTML =
	    "<a href=\"#\" title=\"\">"+SVMXI_GetMessage("LAB007")+"</a>";
}
/*=====================================================================================*/
function SVMXI_SVOShp_ValidateAndProcess()
{
    if (document.getElementById("LocationList").selectedIndex < 0)
    	{
	alert(SVMXI_GetMessage("MSG011"));
	return;
	}

    var form = document.forms['CreateShipmentFromSVO'];

    var sobjectList = new Array();
    for (i = 0; i < form.elements.length; i++)
	{
	if (form.elements[i].name == 'rowid')		// Need an identifier to process each row only once
	    {
	    var pn = form.elements[i].parentNode;
	    var ppn = form.elements[i].parentNode.parentNode;
	    if (ppn.sobject)
		{
		sobjectList.push(ppn.sobject);
		}
	    }
	}

    var invalid = false;
    var skipcnt = 0;
    for (var k = 0; k < sobjectList.length; k++)
    	{
	var rec_invalid = false;
	var rec = sobjectList[k];
	var RemQty = parseFloat(document.getElementById(rec.Id+"RemQty").value);
	var ShpQty = parseFloat(document.getElementById(rec.Id+"ShpQty").value);
	var ErrMsg = "";
	if (isNaN(ShpQty) || ShpQty < 0)
	    {
	    ErrMsg = SVMXI_GetMessage("MSG012"); 
	    rec_invalid = true;
	    invalid = true;
	    }
	else if (ShpQty == 0)
	    {
	    skipcnt += 1;
	    }
	else if(ShpQty > RemQty)
	    {
	    ErrMsg =SVMXI_GetMessage("MSG013"); 
	    rec_invalid = true;
	    invalid = true;
	    }
	if (rec_invalid)
	    {
	    document.getElementById(rec.Id+"ErrMsg").style.border = "#FF0000 2px solid";
	    document.getElementById(rec.Id+"ErrMsg").innerHTML = ErrMsg;
	    }
	else
	    {
	    document.getElementById(rec.Id+"ErrMsg").style.border = "0";
	    document.getElementById(rec.Id+"ErrMsg").innerHTML = "";
	    }
	}
    if(invalid) { return; }

    if(skipcnt == sobjectList.length)
    	{
	alert(SVMXI_GetMessage("MSG014"));
	return;
	}

    if (SVMXI_SVOShp_CreateShipmentOrder(sobjectList))
    	{
	alert(SVMXI_GetMessage("MSG015"));
	window.opener.location = "/" + ShipmentOrderId;
	CloseWindow();
	}
}
/*=====================================================================================*/
function SVMXI_SVOShp_CreateShipmentOrder(sobjectList)
{
    var LocList = document.getElementById("LocationList");
    var idx = LocList.selectedIndex;
    var SourceLocId = LocList[idx].value;

    // Get Salesforce internal Record Type ID for RMA Header "Shipment"
    var soql = "SELECT Id FROM RecordType WHERE SobjectType = 'SVMXC__RMA_Shipment_Order__c' AND Name = 'Shipment'"
    var queryResult = sforce.connection.query(soql); 
    var rtrecords = queryResult.getArray("records");
    if (rtrecords.length == 0) {       
	alert(SVMXI_GetMessage("MSG010"));
        window.close();
        return;
    }
    var ShipmentHdrRecordType = rtrecords[0].Id;

    // Get Salesforce internal Record Type ID for RMA Line "Shipment"
    var soql = "SELECT Id FROM RecordType WHERE SobjectType = 'SVMXC__RMA_Shipment_Line__c' AND Name = 'Shipment'"
    var queryResult = sforce.connection.query(soql); 
    var rtrecords = queryResult.getArray("records");
    if (rtrecords.length == 0) {    
	alert(SVMXI_GetMessage("MSG010"));
        window.close();
        return;
    }
    var ShipmentLineRecordType = rtrecords[0].Id;
    var curdate = new Date();

    var shpHdr = new sforce.SObject("SVMXC__RMA_Shipment_Order__c");
    shpHdr.RecordTypeId = ShipmentHdrRecordType;
    shpHdr.SVMXC__Company__c = SHSVO_CompanyId;
    shpHdr.SVMXC__Case__c = SHSVO_CaseId;
    shpHdr.SVMXC__Contact__c = SHSVO_ContactId;
    shpHdr.SVMXC__Order_Status__c = "Open";
    shpHdr.SVMXC__Expected_Delivery_Date__c = sobjectList[0].SVMXC__Date_Required__c;
    shpHdr.SVMXC__Source_Location__c = SourceLocId;
    shpHdr.SVMXC__Destination_Location__c = SHSVO_RequiredAtId;
    shpHdr.SVMXC__Service_Engineer__c = SHSVO_OwnerId;
    shpHdr.SVMXC__Service_Order__c = SHSVO_SVOId;
    try {
        var ret = sforce.connection.create([shpHdr]); 
		if (ret[0].getBoolean("success")) 
                {
                                //return ret[0].id;                
                } 
                else 
                {
                                alert(ret[0].errors.message);
                                //return null;
                }  
	}
    catch(error) {
	alert(SVMXI_GetMessage("MSG016")+"\n"+ error);
	}
    ShipmentOrderId = ret[0].id;

    // build an array of shipment lines
    var shplines = new Array();
    var reqlines = new Array();
    for (var k = 0; k < sobjectList.length; k++)
    	{
	var rec = sobjectList[k];
	var ShpQty = parseFloat(document.getElementById(rec.Id+"ShpQty").value);
	var RemQty = parseFloat(document.getElementById(rec.Id+"RemQty").value);
	var ShipInitQty = parseFloat(document.getElementById(rec.Id+"ShipInitQty").value);

	if (ShpQty == 0) { continue; }		// Item not shipped. Skip.

	var shpLine = new sforce.SObject("SVMXC__RMA_Shipment_Line__c");
        shpLine.SVMXC__RMA_Shipment_Order__c = ShipmentOrderId;
        shpLine.RecordTypeId = ShipmentLineRecordType;
        shpLine.SVMXC__Product__c = rec.SVMXC__Product__c;
        shpLine.SVMXC__Expected_Ship_Date__c = rec.SVMXC__Date_Required__c;
	shpLine.SVMXC__Expected_Quantity2__c = ShpQty;
        shpLine.SVMXC__Ship_Location__c = SHSVO_RequiredAtId;
        shpLine.SVMXC__Line_Status__c = "Open";
        shpLine.SVMXC__Line_Type__c = "Outbound (Shipment)";
        shpLine.SVMXC__Service_Order_Line__c = rec.Id;
        shpLine.SVMXC__Posted_To_Inventory__c = false;
        shpLine.SVMXC__Service_Engineer__c = SHSVO_OwnerId;
		shpLine.SVMXC__Use_Price_From_Pricebook__c = "False"; //By Gm 18Jun08
	shplines.push(shpLine);

	var reqline = new sforce.SObject("SVMXC__Service_Order_Line__c");
	reqline.Id = rec.Id;
	reqline.SVMXC__Quantity_Shipment_Initiated2__c = ShipInitQty + ShpQty;
	reqlines.push(reqline);
	}

    try {
	sforce.connection.create(shplines);
	}
    catch (e) {
	alert(SVMXI_GetMessage("MSG017")+ "\n" + e);
	return false;
    	}

    // Update the SVO parts request lines with shipment initiated quantity
    try {
	sforce.connection.update(reqlines);
	}
    catch (e) {
        alert(SVMXI_GetMessage("MSG001") + "\n" + e);
	return false;
    	}
    return true;
}
/*=====================================================================================*/
function SVMXC_SVO_CancelPartsRequest(servId, uId, lineId)
{

	SVMXI_InitMessageList("WORDSC1");
	SVMXI_SetLabels("CancelSVOLinePartsRequest");
	
	
    CNSVOPR_SVOId = servId;
    CNSVOPR_UserId = uId;
    CNSVOPR_SVOLineId = lineId;

    // Get Service Order header info
    var soql1 = "SELECT SVMXC__Order_Status__c FROM SVMXC__Service_Order__c WHERE Id = '" + CNSVOPR_SVOId + "'";
    var qr1 = sforce.connection.query(soql1);
    if (qr1.size <= 0)
	{
	 alert(SVMXI_GetMessage("MSG002"));
	CloseWindow();
	return;
	}
    var rec1 = qr1.getArray("records");
    if (rec1[0].SVMXC__Order_Status__c == "Closed")
    	{
	 alert(SVMXI_GetMessage("MSG003"));
	CloseWindow();
	return;
	}
    if (rec1[0].SVMXC__Order_Status__c == "Canceled")
    	{
	 alert(SVMXI_GetMessage("MSG004"));
	CloseWindow();
	return;
	}

    // Get Salesforce internal Record Type ID for Service order "Request/Receipt"
    var soql2 = "SELECT Id FROM RecordType WHERE SobjectType = 'SVMXC__Service_Order_Line__c' AND Name = 'Request/Receipt'"
    var qr2 = sforce.connection.query(soql2); 
    var rec2 = qr2.getArray("records");
    if (rec2.length == 0)
	{
	alert(SVMXI_GetMessage("MSG005"));       
	   window.close();
        return;
	}
    ReqRecordTypeId = rec2[0].Id;

    // Get open Service Order lines
    var soql3 = "SELECT Id, SVMXC__Quantity_Shipment_Initiated2__c, SVMXC__Quantity_Shipped2__c, " +
    		"SVMXC__Received_Quantity2__c, SVMXC__Line_Status__c " +
		"FROM SVMXC__Service_Order_Line__c WHERE SVMXC__Service_Order__c = '" + CNSVOPR_SVOId + "' " +
		"AND RecordTypeId = '" + ReqRecordTypeId + "'";
    if (CNSVOPR_SVOLineId) { soql3 = soql3 + " AND Id = '" + CNSVOPR_SVOLineId + "'"; }
    var qr3 = sforce.connection.query(soql3);
    recs = qr3.getArray("records");

    var curdate = new Date();
    var invalid = false;
    var svolines = new Array();
    for (var k = 0; k < recs.length; k++)
    	{
	var rec = recs[k];

	if (rec.SVMXC__Line_Status__c == "Completed" || rec.SVMXC__Quantity_Shipment_Initiated2__c > 0 ||
					rec.SVMXC__Received_Quantity2__c > 0 || rec.SVMXC__Quantity_Shipped2__c > 0)
	    {
	    invalid = true;
	    break;
	    }
	var svoline = new sforce.SObject("SVMXC__Service_Order_Line__c");
	svoline.Id = rec.Id;
	svoline.SVMXC__Line_Status__c = "Canceled";
	svoline.SVMXC__Canceled_On__c = SVMXI_GetCurrentTime();
	svoline.SVMXC__Canceled_By__c = CNSVOPR_UserId;
	svolines.push(svoline);
	}

    if (invalid)
    	{
	if (CNSVOPR_SVOLineId)
	    {

		alert(SVMXI_GetMessage("MSG006")+"\n"+SVMXI_GetMessage("MSG007")); 
		}
		
	else
	    {

		alert(SVMXI_GetMessage("MSG008")+"\n"+SVMXI_GetMessage("MSG009")); 
		}
	CloseWindow();
	return;
	}

    try {
	sforce.connection.update(svolines);
	}
    catch (e) {

	 alert(SVMXI_GetMessage("MSG001") + "\n" + e);
	CloseWindow();
	return false;
    	}
  
	 alert(SVMXI_GetMessage("MSG010"));
    window.opener.location.reload(true);
    CloseWindow();
    return true;
}
/*=====================================================================================*/
function SVMXI_ProcPRR_ShowRequestRecords(reqId, reqNum, uId, sessId)
{
    SVMXI_InitMessageList("PREQSC3");
    SVMXI_SetLabels("procprreceipt");

    PPRR_RequestId = reqId;
    PPRR_UserId = uId;
    PPRR_PRNumber = reqNum;
    PPRR_SessionId = sessId;

    // Get Parts Request header info
    var soql1 = "SELECT SVMXC__Status__c, SVMXC__Company__c, SVMXC__Requested_From__c, SVMXC__Required_At_Location__c " +
		"FROM SVMXC__Parts_Request__c WHERE Id = '" + PPRR_RequestId + "'";
    var qr1 = sforce.connection.query(soql1);
    if (qr1.size <= 0)
	{
	alert(SVMXI_GetMessage("MSG002"));
	CloseWindow();
	return;
	}
    var rec1 = qr1.getArray("records");
    if (rec1[0].SVMXC__Status__c == "Completed")
    	{
	alert(SVMXI_GetMessage("MSG003"));
	CloseWindow();
	return;
	}
    if (rec1[0].SVMXC__Status__c == "Canceled")
    	{
	alert(SVMXI_GetMessage("MSG004"));
	CloseWindow();
	return;
	}
    PPRR_SiteId = rec1[0].SVMXC__Required_At_Location__c;
    PPRR_SupplierId = rec1[0].SVMXC__Company__c;
    PPRR_SourceLocStockable = true;

    // If source location is not a stocking location and a supplier name is given,
    // it is implied that the receipt was from a supplier
    // and it does not have to be accounted for in inventory
    // So we choose the default internal location
    if (rec1[0].SVMXC__Requested_From__c && PPRR_SupplierId)             // HS 04/28/2008
	{
	var soql4 = "SELECT SVMXC__Stocking_Location__c FROM SVMXC__Site__c WHERE Id = '" + rec1[0].SVMXC__Requested_From__c + "'";
	var qr4 = sforce.connection.query(soql4);
	var rec4 = qr4.getArray("records");
	if (rec4[0].SVMXC__Stocking_Location__c == "false")
	    {
	    var soql3 = "SELECT Id FROM SVMXC__Site__c WHERE Name = 'Default Supplier Location'";
	    var qr3 = sforce.connection.query(soql3);
	    if (qr3.size <= 0)
			{
			alert(SVMXI_GetMessage("MSG005"));
			CloseWindow();
			return;
			}
	    var rec3 = qr3.getArray("records");
	    PPRR_SourceLocId = rec3[0].Id;
	    PPRR_SourceLocStockable = false;
	    }
	}

    // Get open Parts Request lines
    var soql2 = "SELECT Id, SVMXC__Parts_Request__c, SVMXC__Product__c, SVMXC__Product__r.Name, SVMXC__Quantity_Required2__c, " +
    		"SVMXC__Date_Required__c, SVMXC__Quantity_Shipment_Initiated2__c, SVMXC__Quantity_Shipped2__c, SVMXC__Additional_Information__c,SVMXC__Unit_Price2__c " + 
		"FROM SVMXC__Parts_Request_Line__c WHERE SVMXC__Parts_Request__c = '" + PPRR_RequestId + "' AND " +
		"SVMXC__Line_Status__c = 'Open'"; //By Gm 18jun08 added fld : SVMXC__Unit_Price2__c 
    try {
    var qr2 = sforce.connection.query(soql2);
    } catch (e) { alert(e); }
    if (qr2.size <= 0)
	{
	alert(SVMXI_GetMessage("MSG006"));
	CloseWindow();
	return;
	}
    var reqrecs = new sforce.QueryResultIterator(qr2);

    var rownum = 0;
    var tbody = document.getElementById("list_tbody");

    SVMXI_ProcPRR_DrawHeader(tbody);

    while(reqrecs.hasNext())
	{
	var reqrec = reqrecs.next();

	var reqid = reqrec.Id;
	var prodid = reqrec.SVMXC__Product__c;
	var ReqQty = parseFloat(reqrec.SVMXC__Quantity_Required2__c);

	if (reqrec.SVMXC__Quantity_Shipment_Initiated2__c == null || isNaN(reqrec.SVMXC__Quantity_Shipment_Initiated2__c))
	    var ShipInitQty = 0;
	else
	    var ShipInitQty = parseFloat(reqrec.SVMXC__Quantity_Shipment_Initiated2__c);

	if (reqrec.SVMXC__Quantity_Shipped2__c == null || isNaN(reqrec.SVMXC__Quantity_Shipped2__c))
	    var ShipQty = 0;
	else
	    var ShipQty = parseFloat(reqrec.SVMXC__Quantity_Shipped2__c);

	var tr = makeRow(makeAttrs(rownum,tbody) );
	tr.sobject = reqrec;
	tbody.appendChild(tr);

		// Col 1. Product Name
	createTag(tr,"th",{"scope":"row"}).innerHTML =
		"<a target=_blank href=\"/" + prodid + "\">" + prodid ? reqrec.SVMXC__Product__r.Name : "Unknown" + "</a>";

		// Col 2. Requested Quantity
	createTag(tr,"td", []).innerHTML =
		"<input disabled=\"true\" type=\"text\" id=\"" + reqid + "ReqQty\" name=\"" + reqid + "ReqQty\" value=\"" + ReqQty + "\"></input>";

		// Col 3. Received Quantity
	createTag(tr,"td", []).innerHTML =
		"<input type=\"text\" id=\"" + reqid + "RcvQty\" name=\"" + reqid + "RcvQty\" value=\"" + ReqQty + "\" onchange=\"SVMXI_ProcPRR_ValidateQuantity(this);\"></input>";

		// Col 4. Checkbox
	createTag(tr,"td",{'class':'actionColumn','align':'center'}).innerHTML =
		"<input checked=\"true\" disabled=\"true\" type=\"checkbox\" id=\"" + reqid + "Checkbox\" name=\"ids\" value=\"" + reqid + "\" >&nbsp;";

		// Col 5. Status Message
	createTag(tr,"td", []).innerHTML =
		"<div id=\"" + reqid + "ErrMsg\" name=\"" + reqid + "ErrMsg\"></div>";

		// Col 6. Shipment Initiated Quantity
	createTag(tr,"td", []).innerHTML =
		"<input type=\"hidden\" disabled=\"true\" id=\"" + reqid + "ShipInitQty\" name=\"" + reqid + "ShipInitQty\" value=\"" + ShipInitQty + "\"></input>";

		// Col 7. Shipped Quantity
	createTag(tr,"td", []).innerHTML =
		"<input type=\"hidden\" disabled=\"true\" id=\"" + reqid + "ShipQty\" name=\"" + reqid + "ShipQty\" value=\"" + ShipQty + "\"></input>";

	rownum += 1;
	}
    document.getElementById('waitmsg').style.visibility = 'hidden'; 
    document.getElementById('waitmsg').style.height = 0; 
}
/*=====================================================================================*/
function SVMXI_ProcPRR_ValidateQuantity(ctrl)
{
    var reqid = ctrl.name.substring(0,18);
    var reqqtyname = reqid + "ReqQty";
    var reqqty = document.getElementById(reqqtyname);

    if(parseFloat(ctrl.value) >= parseFloat(reqqty.value))
    	{
	document.getElementById(reqid+"Checkbox").checked = true;
	document.getElementById(reqid+"Checkbox").disabled = true;
	}
    else
    	{
	document.getElementById(reqid+"Checkbox").checked = false;
	document.getElementById(reqid+"Checkbox").disabled = false;
	}
}
/*=====================================================================================*/
function SVMXI_ProcPRR_DrawHeader(ta)
{
    var tr = makeRow({'class':'headerRow'});
    ta.appendChild(tr);

    createTag(tr,"th",{'scope':'col'}).innerHTML =
	    "<a href=\"#\" title=\"\">" + SVMXI_GetMessage("LAB005") + "</a>";

    createTag(tr,"th",{'scope':'col','align':'right'}).innerHTML =
	    "<a href=\"#\" title=\"\">" + SVMXI_GetMessage("LAB006") + "</a>";

    createTag(tr,"th",{'scope':'col','align':'right'}).innerHTML =
	    "<a href=\"#\" title=\"\">" + SVMXI_GetMessage("LAB007") + "</a>";

    createTag(tr,"th",{'scope':'col'}).innerHTML =
	    "<a href=\"#\" title=\"\">" + SVMXI_GetMessage("LAB008") + "</a>";
}
/*=====================================================================================*/
function SVMXI_ProcPRR_ValidateAndProcess()
{
    var form = document.forms['procprreceipt'];

    var sobjectList = new Array();
    for (i = 0; i < form.elements.length; i++)
	{
	if (form.elements[i].name == 'ids')
	    {
	    var pn = form.elements[i].parentNode;
	    var ppn = form.elements[i].parentNode.parentNode;
	    if (ppn.sobject)
		{
		sobjectList.push(ppn.sobject);
		}
	    }
	}

    var valid_receipts = new Array();
    var invalid = false;
    var skipcnt = 0;
    for (var k = 0; k < sobjectList.length; k++)
    	{
	var rec_invalid = false;
	var rec = sobjectList[k];
	var ShipQty = parseFloat(document.getElementById(rec.Id+"ShipQty").value);
	var ShipInitQty = parseFloat(document.getElementById(rec.Id+"ShipInitQty").value);
	var RcvQty = parseFloat(document.getElementById(rec.Id+"RcvQty").value);
	var ReqQty = parseFloat(document.getElementById(rec.Id+"ReqQty").value);
	var checked = document.getElementById(rec.Id+"Checkbox").checked;
	//alert("checked=" + checked + ", ReqQty=" + ReqQty + ", RcvQty=" + RcvQty + ", ShipInitQty=" + ShipInitQty + ", ShipQty=" + ShipQty);
	var ErrMsg = "";
	if (isNaN(RcvQty) || RcvQty < 0)
	    {
	    ErrMsg = SVMXI_GetMessage("MSG007");
	    invalid = true;
	    rec_invalid = true;
	    }
	else if (!checked && RcvQty == 0)
	    {
	    skipcnt += 1;
	    }
	else if(RcvQty > ReqQty)
	    {
	    ErrMsg = SVMXI_GetMessage("MSG008");
	    invalid = true;
	    rec_invalid = true;
	    }
	else if (checked && RcvQty < ReqQty && ShipQty > 0)
	    {
	    ErrMsg = SVMXI_GetMessage("MSG009");
	    invalid = true;
	    rec_invalid = true;
	    }
	else if (checked && RcvQty < ReqQty && ShipInitQty > 0)
	    {
	    ErrMsg = SVMXI_GetMessage("MSG010");
	    invalid = true;
	    rec_invalid = true;
	    }
	if (rec_invalid)
	    {
	    document.getElementById(rec.Id+"ErrMsg").style.border = "#FF0000 2px solid";
	    document.getElementById(rec.Id+"ErrMsg").innerHTML = ErrMsg;
	    }
	else
	    {
	    document.getElementById(rec.Id+"ErrMsg").style.border = "0";
	    document.getElementById(rec.Id+"ErrMsg").innerHTML = "";
	    }
	if (!rec_invalid && RcvQty > 0)
	    valid_receipts.push(rec);
	}
    if(invalid) { return; }

    if(skipcnt == sobjectList.length)
    	{
	alert(SVMXI_GetMessage("MSG011"));
	return;
	}

    PPRR_Receipts = valid_receipts;		// Process only records with a valid receipt quantity
    SVMXI_ProcPRR_ProcessReceipts();
}
/*=====================================================================================*/
function SVMXI_ProcPRR_ProcessReceipts()
{
    var ProdArray = SVMXI_MultiDimensionalArray(PPRR_Receipts.length, 6);
    for (var i = 0; i < PPRR_Receipts.length; i++)
	{
	var RcvQty = parseFloat(document.getElementById(PPRR_Receipts[i].Id+"RcvQty").value);
	ProdArray[i][0] = PPRR_Receipts[i].SVMXC__Product__c;
	ProdArray[i][1] = RcvQty;
	ProdArray[i][2] = PPRR_SiteId;
	ProdArray[i][3] = "In Transit";
	if (PPRR_SourceLocStockable == true)
	    ProdArray[i][2] = PPRR_SiteId;
	else
	    ProdArray[i][2] = PPRR_SourceLocId;
	ProdArray[i][5] = "Available";
	}
    // Call serial selection utility. It will capture serial numbers where applicable and
    // call back the routine below with the selected serials
    window.blur();
    var returnVal = SVMXI_DoSerialSelection(ProdArray, "Parts Receipt", PPRR_PRNumber, PPRR_UserId, PPRR_SessionId);
}
/*=====================================================================================*/
function SVMXI_Callback_ProcessPRReceipts(SerialSelectStatus, SerialCount, SerialArray)
{
    window.focus();
    if (!SerialSelectStatus)
    	{
	CloseWindow();
	return false;
	}

    var totq = 0;
    var SerialSaveArray = SVMXI_MultiDimensionalArray(SerialCount, 4);

    for (var j = 0; j < PPRR_Receipts.length; j++)
    	{
	var ProdId = PPRR_Receipts[j].SVMXC__Product__c;
	var RcvQty = parseFloat(document.getElementById(PPRR_Receipts[j].Id+"RcvQty").value);

	// Decrease In Transit stock in the target location
	if (PPRR_SourceLocStockable == true)
	    var FromStockArr = SVMXI_DoStockUpdate(ProdId, PPRR_SiteId, "In Transit", RcvQty, "Parts Receipt", PPRR_PRNumber, "Decrease", PPRR_RequestId, PPRR_Receipts[j].Id, PPRR_UserId);
	else
	    var FromStockArr = SVMXI_DoStockUpdate(ProdId, PPRR_SourceLocId, "Purchased", RcvQty, "Parts Receipt", PPRR_PRNumber, "Increase", PPRR_RequestId, PPRR_Receipts[j].Id, PPRR_UserId);
	if (!FromStockArr[0])
	    {
	    alert(SVMXI_GetMessage("MSG013") + "\n" + FromStockArr[4]);
	    CloseWindow();
	    return false;
	    }
	var FromProdStockId = FromStockArr[1];

	// Increase Available stock in the target location
	var ToStockArr = SVMXI_DoStockUpdate(ProdId, PPRR_SiteId, "Available", RcvQty, "Parts Receipt", PPRR_PRNumber, "Increase", PPRR_RequestId, PPRR_Receipts[j].Id, PPRR_UserId);
	if (!ToStockArr[0])
	    {
	    alert(SVMXI_GetMessage("MSG013") + "\n" + FromStockArr[4]);
	    CloseWindow();
	    return false;
	    }
	var ToProdStockId = FromStockArr[1];		// DO NOT CHANGE THIS. This is a Javascript bug.
							// For some mysterious reason, the product-stock-id
							// for destination location is set in FromStockArr[1]
							// instead of ToStockArr[1] even though the code
							// explicitly uses ToStockArr. Don't lose sleep over this.
							// HS 04/28/2008

	// Build serial number array for the received quantity
	if (SerialCount > 0)
	    {
	    for (var k = 0; k < SerialCount; k++)
		{
		if (SerialArray[k][0] == ProdId)
		    {
		    SerialSaveArray[totq][0] = ProdId;
		    SerialSaveArray[totq][1] = FromProdStockId;
		    SerialSaveArray[totq][2] = ToProdStockId;
		    SerialSaveArray[totq][3] = SerialArray[k][7];
		    totq++;
		    }
		}
	    }
	}

    // Update serial numbers for the received quantity
    if (SerialCount > 0) { var returnVal = SVMXI_DoSerialSave(SerialSaveArray, PPRR_UserId); }

    // Build arrays for updating Parts Request lines as well as creating new request lines if applicable
    var newcnt = 0;
    var curdate = new Date();
    var reqlinesupd = new Array();
    var reqlinesins = new Array();
    for (var m = 0; m < PPRR_Receipts.length; m++)
    	{
	var reqlineupd = new sforce.SObject("SVMXC__Parts_Request_Line__c");
	var rec = PPRR_Receipts[m];
	var ShipQty = parseFloat(document.getElementById(rec.Id+"ShipQty").value);
	var ShipInitQty = parseFloat(document.getElementById(rec.Id+"ShipInitQty").value);
	var RcvQty = parseFloat(document.getElementById(rec.Id+"RcvQty").value);
	var ReqQty = parseFloat(document.getElementById(rec.Id+"ReqQty").value);
	var checked = document.getElementById(rec.Id+"Checkbox").checked;

	reqlineupd.Id = rec.Id;
	reqlineupd.SVMXC__Quantity_Received2__c = RcvQty;
	reqlineupd.SVMXC__Date_Received__c = SVMXI_GetCurrentTime();

	reqlineupd.SVMXC__Posted_To_Inventory__c = true;
	if (checked && RcvQty == 0)
	    {
	    reqlineupd.SVMXC__Line_Status__c = "Canceled";
	    reqlineupd.SVMXC__Canceled_On__c = SVMXI_GetCurrentTime();
	    reqlineupd.SVMXC__Canceled_By__c = PPRR_UserId;
	    }
	else if (RcvQty > 0)
	    {
	    reqlineupd.SVMXC__Line_Status__c = "Completed";
	    reqlineupd.SVMXC__Closed_On__c = SVMXI_GetCurrentTime();
	    reqlineupd.SVMXC__Closed_By__c = PPRR_UserId;
	    }
	reqlinesupd.push(reqlineupd);

	//alert("Prod: " + PPRR_Receipts[m].SVMXC__Product__r.Name + ", checked=" + checked + ", Rcv: " + RcvQty + ", Req: " + ReqQty);

	// Part is partially received and user does not want to close the request yet. Create a new line for remaining qty.
	if (!checked && RcvQty < ReqQty)
	    {
	    var curdate = new Date();
	    var datestr = ConvertDateToSFDCDate(curdate);
	    var sfdcdatestr = rec.SVMXC__Date_Required__c;
	    var sfdcdate = new Date(sfdcdatestr.substring(0,4), parseFloat(sfdcdatestr.substring(5,7))-1, sfdcdatestr.substring(8));

	    var reqlineins = new sforce.SObject("SVMXC__Parts_Request_Line__c");
	    reqlineins.SVMXC__Parts_Request__c = rec.SVMXC__Parts_Request__c;
	    reqlineins.SVMXC__Product__c = rec.SVMXC__Product__c;
	    reqlineins.SVMXC__Quantity_Required2__c = ReqQty - RcvQty;
	    if (sfdcdate > curdate)
		reqlineins.SVMXC__Date_Required__c = sfdcdatestr;
	    else
		reqlineins.SVMXC__Date_Required__c = datestr;
	    reqlineins.SVMXC__Line_Status__c = "Open";
	    reqlineins.SVMXC__Posted_To_Inventory__c = false;
	    reqlineins.SVMXC__Additional_Information__c = rec.SVMXC__Additional_Information__c;
	    reqlineins.SVMXC__Unit_Price2__c = rec.SVMXC__Unit_Price2__c; //BY GM 18Jun08
	    reqlineins.SVMXC__Use_Price_From_Pricebook__c = "False"; //BY GM 18Jun08
	    reqlinesins.push(reqlineins);
	    newcnt += 1;
	    }
	}

    // Update receipt information on parts requests
    try {
	sforce.connection.update(reqlinesupd);
	}
    catch (e) {
	alert(SVMXI_GetMessage("MSG001") + "\n" + e);
	CloseWindow();
	return false;
    	}

    // Create new parts requests if applicable
    if (newcnt > 0)
    	{
	try {
	    var retx = sforce.connection.create(reqlinesins);
	    }
	catch (e) {
	    alert(SVMXI_GetMessage("MSG001") + "\n" + e);
	    CloseWindow();
	    return false;
	    }
	}
    else
    	{
	// To update Parts Request header status...
	// check if all lines have been completed or canceled by comparing counts
	var soql2 = "SELECT Count() FROM SVMXC__Parts_Request_Line__c WHERE SVMXC__Parts_Request__c = '" + PPRR_RequestId + "'";
	qr2 = sforce.connection.query(soql2);

	var soql3 = "SELECT Count() FROM SVMXC__Parts_Request_Line__c WHERE SVMXC__Parts_Request__c = '" + PPRR_RequestId + "' AND SVMXC__Line_Status__c = 'Completed'";
	qr3 = sforce.connection.query(soql3);

	var soql4 = "SELECT Count() FROM SVMXC__Parts_Request_Line__c WHERE SVMXC__Parts_Request__c = '" + PPRR_RequestId + "' AND SVMXC__Line_Status__c = 'Canceled'";
	qr4 = sforce.connection.query(soql4);

	var reqhdr = new sforce.SObject("SVMXC__Parts_Request__c");
	reqhdr.Id = PPRR_RequestId;

	var hdrupd = false;
	if (qr2.size == qr3.size)		// All lines completed
	    {
	    reqhdr.SVMXC__Status__c = "Completed";
	    reqhdr.SVMXC__Closed_On__c = SVMXI_GetCurrentTime();
	    reqhdr.SVMXC__Closed_By__c = PPRR_UserId;
	    hdrupd = true;
	    }
	else if (qr2.size == qr4.size)	// All lines Canceled
	    {
	    reqhdr.SVMXC__Status__c = "Canceled";
	    reqhdr.SVMXC__Canceled_On__c = SVMXI_GetCurrentTime();
	    reqhdr.SVMXC__Canceled_By__c = PPRR_UserId;
	    hdrupd = true;
	    }
	if (hdrupd)
	    {
	    try {
		sforce.connection.update([reqhdr]);
		}
	    catch (e) {
		alert(SVMXI_GetMessage("MSG001") + "\n" + e);
		CloseWindow();
		return false;
		}
	    }
	}
    alert(SVMXI_GetMessage("MSG012"));
    window.opener.location.reload(true);
    CloseWindow();
}
/*=====================================================================================*/
function SVMXI_ProcSVO_ShowRequestRecords(servId, svonum, uId, lineId, sessId)
{
    SVMXI_InitMessageList("WORDSC9"); 
    SVMXI_SetLabels("ProcessReceiptsForSVO");  


    PRSVO_SVOId = servId;
    PRSVO_UserId = uId;
    PRSVO_SVOLineId = lineId;
    PRSVO_SVONumber = svonum;
    PRSVO_SessionId = sessId;

    // Get SVO header info
    var soql1 = "SELECT SVMXC__Order_Status__c FROM SVMXC__Service_Order__c WHERE Id = '" + PRSVO_SVOId + "'";
    var qr1 = sforce.connection.query(soql1);
    if (qr1.size <= 0)
	{
	 alert(SVMXI_GetMessage("MSG002"));
	CloseWindow();
	return;
	}
    var rec1 = qr1.getArray("records");
    if (rec1[0].SVMXC__Order_Status__c == "Closed")
    	{
	alert(SVMXI_GetMessage("MSG008"));
	CloseWindow();
	return;
	}
    if (rec1[0].SVMXC__Order_Status__c == "Canceled")
	{
	alert(SVMXI_GetMessage("MSG009"));
	CloseWindow();
	return;
	}

    // Get Salesforce internal Record Type ID for Service order "Request/Receipt"
    var soql = "SELECT Id FROM RecordType WHERE SobjectType = 'SVMXC__Service_Order_Line__c' AND Name = 'Request/Receipt'"
    var queryResult = sforce.connection.query(soql); 
    var rtrecords = queryResult.getArray("records");
    if (rtrecords.length == 0)
	{        
	alert(SVMXI_GetMessage("MSG010"));
        window.close();
        return;
	}
    PRSVO_ReqRecordTypeId = rtrecords[0].Id;

    // Get open SVO lines
    var soql2 = "SELECT Id, SVMXC__Product__c, SVMXC__Product__r.Name, SVMXC__Requested_Quantity2__c, " +
    		"SVMXC__Date_Requested__c, SVMXC__Quantity_Shipment_Initiated2__c, SVMXC__Quantity_Shipped2__c, " +
    		"SVMXC__Requested_Location__c, "+
            "SVMXC__Requested_Zip__c, SVMXC__Requested_Street__c,SVMXC__Requested_State__c, SVMXC__Requested_Country__c, SVMXC__Requested_City__c, "+
			"SVMXC__Received_Zip__c,  SVMXC__Received_Street__c, SVMXC__Received_State__c,  SVMXC__Received_Country__c, SVMXC__Received_City__c  " +
		"FROM SVMXC__Service_Order_Line__c WHERE SVMXC__Service_Order__c = '" + PRSVO_SVOId + "' AND " +
		"SVMXC__Line_Status__c = 'Open' AND RecordTypeId = '" + PRSVO_ReqRecordTypeId + "'";
    if (PRSVO_SVOLineId) { soql2 = soql2 + " AND Id = '" + PRSVO_SVOLineId + "'" } ;
    var qr2 = sforce.connection.query(soql2);
    if (qr2.size <= 0)
	{
	if (PRSVO_SVOLineId)
		{	    
		alert(SVMXI_GetMessage("MSG011"));
		}
	else
	    {	
		alert(SVMXI_GetMessage("MSG012"));
		}
	CloseWindow();
	return;
	}
    var reqrecs = new sforce.QueryResultIterator(qr2);

    var rownum = 0;
    var tbody = document.getElementById("list_tbody");

    SVMXI_ProcSVO_DrawHeader(tbody);

    var noloc = 0;
    while(reqrecs.hasNext())
	{
	var reqrec = reqrecs.next();

	if (!reqrec.SVMXC__Requested_Location__c)
	    {
	    noloc += 1;
	    continue;
	    }

	var reqid = reqrec.Id;
	var prodid = reqrec.SVMXC__Product__c;
	var ReqQty = parseFloat(reqrec.SVMXC__Requested_Quantity2__c);

	if (reqrec.SVMXC__Quantity_Shipment_Initiated2__c == null || isNaN(reqrec.SVMXC__Quantity_Shipment_Initiated2__c))
	    var ShipInitQty = 0;
	else
	    var ShipInitQty = parseFloat(reqrec.SVMXC__Quantity_Shipment_Initiated2__c);

	if (reqrec.SVMXC__Quantity_Shipped2__c == null || isNaN(reqrec.SVMXC__Quantity_Shipped2__c))
	    var ShipQty = 0;
	else
	    var ShipQty = parseFloat(reqrec.SVMXC__Quantity_Shipped2__c);

	var tr = makeRow(makeAttrs(rownum,tbody) );
	tr.sobject = reqrec;
	tbody.appendChild(tr);

		// Col 1. Product Name
	createTag(tr,"th",{"scope":"row"}).innerHTML =
		"<a target=_blank href=\"/" + prodid + "\">" + prodid ? reqrec.SVMXC__Product__r.Name : "Unknown" + "</a>";

		// Col 2. Requested Quantity
	createTag(tr,"td", []).innerHTML =
		"<input disabled=\"true\" type=\"text\" id=\"" + reqid + "ReqQty\" name=\"" + reqid + "ReqQty\" value=\"" + ReqQty + "\"></input>";

		// Col 3. Received Quantity
	createTag(tr,"td", []).innerHTML =
		"<input type=\"text\" id=\"" + reqid + "RcvQty\" name=\"" + reqid + "RcvQty\" value=\"" + ReqQty + "\" onchange=\"SVMXI_ProcSVO_ValidateQuantity(this);\"></input>";

		// Col 4. Checkbox
	createTag(tr,"td",{'class':'actionColumn','align':'center'}).innerHTML =
		"<input checked=\"true\" disabled=\"true\" type=\"checkbox\" id=\"" + reqid + "Checkbox\" name=\"ids\" value=\"" + reqid + "\" >&nbsp;";

		// Col 5. Status Message
	createTag(tr,"td", []).innerHTML =
		"<div id=\"" + reqid + "ErrMsg\" name=\"" + reqid + "ErrMsg\"></div>";

		// Col 6. Shipment Initiated Quantity
	createTag(tr,"td", []).innerHTML =
		"<input type=\"hidden\" disabled=\"true\" id=\"" + reqid + "ShipInitQty\" name=\"" + reqid + "ShipInitQty\" value=\"" + ShipInitQty + "\"></input>";

		// Col 7. Shipped Quantity
	createTag(tr,"td", []).innerHTML =
		"<input type=\"hidden\" disabled=\"true\" id=\"" + reqid + "ShipQty\" name=\"" + reqid + "ShipQty\" value=\"" + ShipQty + "\"></input>";

	rownum += 1;
	}

    if (noloc > 0)
    	{
	if (rownum > 0)			    
	    alert(SVMXI_GetMessage("MSG013"));
	else
	    {
	    alert(SVMXI_GetMessage("MSG014"));
	    CloseWindow();
	    return;
	    }
	}
    document.getElementById('waitmsg').style.visibility = 'hidden'; 
    document.getElementById('waitmsg').style.height = 0; 
}

/*=====================================================================================*/
function SVMXI_ProcSVO_ValidateQuantity(ctrl)
{
    var reqid = ctrl.name.substring(0,18);
    var reqqtyname = reqid + "ReqQty";
    var reqqty = document.getElementById(reqqtyname);

    if(parseFloat(ctrl.value) >= parseFloat(reqqty.value))
    	{
	document.getElementById(reqid+"Checkbox").checked = true;
	document.getElementById(reqid+"Checkbox").disabled = true;
	}
    else
    	{
	document.getElementById(reqid+"Checkbox").checked = false;
	document.getElementById(reqid+"Checkbox").disabled = false;
	}
}
/*=====================================================================================*/
function SVMXI_ProcSVO_DrawHeader(ta)
{
    var tr = makeRow({'class':'headerRow'});
    ta.appendChild(tr);

    createTag(tr,"th",{'scope':'col'}).innerHTML =
	    "<a href=\"#\" title=\"\">"+SVMXI_GetMessage("LAB005")+"</a>";

    createTag(tr,"th",{'scope':'col','align':'right'}).innerHTML =
	    "<a href=\"#\" title=\"\">"+SVMXI_GetMessage("LAB006")+"</a>";

    createTag(tr,"th",{'scope':'col','align':'right'}).innerHTML =
	    "<a href=\"#\" title=\"\"> "+SVMXI_GetMessage("LAB007")+"  </a>";

    createTag(tr,"th",{'scope':'col'}).innerHTML =
	    "<a href=\"#\" title=\"\">"+SVMXI_GetMessage("LAB008")+"</a>";
}
/*=====================================================================================*/
function SVMXI_ProcSVO_ValidateAndProcess()
{
    var form = document.forms['ProcessReceiptsForSVO'];

    var sobjectList = new Array();
    for (i = 0; i < form.elements.length; i++)
	{
	if (form.elements[i].name == 'ids')
	    {
	    var pn = form.elements[i].parentNode;
	    var ppn = form.elements[i].parentNode.parentNode;
	    if (ppn.sobject)
		{
		sobjectList.push(ppn.sobject);
		}
	    }
	}

    var valid_receipts = new Array();
    var invalid = false;
    var skipcnt = 0;
    invalid = false;
    for (var k = 0; k < sobjectList.length; k++)
    	{
	var rec_invalid = false;
	var rec = sobjectList[k];
	var ShipQty = parseFloat(document.getElementById(rec.Id+"ShipQty").value);
	var ShipInitQty = parseFloat(document.getElementById(rec.Id+"ShipInitQty").value);
	var RcvQty = parseFloat(document.getElementById(rec.Id+"RcvQty").value);
	var ReqQty = parseFloat(document.getElementById(rec.Id+"ReqQty").value);
	var checked = document.getElementById(rec.Id+"Checkbox").checked;
	//alert("checked=" + checked + ", ReqQty=" + ReqQty + ", RcvQty=" + RcvQty + ", ShipInitQty=" + ShipInitQty + ", ShipQty=" + ShipQty);
	var ErrMsg = "";
	if (isNaN(RcvQty) || RcvQty < 0)
	    {
	    ErrMsg = SVMXI_GetMessage("MSG003"); 
		
	    invalid = true;
	    rec_invalid = true;
	    }
	else if (!checked && RcvQty == 0)
	    {
	    skipcnt += 1;
	    }
	else if(RcvQty > ReqQty)
	    {
	    ErrMsg =  SVMXI_GetMessage("MSG004");
	    invalid = true;
	    rec_invalid = true;
	    }
	else if (checked && RcvQty < ReqQty && ShipQty > 0)
	    {
	    ErrMsg = SVMXI_GetMessage("MSG005");
	    invalid = true;
	    rec_invalid = true;
	    }
	else if (checked && RcvQty < ReqQty && ShipInitQty > 0)
	    {
	    ErrMsg = SVMXI_GetMessage("MSG006"); 
	    invalid = true;
	    rec_invalid = true;
	    }
	if (rec_invalid)
	    {
	    document.getElementById(rec.Id+"ErrMsg").style.border = "#FF0000 2px solid";
	    document.getElementById(rec.Id+"ErrMsg").innerHTML = ErrMsg;
	    }
	else
	    {
	    document.getElementById(rec.Id+"ErrMsg").style.border = "0";
	    document.getElementById(rec.Id+"ErrMsg").innerHTML = "";
	    }
	if (!rec_invalid && RcvQty > 0)
	    valid_receipts.push(rec);
	}

    if(invalid) { return; }

    if(skipcnt == sobjectList.length)
    	{	
	alert(SVMXI_GetMessage("MSG007"));
	return;
	}

    PRSVO_Receipts = valid_receipts;
    SVMXI_ProcSVO_ProcessReceipts();
}
/*=====================================================================================*/
function SVMXI_ProcSVO_ProcessReceipts()
{
    var ProdArray = SVMXI_MultiDimensionalArray(PRSVO_Receipts.length, 6);
    for (var i = 0; i < PRSVO_Receipts.length; i++)
	{
	var RcvQty = parseFloat(document.getElementById(PRSVO_Receipts[i].Id+"RcvQty").value);
	ProdArray[i][0] = PRSVO_Receipts[i].SVMXC__Product__c;
	ProdArray[i][1] = RcvQty;
	ProdArray[i][2] = PRSVO_Receipts[i].SVMXC__Requested_Location__c;
	ProdArray[i][3] = "In Transit";
	ProdArray[i][4] = PRSVO_Receipts[i].SVMXC__Requested_Location__c;
	ProdArray[i][5] = "Available";
	}
    // Call serial selection utility. It will capture serial numbers where applicable and
    // call back the routine below with the selected serials
    window.blur();
    var returnVal = SVMXI_DoSerialSelection(ProdArray, "SVO Receipt", PRSVO_SVONumber, PRSVO_UserId, PRSVO_SessionId);
}
/*=====================================================================================*/
function SVMXI_Callback_ProcessSVOReceipts(SerialSelectStatus, SerialCount, SerialArray)
{
    window.focus();
    if (!SerialSelectStatus)
    	{
	CloseWindow();
	return false;
	}
    var totq = 0;
    var SerialSaveArray = SVMXI_MultiDimensionalArray(SerialCount, 4);

    for (var j = 0; j < PRSVO_Receipts.length; j++)
    	{
	var ProdId = PRSVO_Receipts[j].SVMXC__Product__c;
	var RcvQty = parseFloat(document.getElementById(PRSVO_Receipts[j].Id+"RcvQty").value);

	// Decrease In Transit stock in the target location
	var FromStockArr = SVMXI_DoStockUpdate(ProdId, PRSVO_Receipts[j].SVMXC__Requested_Location__c, "In Transit", RcvQty, "SVO Receipt", PRSVO_SVONumber, "Decrease", PRSVO_SVOId, PRSVO_Receipts[j].Id, PRSVO_UserId);
	if (!FromStockArr[0])
	    {	
	    alert(SVMXI_GetMessage("MSG015")+"\n" + FromStockArr[4]);
	    CloseWindow();
	    return false;
	    }
	var FromProdStockId = FromStockArr[1];

	// Increase Available stock in the target location
	var ToStockArr = SVMXI_DoStockUpdate(ProdId, PRSVO_Receipts[j].SVMXC__Requested_Location__c, "Available", RcvQty, "SVO Receipt", PRSVO_SVONumber, "Increase", PRSVO_SVOId, PRSVO_Receipts[j].Id, PRSVO_UserId);
	if (!ToStockArr[0])
	    {	   
	    alert(SVMXI_GetMessage("MSG015")+"\n" + FromStockArr[4]);
	    CloseWindow();
	    return false;
	    }
	var ToProdStockId = FromStockArr[1];

	// Build serial number array for the received quantity
	if (SerialCount > 0)
	    {
	    for (var k = 0; k < SerialCount; k++)
		{
		if (SerialArray[k][0] == ProdId && SerialArray[k][4] == PRSVO_Receipts[j].SVMXC__Requested_Location__c)
		    {
		    SerialSaveArray[totq][0] = ProdId;
		    SerialSaveArray[totq][1] = FromProdStockId;
		    SerialSaveArray[totq][2] = ToProdStockId;
		    SerialSaveArray[totq][3] = SerialArray[k][7];
		    totq++;
		    }
		}
	    }
	}

    // Update serial numbers for the received quantity
    if (SerialCount > 0) { var returnVal = SVMXI_DoSerialSave(SerialSaveArray, PRSVO_UserId); }

    var newcnt = 0;
    var curdate = new Date();
    var svolinesupd = new Array();
    var svolinesins = new Array();
    for (var m = 0; m < PRSVO_Receipts.length; m++)
    	{
			var svolineupd = new sforce.SObject("SVMXC__Service_Order_Line__c");
			var rec = PRSVO_Receipts[m];
			var ShipQty = parseFloat(document.getElementById(rec.Id+"ShipQty").value);
			var ShipInitQty = parseFloat(document.getElementById(rec.Id+"ShipInitQty").value);
			var RcvQty = parseFloat(document.getElementById(rec.Id+"RcvQty").value);
			var ReqQty = parseFloat(document.getElementById(rec.Id+"ReqQty").value);
			var checked = document.getElementById(rec.Id+"Checkbox").checked;

			svolineupd.Id = rec.Id;
			svolineupd.SVMXC__Received_Quantity2__c = RcvQty;
			svolineupd.SVMXC__Date_Received__c = SVMXI_GetCurrentTime();

			svolineupd.SVMXC__Posted_To_Inventory__c = true;
			if (checked && RcvQty == 0)
				{
				svolineupd.SVMXC__Line_Status__c = "Canceled";
				svolineupd.SVMXC__Canceled_On__c = SVMXI_GetCurrentTime();
				svolineupd.SVMXC__Canceled_By__c = PRSVO_UserId;
				}
			else if (RcvQty > 0)
				{
				svolineupd.SVMXC__Line_Status__c = "Completed";
				svolineupd.SVMXC__Closed_On__c = SVMXI_GetCurrentTime();
				svolineupd.SVMXC__Closed_By__c = PRSVO_UserId;
				}
			svolinesupd.push(svolineupd);

			// Part is partially received and user does not want to close the request yet. Create a new line for remaining qty.
		
			if (!checked && RcvQty < ReqQty)
				{
				var svolineins = new sforce.SObject("SVMXC__Service_Order_Line__c");
				svolineins.RecordTypeId = PRSVO_ReqRecordTypeId;
				svolineins.SVMXC__Line_Type__c = "Parts";
				svolineins.SVMXC__Service_Order__c = PRSVO_SVOId;
				svolineins.SVMXC__Product__c = rec.SVMXC__Product__c;
				svolineins.SVMXC__Requested_Quantity2__c = ReqQty - RcvQty;
				svolineins.SVMXC__Date_Requested__c = rec.SVMXC__Date_Requested__c;
				svolineins.SVMXC__Line_Status__c = "Open";
				svolineins.SVMXC__Posted_To_Inventory__c = false;
				//svolineins.SVMXC__Requested_Location__c = rec.SVMXC__Requested_Location__c ;  
				svolineins.SVMXC__Requested_Location__c     = rec.SVMXC__Requested_From__c;			 // Added  on 6-Sep-08  by Sd		
				svolineins.SVMXC__Requested_Zip__c    	= rec.SVMXC__Requested_Zip__c; 
				svolineins.SVMXC__Requested_Street__c 	= rec.SVMXC__Requested_Street__c; ;
				svolineins.SVMXC__Requested_State__c 	= rec.SVMXC__Requested_State__c;
				svolineins.SVMXC__Requested_Country__c 	= rec.SVMXC__Requested_Country__c; 
				svolineins.SVMXC__Requested_City__c 	= rec.SVMXC__Requested_City__c; 
				svolineins.SVMXC__Received_Zip__c 		= rec.SVMXC__Received_Zip__c; 
				svolineins.SVMXC__Received_Street__c 	= rec.SVMXC__Received_Street__c; 
				svolineins.SVMXC__Received_State__c 	= rec.SVMXC__Received_State__c; 
				svolineins.SVMXC__Received_Country__c 	= rec.SVMXC__Received_Country__c; 
				svolineins.SVMXC__Received_City__c 		= rec.SVMXC__Received_City__c;
				
				svolinesins.push(svolineins);
				newcnt += 1;
				}
	}

    try {
	sforce.connection.update(svolinesupd);
	}
    catch (e) {	
	alert(SVMXI_GetMessage("MSG016")+"\n" + e);
	CloseWindow();
	return false;
    	}

    if (newcnt > 0)
    	{
	try {
	    sforce.connection.create(svolinesins);
	    }
	catch (e) {	   
	    alert(SVMXI_GetMessage("MSG017")+"\n" + e);
	    CloseWindow();
	    return false;
	    }
	}   
    alert(SVMXI_GetMessage("MSG018"));				
    window.opener.location.reload(true);
    CloseWindow();
}
/*=====================================================================================*/
function SVMXI_ProcShp_ShowShipmentRecords(shpId, shpNum, uId, sessId)
{
    SVMXI_InitMessageList("PORDSC8"); 
    SVMXI_SetLabels("ProcessShipments");  
	
    PRSHP_ShipmentOrderId = shpId;
    PRSHP_UserId = uId;
    PRSHP_ShipmentNumber = shpNum;
    PRSHP_SessionId = sessId;

    // Get Parts Request header info
    var soql1 = "SELECT SVMXC__Order_Status__c, SVMXC__Source_Location__c, SVMXC__Destination_Location__c, " +
    		"SVMXC__Destination_Location__r.SVMXC__Stocking_Location__c " +
    		"FROM SVMXC__RMA_Shipment_Order__c WHERE Id = '" + PRSHP_ShipmentOrderId + "'";
    var qr1 = sforce.connection.query(soql1);
    if (qr1.size <= 0)
	{	
	alert(SVMXI_GetMessage("MSG002"));
	CloseWindow();
	return;
	}
    var rec1 = qr1.getArray("records");
    if (rec1[0].SVMXC__Order_Status__c == "Closed")
    	{	
	alert(SVMXI_GetMessage("MSG003"));
	CloseWindow();
	return;
	}
    if (rec1[0].SVMXC__Order_Status__c == "Canceled")
    	{	
	alert(SVMXI_GetMessage("MSG004"));
	CloseWindow();
	return;
	}
    if (!rec1[0].SVMXC__Source_Location__c)
    	{	
	alert(SVMXI_GetMessage("MSG005"));
	CloseWindow();
	return;
	}
    // Not needed anymore. Destination location is optional in the shipment page layout
    // HS 04/28/2008
    //if (!rec1[0].SVMXC__Destination_Location__c)
    //	{
//		alert(SVMXI_GetMessage("MSG006"));
//		CloseWindow();
//		return;
//	}
    PRSHP_SourceLocId = rec1[0].SVMXC__Source_Location__c;
    PRSHP_DestLocId = rec1[0].SVMXC__Destination_Location__c;
    if (rec1[0].SVMXC__Destination_Location__c)
    	PRSHP_DestLocStockable = rec1[0].SVMXC__Destination_Location__r.SVMXC__Stocking_Location__c;

    // If destination location is blank or if it is not a stocking location,
    // it is implied that the shipment is directly made to the customer 
    // and it does not have to be accounted for in inventory
    // So we choose the internal location
    if (PRSHP_DestLocId == null || PRSHP_DestLocId.length <= 0 || rec1[0].SVMXC__Destination_Location__r.SVMXC__Stocking_Location__c == "false")
    	{
	var soql3 = "SELECT Id FROM SVMXC__Site__c WHERE Name = 'Default Customer Location'";
	var qr3 = sforce.connection.query(soql3);
	if (qr3.size <= 0)
	    {
	    alert(SVMXI_GetMessage("MSG007"));
	    CloseWindow();
	    return;
	    }
	var rec3 = qr3.getArray("records");
	PRSHP_DestLocId = rec3[0].Id;
	PRSHP_DestLocStockable = false;
	}

    // Get open Shipment lines
    var soql2 = "SELECT Id, RecordTypeId, SVMXC__Product__c, SVMXC__Product__r.Name, SVMXC__Expected_Quantity2__c, " +
    		"SVMXC__Expected_Ship_Date__c, SVMXC__Line_Type__c, SVMXC__Packing_Instructions__c, " +
    		"SVMXC__Parts_Request_Line__c, SVMXC__Parts_Request_Line__r.SVMXC__Quantity_Shipped2__c, " +
		"SVMXC__Service_Order_Line__c, SVMXC__Service_Order_Line__r.SVMXC__Quantity_Shipped2__c,SVMXC__Line_Price2__c , SVMXC__Service_Engineer__c ,SVMXC__Sales_Order_Number__c " +
		"FROM SVMXC__RMA_Shipment_Line__c WHERE SVMXC__RMA_Shipment_Order__c = '" + PRSHP_ShipmentOrderId + "' AND " +
		"SVMXC__Line_Status__c = 'Open'"; //By Gm 18Jun08 Added : SVMXC__Line_Price2__c
		
	 
		
		
    try {
    var qr2 = sforce.connection.query(soql2);
    } catch (e) { alert(e); }
    if (qr2.size <= 0)
	{	
	alert(SVMXI_GetMessage("MSG008"));
	CloseWindow();
	return;
	}
    var shprecs = new sforce.QueryResultIterator(qr2);

    var rownum = 0;
    var tbody = document.getElementById("list_tbody");

    SVMXI_ProcShp_DrawHeader(tbody);

    while(shprecs.hasNext())
	{
	var shprec = shprecs.next();

	var shpid = shprec.Id;
	var prodid = shprec.SVMXC__Product__c;
	if (shprec.SVMXC__Expected_Quantity2__c == null || isNaN(shprec.SVMXC__Expected_Quantity2__c))
	    var ExpQty = 0;
	else
	    var ExpQty = parseFloat(shprec.SVMXC__Expected_Quantity2__c);

	var tr = makeRow(makeAttrs(rownum,tbody) );
	tr.sobject = shprec;
	tbody.appendChild(tr);

		// Col 1. Product Name
	createTag(tr,"th",{"scope":"row"}).innerHTML =
		"<a target=_blank href=\"/" + prodid + "\">" + prodid ? shprec.SVMXC__Product__r.Name : "Unknown" + "</a>";

		// Col 2. Requested Quantity
	createTag(tr,"td", []).innerHTML =
		"<input disabled=\"true\" type=\"text\" id=\"" + shpid + "ExpQty\" name=\"" + shpid + "ExpQty\" value=\"" + ExpQty + "\"></input>";

		// Col 3. Shipped Quantity
	createTag(tr,"td", []).innerHTML =
		"<input type=\"text\" id=\"" + shpid + "ShpQty\" name=\"" + shpid + "ShpQty\" value=\"" + ExpQty + "\" onchange=\"SVMXI_ProcShp_ValidateQuantity(this);\"></input>";

		// Col 4. Checkbox
	createTag(tr,"td",{'class':'actionColumn','align':'center'}).innerHTML =
		"<input checked=\"true\" disabled=\"true\" type=\"checkbox\" id=\"" + shpid + "Checkbox\" name=\"ids\" value=\"" + shpid + "\" >&nbsp;";

		// Col 5. Status Message
	createTag(tr,"td", []).innerHTML =
		"<div id=\"" + shpid + "ErrMsg\" name=\"" + shpid + "ErrMsg\"></div>";

	rownum += 1;
	}
    document.getElementById('waitmsg').style.visibility = 'hidden'; 
    document.getElementById('waitmsg').style.height = 0; 
}
/*=====================================================================================*/
function SVMXI_ProcShp_ValidateQuantity(ctrl)
{
    var shpid = ctrl.name.substring(0,18);
    var expqtyname = shpid + "ExpQty";
    var expqty = document.getElementById(expqtyname);

    if(parseFloat(ctrl.value) >= parseFloat(expqty.value))
    	{
	document.getElementById(shpid+"Checkbox").checked = true;
	document.getElementById(shpid+"Checkbox").disabled = true;
	}
    else
    	{
	document.getElementById(shpid+"Checkbox").checked = false;
	document.getElementById(shpid+"Checkbox").disabled = false;
	}
}
/*=====================================================================================*/
function SVMXI_ProcShp_DrawHeader(ta)
{
    var tr = makeRow({'class':'headerRow'});
    ta.appendChild(tr);

    createTag(tr,"th",{'scope':'col'}).innerHTML =
	    "<a href=\"#\" title=\"\">"+SVMXI_GetMessage("LAB005")+"</a>";

    createTag(tr,"th",{'scope':'col','align':'right'}).innerHTML =
	    "<a href=\"#\" title=\"\">"+SVMXI_GetMessage("LAB006")+"</a>";

    createTag(tr,"th",{'scope':'col','align':'right'}).innerHTML =
	    "<a href=\"#\" title=\"\">"+SVMXI_GetMessage("LAB007")+"</a>";

    createTag(tr,"th",{'scope':'col'}).innerHTML =
	    "<a href=\"#\" title=\"\">"+SVMXI_GetMessage("LAB008")+"</a>";
}
/*=====================================================================================*/
function SVMXI_ProcShp_ValidateAndProcess()
{
    var form = document.forms['ProcessShipments'];

    var sobjectList = new Array();
    for (i = 0; i < form.elements.length; i++)
	{
	if (form.elements[i].name == 'ids')
	    {
	    var pn = form.elements[i].parentNode;
	    var ppn = form.elements[i].parentNode.parentNode;
	    if (ppn.sobject)
		{
		sobjectList.push(ppn.sobject);
		}
	    }
	}

    var valid_shipments = new Array();
    var invalid = false;
    var skipcnt = 0;
    for (var k = 0; k < sobjectList.length; k++)
    	{
	var rec_invalid = false;
	var rec = sobjectList[k];
	var ExpQty = parseFloat(document.getElementById(rec.Id+"ExpQty").value);
	var ShpQty = parseFloat(document.getElementById(rec.Id+"ShpQty").value);
	var checked = document.getElementById(rec.Id+"Checkbox").checked;
	//alert("checked=" + checked + ", ExpQty=" + ExpQty + ", ShpQty=" + ShpQty);
	var ErrMsg = "";
	if (isNaN(ShpQty) || ShpQty < 0)
	    {
	    ErrMsg = SVMXI_GetMessage("MSG009");
	    invalid = true;
	    rec_invalid = true;
	    }
	else if (!checked && ShpQty == 0)
	    {
	    skipcnt += 1;
	    }
	else if(ShpQty > ExpQty)
	    {
	    ErrMsg = SVMXI_GetMessage("MSG010");
	    invalid = true;
	    rec_invalid = true;
	    }
	if (rec_invalid)
	    {
	    document.getElementById(rec.Id+"ErrMsg").style.border = "#FF0000 2px solid";
	    document.getElementById(rec.Id+"ErrMsg").innerHTML = ErrMsg;
	    }
	else
	    {
	    document.getElementById(rec.Id+"ErrMsg").style.border = "0";
	    document.getElementById(rec.Id+"ErrMsg").innerHTML = "";
	    }
	if(!rec_invalid && ShpQty > 0)
	    valid_shipments.push(rec);
	}
    if(invalid) { return; }

    if(skipcnt == sobjectList.length)
    	{	
	alert(SVMXI_GetMessage("MSG011"));
	return;
	}

    PRSHP_Shipments = valid_shipments;
    SVMXI_ProcShp_ProcessShipments();
}
/*=====================================================================================*/
function SVMXI_ProcShp_ProcessShipments()
{
    var ProdArray = SVMXI_MultiDimensionalArray(PRSHP_Shipments.length, 6);
    for (var i = 0; i < PRSHP_Shipments.length; i++)
	{
	var ShpQty = parseFloat(document.getElementById(PRSHP_Shipments[i].Id+"ShpQty").value);
	ProdArray[i][0] = PRSHP_Shipments[i].SVMXC__Product__c;
	ProdArray[i][1] = ShpQty;
	ProdArray[i][2] = PRSHP_SourceLocId;
	ProdArray[i][3] = "Available";
	ProdArray[i][4] = PRSHP_DestLocId;
	ProdArray[i][5] = "In Transit";
	}
    // Call serial selection utility. It will capture serial numbers where applicable and
    // call back the routine below with the selected serials
    window.blur();
    var returnVal = SVMXI_DoSerialSelection(ProdArray, "Shipment", PRSHP_ShipmentNumber, PRSHP_UserId, PRSHP_SessionId);
}
/*=====================================================================================*/
function SVMXI_Callback_ProcessShipment(SerialSelectStatus, SerialCount, SerialArray)
{
    window.focus();
    if (!SerialSelectStatus)
    	{
	CloseWindow();
	return false;
	}
    var totq = 0;
    var SerialSaveArray = SVMXI_MultiDimensionalArray(SerialCount, 4);

    for (var j = 0; j < PRSHP_Shipments.length; j++)
    	{
	var ProdId = PRSHP_Shipments[j].SVMXC__Product__c;
	var ShpQty = parseFloat(document.getElementById(PRSHP_Shipments[j].Id+"ShpQty").value);

	// Decrease Available stock in the source location
	var FromStockArr = SVMXI_DoStockUpdate(ProdId, PRSHP_SourceLocId, "Available", ShpQty, "Shipment", PRSHP_ShipmentNumber, "Decrease", PRSHP_ShipmentOrderId, PRSHP_Shipments[j].Id, PRSHP_UserId);
	if (!FromStockArr[0])
	    {	   
	    alert(SVMXI_GetMessage("MSG012")+"\n" + FromStockArr[4]);		
	    CloseWindow();
	    return;
	    }
	var FromProdStockId = FromStockArr[1];

	// If target location is not stockable, it means the shipment was made to a customer location. Consider the quantity as Consumed
	// If target location is stockable, it must be an internal location. Consider the quantity to be In Transit 
	if (PRSHP_DestLocStockable == false)
	    var ToStockArr = SVMXI_DoStockUpdate(ProdId, PRSHP_DestLocId, "Consumed", ShpQty, "Shipment", PRSHP_ShipmentNumber, "Increase", PRSHP_ShipmentOrderId, PRSHP_Shipments[j].Id, PRSHP_UserId);
	else
	    var ToStockArr = SVMXI_DoStockUpdate(ProdId, PRSHP_DestLocId, "In Transit", ShpQty, "Shipment", PRSHP_ShipmentNumber, "Increase", PRSHP_ShipmentOrderId, PRSHP_Shipments[j].Id, PRSHP_UserId);
	if (!ToStockArr[0])
	    {	    
	    alert(SVMXI_GetMessage("MSG012")+"\n" + FromStockArr[4]);		
	    CloseWindow();
	    return;
	    }
	var ToProdStockId = FromStockArr[1];

	// Build serial number array for the shipped quantity
	if (SerialCount > 0)
	    {
	    for (var k = 0; k < SerialCount; k++)
		{
		if (SerialArray[k][0] == ProdId && SerialArray[k][4] == PRSHP_DestLocId)
		    {
		    SerialSaveArray[totq][0] = ProdId;
		    SerialSaveArray[totq][1] = FromProdStockId;
		    SerialSaveArray[totq][2] = ToProdStockId;
		    SerialSaveArray[totq][3] = SerialArray[k][7];
		    totq++;
		    }
		}
	    }
	}

    // Update serial numbers for the shipped quantity
    if (SerialCount > 0) { var returnVal = SVMXI_DoSerialSave(SerialSaveArray, PRSHP_UserId); }

    var newcnt = 0;
    var curdate = new Date();
    var reqlinesupd = new Array();
    var svolinesupd = new Array();
    var shplinesupd = new Array();
    var shplinesins = new Array();
    for (var k = 0; k < PRSHP_Shipments.length; k++)
    	{
	var shplineupd = new sforce.SObject("SVMXC__RMA_Shipment_Line__c");
	var rec = PRSHP_Shipments[k];
	var ExpQty = parseFloat(document.getElementById(rec.Id+"ExpQty").value);
	var ShpQty = parseFloat(document.getElementById(rec.Id+"ShpQty").value);
	var checked = document.getElementById(rec.Id+"Checkbox").checked;

	shplineupd.Id = rec.Id;
	shplineupd.SVMXC__Actual_Quantity2__c = ShpQty;
	shplineupd.SVMXC__Actual_Ship_Date__c = SVMXI_GetCurrentTime();
	shplineupd.SVMXC__Posted_To_Inventory__c = true;
	if (checked && ShpQty == 0)
	    {
	    shplineupd.SVMXC__Line_Status__c = "Canceled";
	    shplineupd.SVMXC__Canceled_On__c = SVMXI_GetCurrentTime();
	    shplineupd.SVMXC__Canceled_By__c = PRSHP_UserId;
	    }
	else if (ShpQty > 0)
	    {
	    shplineupd.SVMXC__Line_Status__c = "Completed";
	    shplineupd.SVMXC__Closed_On__c = SVMXI_GetCurrentTime();
	    shplineupd.SVMXC__Closed_By__c = PRSHP_UserId;
	    }
	shplinesupd.push(shplineupd);

	// Update related object (Service order or Parts Request)
	if (rec.SVMXC__Parts_Request_Line__c)
	    {
	    var reqlineupd = new sforce.SObject("SVMXC__Parts_Request_Line__c");
	    reqlineupd.Id = rec.SVMXC__Parts_Request_Line__c;
	    if(!rec.SVMXC__Parts_Request_Line__r.SVMXC__Quantity_Shipped2__c)
		{ reqlineupd.SVMXC__Quantity_Shipped2__c = ShpQty; }
	    else
		{ reqlineupd.SVMXC__Quantity_Shipped2__c = parseFloat(rec.SVMXC__Parts_Request_Line__r.SVMXC__Quantity_Shipped2__c) + ShpQty; }
	    reqlinesupd.push(reqlineupd);
	    }
	else if (rec.SVMXC__Service_Order_Line__c)
	    {
	    var svolineupd = new sforce.SObject("SVMXC__Service_Order_Line__c");
	    svolineupd.Id = rec.SVMXC__Service_Order_Line__c;
	    if(!rec.SVMXC__Service_Order_Line__r.SVMXC__Quantity_Shipped2__c)
		{ svolineupd.SVMXC__Quantity_Shipped2__c = ShpQty; }
	    else
		{ svolineupd.SVMXC__Quantity_Shipped2__c = parseFloat(rec.SVMXC__Service_Order_Line__r.SVMXC__Quantity_Shipped2__c) + ShpQty; }
	    svolinesupd.push(svolineupd);
	    }

	// Part is partially shipped and user does not want to close the shipment yet. Create a new line for remaining qty.
	if (!checked && ShpQty < ExpQty)
	    {
	    var shplineins = new sforce.SObject("SVMXC__RMA_Shipment_Line__c");
	    shplineins.SVMXC__RMA_Shipment_Order__c = PRSHP_ShipmentOrderId;
	    shplineins.SVMXC__Product__c = rec.SVMXC__Product__c;
	    shplineins.RecordTypeId = rec.RecordTypeId;
	    shplineins.SVMXC__Line_Type__c = rec.SVMXC__Line_Type__c;
	    shplineins.SVMXC__Expected_Quantity2__c = ExpQty - ShpQty;
	    shplineins.SVMXC__Expected_Ship_Date__c = rec.SVMXC__Expected_Ship_Date__c;
	    shplineins.SVMXC__Line_Status__c = "Open";
	    shplineins.SVMXC__Packing_Instructions__c = rec.SVMXC__Packing_Instructions__c;
	    shplineins.SVMXC__Parts_Request_Line__c = rec.SVMXC__Parts_Request_Line__c;
	    shplineins.SVMXC__Service_Order_Line__c = rec.SVMXC__Service_Order_Line__c;
		shplineins.SVMXC__Line_Price2__c = rec.SVMXC__Line_Price2__c; //By Gm 18Jun08
		shplineins.SVMXC__Use_Price_From_Pricebook__c = "False"; //By Gm 18Jun08
	    shplineins.SVMXC__Posted_To_Inventory__c = false;		
		shplineins.SVMXC__Service_Engineer__c  = rec.SVMXC__Service_Engineer__c;
		shplineins.SVMXC__Sales_Order_Number__c = rec.SVMXC__Sales_Order_Number__c;
		
	    shplinesins.push(shplineins);
	    newcnt += 1;
	    }
	}

    try {
	sforce.connection.update(shplinesupd);
	}
    catch (e) {	
	alert(SVMXI_GetMessage("MSG013")+"\n" + e);
	CloseWindow();
	return false;
	}

    if (reqlinesupd.length > 0)
    	{
	try {
	    sforce.connection.update(reqlinesupd);
	    }
	catch (e) {	   
	    alert(SVMXI_GetMessage("MSG014")+"\n" + e);
	    CloseWindow();
	    return false;
	    }
	}
    else if (svolinesupd.length > 0)
    	{
	try {
	    sforce.connection.update(svolinesupd);
	    }
	catch (e) {	   
	    alert(SVMXI_GetMessage("MSG015")+"\n" + e);
	    CloseWindow();
	    return false;
	    }
	}

    if (newcnt > 0)
    	{
	try {
	    sforce.connection.create(shplinesins);
	    }
	catch (e) {	
	    alert(SVMXI_GetMessage("MSG016")+"\n" + e);
	    CloseWindow();
	    return false;
	    }
	}
    else
    	{
	// To update Shipment header status...
	// check if all lines have been completed or canceled by comparing counts
	var soql2 = "SELECT Count() FROM SVMXC__RMA_Shipment_Line__c WHERE SVMXC__RMA_Shipment_Order__c = '" + PRSHP_ShipmentOrderId + "'";
	qr2 = sforce.connection.query(soql2);

	var soql3 = "SELECT Count() FROM SVMXC__RMA_Shipment_Line__c WHERE SVMXC__RMA_Shipment_Order__c = '" + PRSHP_ShipmentOrderId + "' AND SVMXC__Line_Status__c = 'Completed'";
	qr3 = sforce.connection.query(soql3);

	var soql4 = "SELECT Count() FROM SVMXC__RMA_Shipment_Line__c WHERE SVMXC__RMA_Shipment_Order__c = '" + PRSHP_ShipmentOrderId + "' AND SVMXC__Line_Status__c = 'Canceled'";
	qr4 = sforce.connection.query(soql4);

	var shphdr = new sforce.SObject("SVMXC__RMA_Shipment_Order__c");
	shphdr.Id = PRSHP_ShipmentOrderId;

	var hdrupd = false;
	if (qr2.size == qr3.size)		// All lines completed
	    {
	    shphdr.SVMXC__Order_Status__c = "Closed";
	    shphdr.SVMXC__Closed_By__c = PRSHP_UserId;
	    shphdr.SVMXC__Closed_On__c = SVMXI_GetCurrentTime();
	    hdrupd = true;
	    }
	else if (qr2.size == qr4.size)	// All lines Canceled
	    {
	    shphdr.SVMXC__Order_Status__c = "Canceled";
	    shphdr.SVMXC__Canceled_On__c = SVMXI_GetCurrentTime();
	    shphdr.SVMXC__Canceled_By__c = PRSHP_UserId;
	    hdrupd = true;
	    }
	if (hdrupd)
	    {
	    try {
		sforce.connection.update([shphdr]);
		}
	    catch (e) {		
		alert(SVMXI_GetMessage("MSG017")+"\n" + e);
		CloseWindow();
		return false;
		}
	    }
	} 
    alert(SVMXI_GetMessage("MSG018"));	
    window.opener.location.reload(true);
    CloseWindow();
}
/*=====================================================================================*/
function SVMXI_PostStockAdjustmentToInventory(adjId, adjNum, uId, sessId)
{
    SVMXI_InitMessageList("SADJSC1");  
    SVMXI_SetLabels("PostStockAdjToInventory");  

    ADJINV_AdjustmentId = adjId;
    ADJINV_AdjNumber = adjNum;
    ADJINV_UserId = uId;
    ADJINV_SessionId = sessId;

    /***============== Commented out by HS: 6/25/2009. This is controlled by LMO now
    var inventory_enabled = false;
    var soql1 = "SELECT SVMXC__Enable_Inventory_Module__c FROM SVMXC__ServiceMax_Settings__c";
    qr1 = sforce.connection.query(soql1);
    if(qr1.size > 0)
	{
	rec1 = qr1.getArray("records");
	if (rec1[0].SVMXC__Enable_Inventory_Module__c == "true")
	    inventory_enabled = true;
	else
	    inventory_enabled = false;
	}

    if (!inventory_enabled)
    	{	
	alert(SVMXI_GetMessage("MSG003"));
	CloseWindow();
	return;
	}
    =========*******/

    var soql2 = "SELECT Id, SVMXC__New_Quantity2__c, SVMXC__Location__c, SVMXC__Product__c, SVMXC__Posted_To_Inventory__c " +
    		"FROM SVMXC__Stock_Adjustment__c WHERE Id = '" + ADJINV_AdjustmentId + "'";
    var qr2 = sforce.connection.query(soql2);
    recs = qr2.getArray("records");

    if (recs[0].SVMXC__Posted_To_Inventory__c == "true")
	{	
	alert(SVMXI_GetMessage("MSG004"));
	CloseWindow();
	return;
	}
    ADJINV_ProdId = recs[0].SVMXC__Product__c;
    ADJINV_AdjQty = recs[0].SVMXC__New_Quantity2__c;
    ADJINV_SiteId = recs[0].SVMXC__Location__c;

    var ProdArray = SVMXI_MultiDimensionalArray(1, 6);
    ProdArray[0][0] = ADJINV_ProdId;
    ProdArray[0][1] = ADJINV_AdjQty;
    ProdArray[0][2] = ADJINV_SiteId;
    ProdArray[0][3] = "Available";
    ProdArray[0][4] = ADJINV_SiteId;
    ProdArray[0][5] = "Available";

    // Call serial selection utility. It will capture serial numbers where applicable and
    // call back the routine below with the selected serials
    window.blur();
    var returnVal = SVMXI_DoSerialSelection(ProdArray, "Stock Adjustment", ADJINV_AdjNumber, ADJINV_UserId, ADJINV_SessionId);
}
/*=====================================================================================*/
function SVMXI_Callback_StockAdjustment(SerialSelectStatus, SerialCount, SerialArray)
{
    window.focus();
    if (!SerialSelectStatus)
    	{
	CloseWindow();
	return false;
	}

    var totq = 0;
    var SerialSaveArray = SVMXI_MultiDimensionalArray(SerialCount, 4);

    var OldQty = 0;
    var soql1 = "SELECT SVMXC__Quantity2__c FROM SVMXC__Product_Stock__c " +
    		"WHERE SVMXC__Product__c = '" + ADJINV_ProdId + 
		"' AND SVMXC__Location__c = '" + ADJINV_SiteId + 
		"' AND SVMXC__Status__c = 'Available'";
    var qr1 = sforce.connection.query(soql1);
    if (qr1.size <= 0)
    	OldQty = 0;
    else
	{
	rec1 = qr1.getArray("records");
	OldQty = parseFloat(rec1[0].SVMXC__Quantity2__c);
	}

    var ChangeQty = 0;
    var ChangeType = "";
    if (ADJINV_AdjQty > OldQty)
    	{
	ChangeType = "Increase";
	ChangeQty = ADJINV_AdjQty - OldQty;
	}
    else
    	{
	ChangeType = "Decrease";
	ChangeQty = OldQty - ADJINV_AdjQty;
	}
    // Decrease Available stock in the source location
    var StockArr = SVMXI_DoStockUpdate(ADJINV_ProdId, ADJINV_SiteId, "Available", ChangeQty, "Stock Adjustment", ADJINV_AdjNumber, ChangeType, ADJINV_AdjustmentId, null, ADJINV_UserId);
    if (!StockArr[0])
	{	
	alert(SVMXI_GetMessage("MSG005")+"\n" + StockArr[4]);
	CloseWindow();
	return false;
	}
    var FromProdStockId = StockArr[1];
    var ToProdStockId = StockArr[1];

    // Build serial number array for the adjusted quantity
    if (SerialCount > 0)
	{
	for (var k = 0; k < SerialCount; k++)
	    {
	    SerialSaveArray[totq][0] = ADJINV_ProdId;
	    SerialSaveArray[totq][1] = FromProdStockId;
	    SerialSaveArray[totq][2] = ToProdStockId;
	    SerialSaveArray[totq][3] = SerialArray[k][7];
	    totq++;
	    }
	}

    // Delete all serial numbers from the adjustment location
    var soql = "SELECT Id FROM SVMXC__Product_Serial__c WHERE SVMXC__Product_Stock__c = '" + ToProdStockId + "'";
    var qr = sforce.connection.query(soql);
    if (qr.size > 0)
	{
	var delrecs = new Array();
	var srlrecs = new sforce.QueryResultIterator(qr);
	while(srlrecs.hasNext())
	    {
	    var rec = srlrecs.next();
	    var srlrec = new sforce.SObject("SVMXC__Stock_Serial__c");
	    srlrec.Id = rec.Id;
	    delrecs.push(rec.Id);
	    }

	if (delrecs.length > 0)
	    {
	    try {
		sforce.connection.deleteIds(delrecs);
		}
	    catch (e) {		
		alert(SVMXI_GetMessage("MSG006")+ "\n" + e);
		CloseWindow();
		return false;
		}
	    }
	}

    // Update serial numbers for the adjusted quantity
    if (SerialCount > 0) { var returnVal = SVMXI_DoSerialSave(SerialSaveArray, ADJINV_UserId); }

    var adjline = new sforce.SObject("SVMXC__Stock_Adjustment__c");
    adjline.Id = ADJINV_AdjustmentId;
    adjline.SVMXC__Posted_To_Inventory__c = true;

    try {
	sforce.connection.update([adjline]);
	}
    catch (e) {	
	alert(SVMXI_GetMessage("MSG007")+"\n" + e);
	CloseWindow();
	return false;
    	}
    window.opener.location.reload(true);
    CloseWindow();
    return true;
}
/*=====================================================================================*/
function SVMXI_PostSVOUsageToInventory(servId, servNum, uId, lineId, sessId)
{
    SVMXI_InitMessageList("WORDSC7"); 
    SVMXI_SetLabels("PostSVOUsageToInventory"); 
	
    SVOUSGINV_SVOId = servId;
    SVOUSGINV_UserId = uId;
    SVOUSGINV_SVOLineId = lineId;
    SVOUSGINV_SVONumber = servNum;
    SVOUSGINV_SessionId = sessId;

    /***============== Commented out by HS: 6/25/2009. This is controlled by LMO now
    var inventory_enabled = false;
    var soql1 = "SELECT SVMXC__Enable_Inventory_Module__c FROM SVMXC__ServiceMax_Settings__c";
    qr1 = sforce.connection.query(soql1);
    if(qr1.size > 0)
	{
	rec1 = qr1.getArray("records");
	inventory_enabled = rec1[0].SVMXC__Enable_Inventory_Module__c;
	}

    if (!inventory_enabled)
    	{	
	alert(SVMXI_GetMessage("MSG003"));
	CloseWindow();
	return;
	}
    ===========********/

    // Get Salesforce internal Record Type ID for Service order "Usage/Consumption"
    var soql2 = "SELECT Id FROM RecordType WHERE SobjectType = 'SVMXC__Service_Order_Line__c' AND Name = 'Usage/Consumption'";
    var qr2 = sforce.connection.query(soql2); 
    var rec2 = qr2.getArray("records");
    if (rec2.length == 0)
	{       
	alert(SVMXI_GetMessage("MSG005"));
        CloseWindow();
        return;
	}
    UsageRecordTypeId = rec2[0].Id;

    var soql3 = "SELECT Count() FROM SVMXC__Service_Order_Line__c " +
    		"WHERE SVMXC__Service_Order__c = '" + SVOUSGINV_SVOId + "' AND RecordTypeId = '" + UsageRecordTypeId + "'";
    var qr3 = sforce.connection.query(soql3);
    if (qr3.size <= 0)
    	{       
	alert(SVMXI_GetMessage("MSG004"));
        CloseWindow();
        return;
	}

    var soql4 = "SELECT Id, SVMXC__Consumed_From_Location__c, SVMXC__Product__c, SVMXC__Actual_Quantity2__c FROM SVMXC__Service_Order_Line__c " +
    		"WHERE SVMXC__Service_Order__c = '" + SVOUSGINV_SVOId + "' AND RecordTypeId = '" + UsageRecordTypeId +
		"' AND SVMXC__Line_Type__c = 'Parts' AND SVMXC__Posted_To_Inventory__c = false";
    if (SVOUSGINV_SVOLineId) { soql4 = soql4 + " AND Id = '" + SVOUSGINV_SVOLineId + "'"; }
    var qr4 = sforce.connection.query(soql4);
    if (qr4.size <= 0)
    	{
	alert(SVMXI_GetMessage("MSG006"));  
        CloseWindow();
        return;
	}
    var linerecs = qr4.getArray("records");

    var ProdArray = SVMXI_MultiDimensionalArray(linerecs.length, 6);

    for (var k = 0; k < linerecs.length; k++)
    	{
	var rec = linerecs[k];
	if (!rec.SVMXC__Consumed_From_Location__c)
	    {
	    alert(SVMXI_GetMessage("MSG009"));  
	    CloseWindow();
	    return;
	    }
	ProdArray[k][0] = rec.SVMXC__Product__c;
	ProdArray[k][1] = rec.SVMXC__Actual_Quantity2__c;
	ProdArray[k][2] = rec.SVMXC__Consumed_From_Location__c;
	ProdArray[k][3] = "Available";
	ProdArray[k][4] = rec.SVMXC__Consumed_From_Location__c;
	ProdArray[k][5] = "Consumed";
	}
    SVOUSGINV_UsageRecords = linerecs;

    // Call serial selection utility. It will capture serial numbers where applicable and
    // call back the routine below with the selected serials
    window.blur();
    var returnVal = SVMXI_DoSerialSelection(ProdArray, "SVO Usage", SVOUSGINV_SVONumber, SVOUSGINV_UserId, SVOUSGINV_SessionId);
}
/*=====================================================================================*/
function SVMXI_Callback_PostSVOUsage(SerialSelectStatus, SerialCount, SerialArray)
{
    window.focus();
    if (!SerialSelectStatus)
    	{
	CloseWindow();
	return false;
	}
    var totq = 0;
    var SerialSaveArray = SVMXI_MultiDimensionalArray(SerialCount, 4);

    for (var j = 0; j < SVOUSGINV_UsageRecords.length; j++)
    	{
	var ProdId = SVOUSGINV_UsageRecords[j].SVMXC__Product__c;
	var UsageQty = parseFloat(SVOUSGINV_UsageRecords[j].SVMXC__Actual_Quantity2__c);

	// Decrease Available stock in the usage location
	var FromStockArr = SVMXI_DoStockUpdate(ProdId, SVOUSGINV_UsageRecords[j].SVMXC__Consumed_From_Location__c, "Available", UsageQty, "SVO Usage", SVOUSGINV_SVONumber, "Decrease", SVOUSGINV_SVOId, SVOUSGINV_UsageRecords[j].Id, SVOUSGINV_UserId);
	if (!FromStockArr[0])
	    {	    
	    alert(SVMXI_GetMessage("MSG007")+"\n" + FromStockArr[4]);
	    CloseWindow();
	    return false;
	    }
	var FromProdStockId = FromStockArr[1];

	// Increase Consumed stock in the usage location
	var ToStockArr = SVMXI_DoStockUpdate(ProdId, SVOUSGINV_UsageRecords[j].SVMXC__Consumed_From_Location__c, "Consumed", UsageQty, "SVO Usage", SVOUSGINV_SVONumber, "Increase", SVOUSGINV_SVOId, SVOUSGINV_UsageRecords[j].Id, SVOUSGINV_UserId);
	if (!ToStockArr[0])
	    {	   
	    alert(SVMXI_GetMessage("MSG007")+"\n" + FromStockArr[4]);
	    CloseWindow();
	    return false;
	    }
	var ToProdStockId = FromStockArr[1];

	// Build serial number array for the transferred quantity
	if (SerialCount > 0)
	    {
	    for (var k = 0; k < SerialCount; k++)
		{
		if (SerialArray[k][0] == ProdId && SerialArray[k][4] == SVOUSGINV_UsageRecords[j].SVMXC__Consumed_From_Location__c)
		    {
		    SerialSaveArray[totq][0] = ProdId;
		    SerialSaveArray[totq][1] = FromProdStockId;
		    SerialSaveArray[totq][2] = ToProdStockId;
		    SerialSaveArray[totq][3] = SerialArray[k][7];
		    totq++;
		    }
		}
	    }
	}

    // Update serial numbers for the received quantity
    if (SerialCount > 0) { var returnVal = SVMXI_DoSerialSave(SerialSaveArray, SVOUSGINV_UserId); }

    var curdate = new Date();
    var svolines = new Array();
    for (var m = 0; m < SVOUSGINV_UsageRecords.length; m++)
    	{
	var rec = SVOUSGINV_UsageRecords[m];

	var svoline = new sforce.SObject("SVMXC__Service_Order_Line__c");
	svoline.Id = rec.Id;
	svoline.SVMXC__Posted_To_Inventory__c = true;
	svolines.push(svoline);
	}

    try {
	sforce.connection.update(svolines);
	}
    catch (e) {	
	alert(SVMXI_GetMessage("MSG008")+"\n" + e);
	CloseWindow();
	return false;
    	}
    window.opener.location.reload(true);
    CloseWindow();
    return true;
}
/*=====================================================================================*/
function SVMXI_PostStockTransferToInventory(trfrId, trfrNum, uId, sessId)
{
	SVMXI_InitMessageList("SXFRSC1");  
	SVMXI_SetLabels("PostStockTranToInventory");  
    var ErrMsg = "";

    XFRINV_XferId = trfrId;
    XFRINV_UserId = uId;
    XFRINV_XferNumber = trfrNum;
    XFRINV_SessionId = sessId;

    /***============== Commented out by HS: 6/25/2009. This is controlled by LMO now
    var inventory_enabled = false;
    var soql1 = "SELECT SVMXC__Enable_Inventory_Module__c FROM SVMXC__ServiceMax_Settings__c";
    qr1 = sforce.connection.query(soql1);
    if(qr1.size > 0)
	{
	rec1 = qr1.getArray("records");
	inventory_enabled = rec1[0].SVMXC__Enable_Inventory_Module__c;
	}

    if (!inventory_enabled)
    	{	
	alert(SVMXI_GetMessage("MSG003"));
	CloseWindow();
	return;
	}
    =======***********/

    var soql2 = "SELECT SVMXC__Source_Location__c, SVMXC__Destination_Location__c FROM SVMXC__Stock_Transfer__c WHERE Id = '" + XFRINV_XferId + "'";
    var qr2 = sforce.connection.query(soql2);
    rec2 = qr2.getArray("records");
    if (qr2.size <= 0)
    	{	
	alert(SVMXI_GetMessage("MSG004"));
	CloseWindow();
	return;
	}
    XFRINV_SourceLocId = rec2[0].SVMXC__Source_Location__c;
    XFRINV_DestLocId = rec2[0].SVMXC__Destination_Location__c;

    var soql3 = "SELECT Id, SVMXC__Product__c, SVMXC__Product__r.Name, SVMXC__Quantity_Transferred2__c, SVMXC__Posted_To_Inventory__c " +
    		"FROM SVMXC__Stock_Transfer_Line__c WHERE SVMXC__Stock_Transfer__c = '" + XFRINV_XferId + "'";
    var qr3 = sforce.connection.query(soql3);
    recs = qr3.getArray("records");

    var ProdArray = SVMXI_MultiDimensionalArray(recs.length, 6);

    var invalid = false;
    for (var k = 0; k < recs.length; k++)
    	{
	var rec = recs[k];

	if (rec.SVMXC__Posted_To_Inventory__c == "true")
	    {
	    invalid = true;
	    break;
	    }
	var soql4 = "SELECT SVMXC__Quantity2__c FROM SVMXC__Product_Stock__c WHERE SVMXC__Product__c = '" + rec.SVMXC__Product__c + "' " +
		"AND SVMXC__Location__c = '" + XFRINV_SourceLocId + "' AND SVMXC__Status__c = 'Available'";
	var qr4 = sforce.connection.query(soql4);
	if (qr4.size <= 0)
	    var avlbl_qty = 0;
	else 
	    {
	    var rec4 = qr4.getArray("records");
	    var avlbl_qty = parseFloat(rec4[0].SVMXC__Quantity2__c);
	    }
	if (parseFloat(rec.SVMXC__Quantity_Transferred2__c) > avlbl_qty)
	    {		
	    ErrMsg = ErrMsg + rec.SVMXC__Product__r.Name + SVMXI_GetMessage("MSG005") + "\n";
	    }
		
	ProdArray[k][0] = rec.SVMXC__Product__c;
	ProdArray[k][1] = rec.SVMXC__Quantity_Transferred2__c;
	ProdArray[k][2] = XFRINV_SourceLocId;
	ProdArray[k][3] = "Available";
	ProdArray[k][4] = XFRINV_DestLocId;
	ProdArray[k][5] = "Available";
	}

    if (invalid)
    	{	
	alert(SVMXI_GetMessage("MSG006"));
	CloseWindow();
	return;
	}
    if (ErrMsg.length > 0)
    	{
	alert(ErrMsg);
	CloseWindow();
	return;
	}

    XFRINV_XferRecords = recs;

    // Call serial selection utility. It will capture serial numbers where applicable and
    // call back the routine below with the selected serials
    window.blur();
    var returnVal = SVMXI_DoSerialSelection(ProdArray, "Stock Transfer", XFRINV_XferNumber, XFRINV_UserId, XFRINV_SessionId);
}
/*=====================================================================================*/
function SVMXI_Callback_StockTransfer(SerialSelectStatus, SerialCount, SerialArray)
{
    window.focus();
    if (!SerialSelectStatus)
    	{
	CloseWindow();
	return false;
	}
    var totq = 0;
    var SerialSaveArray = SVMXI_MultiDimensionalArray(SerialCount, 4);

    for (var j = 0; j < XFRINV_XferRecords.length; j++)
    	{
	var ProdId = XFRINV_XferRecords[j].SVMXC__Product__c;
	var XferQty = parseFloat(XFRINV_XferRecords[j].SVMXC__Quantity_Transferred2__c);

	// Decrease Available stock in the source location
	var FromStockArr = SVMXI_DoStockUpdate(ProdId, XFRINV_SourceLocId, "Available", XferQty, "Stock Transfer", XFRINV_XferNumber, "Decrease", XFRINV_XferId, XFRINV_XferRecords[j].Id, XFRINV_UserId);
	if (!FromStockArr[0])
	    {	   
	    alert(SVMXI_GetMessage("MSG007")+"\n" + FromStockArr[4]);
	    CloseWindow();
	    return false;
	    }
	var FromProdStockId = FromStockArr[1];

	// Increase Available stock in the target location
	var ToStockArr = SVMXI_DoStockUpdate(ProdId, XFRINV_DestLocId, "Available", XferQty, "Stock Transfer", XFRINV_XferNumber, "Increase", XFRINV_XferId, XFRINV_XferRecords[j].Id, XFRINV_UserId);
	if (!ToStockArr[0])
	    {	    
	    alert(SVMXI_GetMessage("MSG007")+"\n" + FromStockArr[4]);
	    CloseWindow();
	    return false;
	    }
	var ToProdStockId = FromStockArr[1];

	// Build serial number array for the transferred quantity
	if (SerialCount > 0)
	    {
	    for (var k = 0; k < SerialCount; k++)
		{
		if (SerialArray[k][0] == ProdId && SerialArray[k][4] == XFRINV_DestLocId)
		    {
		    SerialSaveArray[totq][0] = ProdId;
		    SerialSaveArray[totq][1] = FromProdStockId;
		    SerialSaveArray[totq][2] = ToProdStockId;
		    SerialSaveArray[totq][3] = SerialArray[k][7];
		    totq++;
		    }
		}
	    }
	}

    // Update serial numbers for the received quantity
    if (SerialCount > 0) { var returnVal = SVMXI_DoSerialSave(SerialSaveArray, XFRINV_UserId); }

    var curdate = new Date();
    var invalid = false;
    var xferlines = new Array();
    for (var m = 0; m < XFRINV_XferRecords.length; m++)
    	{
	var rec = XFRINV_XferRecords[m];

	var xferline = new sforce.SObject("SVMXC__Stock_Transfer_Line__c");
	xferline.Id = rec.Id;
	xferline.SVMXC__Posted_To_Inventory__c = true;
	xferlines.push(xferline);
	}

    try {
	sforce.connection.update(xferlines);
	}
    catch (e) {	
	alert(SVMXI_GetMessage("MSG008")+"\n" + e);
	CloseWindow();
	return false;
    	}
    window.opener.location.reload(true);
    CloseWindow();
    return true;
}
/*=====================================================================================*/
function SVMXI_ProcRMA_ShowLines(rmaId, rmanum, uId, lineId, sessId)
{
    SVMXI_InitMessageList("PORDSC6"); 
    SVMXI_SetLabels("ProcessReceiptsForRMA"); 
	
    PRRMA_RMAId = rmaId;
    PRRMA_UserId = uId;
    PRRMA_RMALineId = lineId;
    PRRMA_RMANumber = rmanum;
    PRRMA_SessionId = sessId;

    // Get RMA header info
    var soql1 = "SELECT SVMXC__Source_Location__c, SVMXC__Destination_Location__c, SVMXC__Order_Status__c, " +
		"SVMXC__Source_Location__r.SVMXC__Stocking_Location__c, SVMXC__Destination_Location__r.SVMXC__Stocking_Location__c, " +
		"SVMXC__Destination_Location__r.SVMXC__Costed_at_value__c " +
    		"FROM SVMXC__RMA_Shipment_Order__c WHERE Id = '" + PRRMA_RMAId + "'";
    var qr1 = sforce.connection.query(soql1);
    if (qr1.size <= 0)
	{	
	alert(SVMXI_GetMessage("MSG002"));
	CloseWindow();
	return;
	}
    var rec1 = qr1.getArray("records");
    if (rec1[0].SVMXC__Order_Status__c == "Closed")
    	{	
	 alert(SVMXI_GetMessage("MSG003"));
	CloseWindow();
	return;
	}
    if (rec1[0].SVMXC__Order_Status__c == "Canceled")
    	{	
	 alert(SVMXI_GetMessage("MSG004"));
	CloseWindow();
	return;
	}
    if (!rec1[0].SVMXC__Destination_Location__c)
    	{		
	alert(SVMXI_GetMessage("MSG005"));
	CloseWindow();
	return;
	}
    if (!rec1[0].SVMXC__Destination_Location__r.SVMXC__Stocking_Location__c)
    	{	
	alert(SVMXI_GetMessage("MSG006"));
	CloseWindow();
	return;
	}
    PRRMA_SourceLocId = rec1[0].SVMXC__Source_Location__c;
    PRRMA_DestLocId = rec1[0].SVMXC__Destination_Location__c;
    PRRMA_DestCostedAtValue = rec1[0].SVMXC__Destination_Location__r.SVMXC__Costed_at_value__c;

    // Get Salesforce internal Record Type ID for RMA Line "RMA"
    var soql = "SELECT Id FROM RecordType WHERE SobjectType = 'SVMXC__RMA_Shipment_Line__c' AND Name = 'RMA'"
    var queryResult = sforce.connection.query(soql); 
    var rtrecords = queryResult.getArray("records");
    if (rtrecords.length == 0)
	{        
	alert(SVMXI_GetMessage("MSG010"));
        window.close();
        return;
	}
    PRRMA_RecordTypeId = rtrecords[0].Id;

    // Get open RMA lines
    var soql2 = "SELECT Id, SVMXC__Product__c, SVMXC__Product__r.Name, " +
    		"SVMXC__Expected_Quantity2__c, SVMXC__Expected_Receipt_Date__c " +
		"FROM SVMXC__RMA_Shipment_Line__c WHERE SVMXC__RMA_Shipment_Order__c = '" + PRRMA_RMAId + "' AND " +
		"SVMXC__Line_Status__c = 'Open' AND RecordTypeId = '" + PRRMA_RecordTypeId + "'";
    if (PRRMA_RMALineId) { soql2 = soql2 + " AND Id = '" + PRRMA_RMALineId + "'" } ;
    var qr2 = sforce.connection.query(soql2);
    if (qr2.size <= 0)
	{
	if (PRRMA_RMALineId)
		{			
		alert(SVMXI_GetMessage("MSG007")) ;
		}
	else
		{			
		alert(SVMXI_GetMessage("MSG008")) ;
		}
	CloseWindow();
	return;
	}
    var rmarecs = new sforce.QueryResultIterator(qr2);

    var rownum = 0;
    var tbody = document.getElementById("list_tbody");

    SVMXI_ProcRMA_DrawHeader(tbody);  

    var noloc = 0;
    while(rmarecs.hasNext())
	{
	var rmarec = rmarecs.next();

	var rmalineid = rmarec.Id;
	var prodid = rmarec.SVMXC__Product__c;
	var ExpQty = parseFloat(rmarec.SVMXC__Expected_Quantity2__c);

	var tr = makeRow(makeAttrs(rownum,tbody) );
	tr.sobject = rmarec;
	tbody.appendChild(tr);

		// Col 1. Product Name
	createTag(tr,"th",{"scope":"row"}).innerHTML =
		"<a target=_blank href=\"/" + prodid + "\">" + prodid ? rmarec.SVMXC__Product__r.Name : "Unknown" + "</a>";

		// Col 2. Expected Quantity
	createTag(tr,"td", []).innerHTML =
		"<input disabled=\"true\" type=\"text\" id=\"" + rmalineid + "ExpQty\" name=\"" + rmalineid + "ExpQty\" value=\"" + ExpQty + "\"></input>";

		// Col 3. Received Quantity
	createTag(tr,"td", []).innerHTML =
		"<input type=\"text\" id=\"" + rmalineid + "RcvQty\" name=\"" + rmalineid + "RcvQty\" value=\"" + ExpQty + "\" onchange=\"SVMXI_ProcRMA_ValidateQuantity(this);\"></input>";

		// Col 4. Checkbox
	createTag(tr,"td",{'class':'actionColumn','align':'center'}).innerHTML =
		"<input checked=\"true\" disabled=\"true\" type=\"checkbox\" id=\"" + rmalineid + "Checkbox\" name=\"ids\" value=\"" + rmalineid + "\" >&nbsp;";

		// Col 5. Status Message
	createTag(tr,"td", []).innerHTML =
		"<div id=\"" + rmalineid + "ErrMsg\" name=\"" + rmalineid + "ErrMsg\"></div>";

	rownum += 1;
	}

    document.getElementById('waitmsg').style.visibility = 'hidden'; 
    document.getElementById('waitmsg').style.height = 0; 
}
/*=====================================================================================*/
function SVMXI_ProcRMA_ValidateQuantity(ctrl)
{
    var rmalineid = ctrl.name.substring(0,18);
    var expqtyname = rmalineid + "ExpQty";
    var expqty = document.getElementById(expqtyname);

    if(parseFloat(ctrl.value) >= parseFloat(expqty.value))
    	{
	document.getElementById(rmalineid+"Checkbox").checked = true;
	document.getElementById(rmalineid+"Checkbox").disabled = true;
	}
    else
    	{
	document.getElementById(rmalineid+"Checkbox").checked = false;
	document.getElementById(rmalineid+"Checkbox").disabled = false;
	}
}
/*=====================================================================================*/
function SVMXI_ProcRMA_DrawHeader(ta)
{
    var tr = makeRow({'class':'headerRow'});
    ta.appendChild(tr);
	


    createTag(tr,"th",{'scope':'col'}).innerHTML =
	    "<a href=\"#\" title=\"\">"+SVMXI_GetMessage('LAB005')+"</a>";

    createTag(tr,"th",{'scope':'col','align':'right'}).innerHTML =
	    "<a href=\"#\" title=\"\">"+SVMXI_GetMessage('LAB006')+"</a>";

    createTag(tr,"th",{'scope':'col','align':'right'}).innerHTML =
	    "<a href=\"#\" title=\"\">"+SVMXI_GetMessage('LAB007')+"</a>";

    createTag(tr,"th",{'scope':'col'}).innerHTML =
	    "<a href=\"#\" title=\"\">"+SVMXI_GetMessage('LAB008')+"</a>";
		
}
/*=====================================================================================*/
function SVMXI_ProcRMA_ValidateAndProcess()
{
    var form = document.forms['ProcessReceiptsForRMA'];

    var sobjectList = new Array();
    for (i = 0; i < form.elements.length; i++)
	{
	if (form.elements[i].name == 'ids')
	    {
	    var pn = form.elements[i].parentNode;
	    var ppn = form.elements[i].parentNode.parentNode;
	    if (ppn.sobject)
		{
		sobjectList.push(ppn.sobject);
		}
	    }
	}

    var valid_receipts = new Array();
    var invalid = false;
    var skipcnt = 0;
    invalid = false;
    for (var k = 0; k < sobjectList.length; k++)
    	{
	var rec_invalid = false;
	var rec = sobjectList[k];
	var RcvQty = parseFloat(document.getElementById(rec.Id+"RcvQty").value);
	var ExpQty = parseFloat(document.getElementById(rec.Id+"ExpQty").value);
	var checked = document.getElementById(rec.Id+"Checkbox").checked;
	
	var ErrMsg = "";
	if (isNaN(RcvQty) || RcvQty < 0)
	    {
	    ErrMsg = SVMXI_GetMessage("MSG011");
	    invalid = true;
	    rec_invalid = true;
	    }
	else if (!checked && RcvQty == 0)
	    {
	    skipcnt += 1;
	    }
	else if(RcvQty > ExpQty)
	    {
	    ErrMsg =SVMXI_GetMessage("MSG012");
	    invalid = true;
	    rec_invalid = true;
	    }
	if (rec_invalid)
	    {
	    document.getElementById(rec.Id+"ErrMsg").style.border = "#FF0000 2px solid";
	    document.getElementById(rec.Id+"ErrMsg").innerHTML = ErrMsg;
	    }
	else
	    {
	    document.getElementById(rec.Id+"ErrMsg").style.border = "0";
	    document.getElementById(rec.Id+"ErrMsg").innerHTML = "";
	    }
	if (!rec_invalid && RcvQty > 0)
	    valid_receipts.push(rec);
	}

    if(invalid) { return; }

    if(skipcnt == sobjectList.length)
	{			
	alert(SVMXI_GetMessage("MSG009"));
	return;
	}
    PRRMA_Receipts = valid_receipts;
    SVMXI_ProcRMA_ProcessReceipts();
}
/*=====================================================================================*/
function SVMXI_ProcRMA_ProcessReceipts()
{
    var ProdArray = SVMXI_MultiDimensionalArray(PRRMA_Receipts.length, 6);
    for (var i = 0; i < PRRMA_Receipts.length; i++)
	{
	var RcvQty = parseFloat(document.getElementById(PRRMA_Receipts[i].Id+"RcvQty").value);
	ProdArray[i][0] = PRRMA_Receipts[i].SVMXC__Product__c;
	ProdArray[i][1] = RcvQty;
	ProdArray[i][2] = PRRMA_DestLocId;
	ProdArray[i][3] = "In Transit";
	ProdArray[i][4] = PRRMA_DestLocId;
	ProdArray[i][5] = "Available";
	}
    // Call serial selection utility. It will capture serial numbers where applicable and
    // call back the routine below with the selected serials
    window.blur();
    var returnVal = SVMXI_DoSerialSelection(ProdArray, "RMA Receipt", PRRMA_RMANumber, PRRMA_UserId, PRRMA_SessionId);
}
/*=====================================================================================*/
function SVMXI_Callback_ProcessRMAReceipts(SerialSelectStatus, SerialCount, SerialArray)
{
    window.focus();
    if (!SerialSelectStatus)
    	{
	CloseWindow();
	return false;
	}
    var totq = 0;
    var SerialSaveArray = SVMXI_MultiDimensionalArray(SerialCount, 4);

    for (var j = 0; j < PRRMA_Receipts.length; j++)
    	{
	var ProdId = PRRMA_Receipts[j].SVMXC__Product__c;
	var RcvQty = parseFloat(document.getElementById(PRRMA_Receipts[j].Id+"RcvQty").value);

	// If target location is costed at value, set the stock status as Available.
	// If target location is NOT costed at value, set the stock status as Scrap.
	if (PRRMA_DestCostedAtValue)
	    var ToStockArr = SVMXI_DoStockUpdate(ProdId, PRRMA_DestLocId, "Available", RcvQty, "RMA Receipt", PRRMA_RMANumber, "Increase", PRRMA_RMAId, PRRMA_Receipts[j].Id, PRRMA_UserId);
	else
	    var ToStockArr = SVMXI_DoStockUpdate(ProdId, PRRMA_DestLocId, "Scrap", RcvQty, "RMA Receipt", PRRMA_RMANumber, "Increase", PRRMA_RMAId, PRRMA_Receipts[j].Id, PRRMA_UserId);
	if (!ToStockArr[0])
	    {	   
	    alert(SVMXI_GetMessage("MSG013")+"\n" + ToStockArr[4]);
	    CloseWindow();
	    return false;
	    }
	var FromProdStockId = ToStockArr[1];
	var ToProdStockId = ToStockArr[1];

	// Build serial number array for the received quantity
	if (SerialCount > 0)
	    {
	    for (var k = 0; k < SerialCount; k++)
		{
		if (SerialArray[k][0] == ProdId)
		    {
		    SerialSaveArray[totq][0] = ProdId;
		    SerialSaveArray[totq][1] = FromProdStockId;
		    SerialSaveArray[totq][2] = ToProdStockId;
		    SerialSaveArray[totq][3] = SerialArray[k][7];
		    totq++;
		    }
		}
	    }
	}

    // Update serial numbers for the received quantity
    if (SerialCount > 0) { var returnVal = SVMXI_DoSerialSave(SerialSaveArray, PRRMA_UserId); }

    var newcnt = 0;
    var curdate = new Date();
    var rmalinesupd = new Array();
    var rmalinesins = new Array();
    for (var m = 0; m < PRRMA_Receipts.length; m++)
    	{
	var rmalineupd = new sforce.SObject("SVMXC__RMA_Shipment_Line__c");
	var rec = PRRMA_Receipts[m];
	var RcvQty = parseFloat(document.getElementById(rec.Id+"RcvQty").value);
	var ExpQty = parseFloat(document.getElementById(rec.Id+"ExpQty").value);
	var checked = document.getElementById(rec.Id+"Checkbox").checked;

	rmalineupd.Id = rec.Id;
	rmalineupd.SVMXC__Actual_Quantity2__c = RcvQty;
	rmalineupd.SVMXC__Actual_Receipt_Date__c = SVMXI_GetCurrentTime();

	if (checked && RcvQty == 0)
	    {
	    rmalineupd.SVMXC__Line_Status__c = "Canceled";
	    rmalineupd.SVMXC__Canceled_On__c = SVMXI_GetCurrentTime();
	    rmalineupd.SVMXC__Canceled_By__c = PRRMA_UserId;
	    }
	else if (RcvQty > 0)
	    {
	    rmalineupd.SVMXC__Line_Status__c = "Completed";
	    rmalineupd.SVMXC__Closed_On__c = SVMXI_GetCurrentTime();
	    rmalineupd.SVMXC__Closed_By__c = PRRMA_UserId;
	    rmalineupd.SVMXC__Posted_To_Inventory__c = "true";
	    }
	rmalinesupd.push(rmalineupd);

	// Part is partially received and user does not want to close the RMA line yet. Create a new line for remaining qty.
	if (!checked && RcvQty < ExpQty)
	    {
	    var rmalineins = new sforce.SObject("SVMXC__RMA_Shipment_Line__c");
	    rmalineins.RecordTypeId = PRRMA_RecordTypeId;
	    rmalineins.SVMXC__RMA_Shipment_Order__c = PRRMA_RMAId;
	    rmalineins.SVMXC__Product__c = rec.SVMXC__Product__c;
	    rmalineins.SVMXC__Expected_Quantity2__c = ExpQty - RcvQty;
	    rmalineins.SVMXC__Expected_Receipt_Date__c = rec.SVMXC__Expected_Receipt_Date__c;
	    rmalineins.SVMXC__Line_Status__c = "Open";
	    rmalineins.SVMXC__Posted_To_Inventory__c = "false";
	    rmalinesins.push(rmalineins);
	    newcnt += 1;
	    }
	}

    try {
	sforce.connection.update(rmalinesupd);
	}
    catch (e) {	
	alert(SVMXI_GetMessage("MSG014")+"\n" + e);
	CloseWindow();
	return false;
    	}

    if (newcnt > 0)
    	{
	try {
	    sforce.connection.create(rmalinesins);
	    }
	catch (e) {	   
	    alert(SVMXI_GetMessage("MSG015")+"\n" + e);
	    CloseWindow();
	    return false;
	    }
	}
    else
    	{
	// To update RMA header status...
	// check if all lines have been completed or canceled by comparing counts
	var soql2 = "SELECT Count() FROM SVMXC__RMA_Shipment_Line__c WHERE SVMXC__RMA_Shipment_Order__c = '" + PRRMA_RMAId + "'";
	qr2 = sforce.connection.query(soql2);

	var soql3 = "SELECT Count() FROM SVMXC__RMA_Shipment_Line__c WHERE SVMXC__RMA_Shipment_Order__c = '" + PRRMA_RMAId + "' AND SVMXC__Line_Status__c = 'Completed'";
	qr3 = sforce.connection.query(soql3);

	var soql4 = "SELECT Count() FROM SVMXC__RMA_Shipment_Line__c WHERE SVMXC__RMA_Shipment_Order__c = '" + PRRMA_RMAId + "' AND SVMXC__Line_Status__c = 'Canceled'";
	qr4 = sforce.connection.query(soql4);

	var rmahdr = new sforce.SObject("SVMXC__RMA_Shipment_Order__c");
	rmahdr.Id = PRRMA_RMAId;

	var hdrupd = false;
	if (qr2.size == qr3.size)		// All lines completed
	    {
	    rmahdr.SVMXC__Order_Status__c = "Closed";
	    rmahdr.SVMXC__Closed_On__c = SVMXI_GetCurrentTime();
	    rmahdr.SVMXC__Closed_By__c = PPRR_UserId;
	    hdrupd = true;
	    }
	else if (qr2.size == qr4.size)	// All lines Canceled
	    {
	    rmahdr.SVMXC__Order_Status__c = "Canceled";
	    rmahdr.SVMXC__Canceled_On__c = SVMXI_GetCurrentTime();
	    rmahdr.SVMXC__Canceled_By__c = PPRR_UserId;
	    hdrupd = true;
	    }
	if (hdrupd)
	    {
	    try {
		sforce.connection.update([rmahdr]);
		}
	    catch (e) {		
		alert(SVMXI_GetMessage("MSG016")+"\n" + e);
		CloseWindow();
		return false;
		}
	    }
	}    
    alert(SVMXI_GetMessage("MSG017"));
    window.opener.location.reload(true);
    CloseWindow();
}

/*=========   GENERIC UTILITIES   ==========================================*/
/*================= START Release 2.0 changes for translation =================*/
// Build a global hash table of message numbers and messages.
// This array will be used for displaying info/warning/error messages to the user.
// NOTE: The calling module should have MsgList declared as an array
function SVMXI_InitMessageList(submoduleid)
{
    var found = false;

    var LangList = new Array();

    		// Hash (Map) of SFDC language ISO code to Language picklist in ServiceMax tags object
    LangList["en_US"] = "English";
    LangList["de"] = "German";
    LangList["es"] = "Spanish";
    LangList["fr"] = "French";
    LangList["it"] = "Italian";
    LangList["ja"] = "Japanese";
    LangList["sv"] = "Swedish";
    LangList["ko"] = "Korean";
    LangList["zh_TW"] = "Chinese (Traditional)";
    LangList["zh_CN"] = "Chinese (Simplified)";
    LangList["pt_BR"] = "Portuguese (Brazilian)";
    LangList["nl_NL"] = "Dutch";
    LangList["da"] = "Danish";
    LangList["th"] = "Thai";
    LangList["fi"] = "Finnish";
    LangList["ru"] = "Russian";

    var UserLang = sforce.connection.getUserInfo().userLanguage;	// ISO code of the user's language

    if (!LangList[UserLang]) { UserLang = "English"; }		// if user's language is not found, default it to English
    else { UserLang = LangList[UserLang]; }

    var listMsgs = sforce.apex.execute('SVMXC.COMM_TagWebServices','TagdataforSubmodule',{text:submoduleid}); 
	if(listMsgs.length>0)
	{
		for (var intMsgCount=0;intMsgCount<listMsgs.length;intMsgCount++)
		{
			var Key=listMsgs[intMsgCount].Key;
			var Value=listMsgs[intMsgCount].Value;			
			MsgList[Key]=Value;
		}
		found=true;
	}

    if (!found)
	{
	if (submoduleid == "PREQSC1")
	    {
	    MsgList['LAB000'] = 'Cancel Parts Request';
	    MsgList['LAB001'] = 'Cancel Parts Request ';	    
	    MsgList['MSG001'] = 'An internal error occurred when saving data. Please contact your ServiceMax administrator to resolve this.';
	    MsgList['MSG002'] = 'An internal error occurred when retrieving data. Please contact your ServiceMax administrator to resolve this.'; 
	    MsgList['MSG003'] = 'Are you sure? ';
	    MsgList['MSG004'] = 'This Parts Request has been processed already. Cannot cancel.';
	    MsgList['MSG005'] = 'This Parts Request has been canceled already.';
	    MsgList['MSG006'] = 'Some items in this Parts Request have been processed partially.';	    
	    MsgList['MSG007'] = 'Please open the pending request lines to cancel individually.';
	    MsgList['MSG999'] = 'Information you entered here will not be saved. Are you sure?';
	    }
	else if (submoduleid == "PORDSC1")
	    {
	    MsgList['LAB000'] = 'Cancel Shipment Order';
	    MsgList['LAB001'] = 'Cancel Shipment Order';	    
	    MsgList['MSG001'] = 'An internal error occurred when saving data. Please contact your ServiceMax administrator to resolve this.';
	    MsgList['MSG002'] = 'An internal error occurred when retrieving data. Please contact your ServiceMax administrator to resolve this.'; 
	    MsgList['MSG003'] = 'This Shipment Order has been closed already. Cannot cancel.';
	    MsgList['MSG004'] = 'This Shipment Order has been canceled already.';
	    MsgList['MSG005'] = 'Some items in this shipment order have been processed partially.';
	    MsgList['MSG006'] = 'Please open the pending shipment lines to cancel individually.';	    		
	    MsgList['MSG999'] = 'Information you entered here will not be saved. Are you sure?';
	    }		
	else if (submoduleid == "WORDSC1")
	    {
	    MsgList['LAB000'] = 'Cancel Work Order Part Requests';
	    MsgList['LAB001'] = 'Cancel Parts Requests in Work Order ';	    
	    MsgList['MSG001'] = 'An internal error occurred when saving data. Please contact your ServiceMax administrator to resolve this.';
	    MsgList['MSG002'] = 'An internal error occurred when retrieving data. Please contact your ServiceMax administrator to resolve this.'; 
	    MsgList['MSG003'] = 'This Work Order has been closed already. Cannot cancel parts requests.';
	    MsgList['MSG004'] = 'This Work Order has been canceled already.';
	    MsgList['MSG005'] = 'Record Type definition is missing. This is an internal error. Please report this error to ServiceMax support.';
	    MsgList['MSG006'] = 'This part request has been processed partially.';	    
	    MsgList['MSG007'] = 'Cannot cancel.';
	    MsgList['MSG008'] = 'Some parts requests in this Work Order have been processed partially.';
	    MsgList['MSG009'] = 'Please open the pending request lines to cancel individually.';
	    MsgList['MSG010'] = 'All Parts requests canceled successfully!';
	    MsgList['MSG999'] = 'Information you entered here will not be saved. Are you sure?';
	    }
	else if (submoduleid == "PREQSC2")
	    {
	    MsgList['LAB000'] = 'New Shipment from Parts Request';
	    MsgList['LAB001'] = 'Create Shipment Order for Parts Request';    
	    MsgList['LAB002'] = 'Enter Quantity To Be Shipped';    
	    MsgList['LAB003'] = 'Submit';    
	    MsgList['LAB004'] = 'Cancel';  
	    MsgList['LAB005'] = 'Product Name';    
	    MsgList['LAB006'] = 'Quantity Remaining';  
	    MsgList['LAB007'] = 'Quantity To Be Shipped';    
	    MsgList['MSG001'] = 'An internal error occurred when saving data. Please contact your ServiceMax administrator to resolve this.';
	    MsgList['MSG002'] = 'An internal error occurred when retrieving data. Please contact your ServiceMax administrator to resolve this.'; 
	    MsgList['MSG003'] = 'This Parts Request is completed already.';    
	    MsgList['MSG004'] = 'This Parts Request has been canceled. Cannot create shipment order.';    
	    MsgList['MSG005'] = 'There are no pending parts request lines to process.';    
	    MsgList['MSG006'] = 'This is not a valid value for quantity to be shipped.';    
	    MsgList['MSG007'] = 'Quantity to be shipped cannot exceed remaining quantity.';    
	    MsgList['MSG008'] = 'You have not entered enough information to create a shipment order.';    
	    MsgList['MSG009'] = 'Shipment Order created successfully!';    
	    MsgList['MSG010'] = 'Record Type definition is missing. This is an internal error. Please report this error to ServiceMax support.';    
	    MsgList['MSG011'] = 'An error occurred when creating Shipment Header. Please report this error to ServiceMax support.';
	    MsgList['MSG012'] = 'An error occurred when creating Shipment lines. Please report this error to ServiceMax support.';
	    MsgList['MSG999'] = 'Information you entered here will not be saved. Are you sure?';
	    }		
	else if (submoduleid == "WORDSC5")
	    {
	    MsgList['LAB000'] = 'New Shipment from Work Order';
	    MsgList['LAB001'] = 'Create Shipment Order for Work Order'; 
	    MsgList['LAB002'] = 'Enter Quantity To Be Shipped from:'; 
	    MsgList['LAB003'] = 'Submit'; 
	    MsgList['LAB004'] = 'Cancel'; 
	    MsgList['LAB005'] = 'Product Name';    
	    MsgList['LAB006'] = 'Quantity Remaining'; 
	    MsgList['LAB007'] = 'Quantity To Be Shipped';   
	    MsgList['MSG001'] = 'An internal error occurred when saving data. Please contact your ServiceMax administrator to resolve this.';
	    MsgList['MSG002'] = 'An internal error occurred when retrieving data. Please contact your ServiceMax administrator to resolve this.'; 
	    MsgList['MSG003'] = 'This Work Order is closed already. Cannot create shipment order.'; 
	    MsgList['MSG004'] = 'This Work Order has been canceled. Cannot create shipment order.'; 
	    MsgList['MSG005'] = 'There are no pending part request lines to process.'; 
	    MsgList['MSG006'] = 'Requested From location has not been filled for any open requests.'; 
	    MsgList['MSG007'] = 'Required At location has not been filled for any open requests.'; 
	    MsgList['MSG008'] = 'There are no pending parts request lines for this location.'; 
	    MsgList['MSG010'] = 'Record Type definition is missing. This is an internal error. Please report this error to ServiceMax support.'; 
	    MsgList['MSG011'] = 'Please select a valid location first.'; 
	    MsgList['MSG012'] = 'This is not a valid value for quantity to be shipped.'; 
	    MsgList['MSG013'] = 'Quantity to be shipped cannot exceed remaining quantity.'; 
	    MsgList['MSG014'] = 'You have not entered enough information to create a shipment order.'; 
	    MsgList['MSG015'] = 'Shipment Order created successfully!'; 
	    MsgList['MSG016'] = 'An error occurred when creating Shipment Header. Please report this error to ServiceMax support.'; 
	    MsgList['MSG017'] = 'An error occurred when creating Shipment lines. Please report this error to ServiceMax support.'; 
	    MsgList['MSG999'] = 'Information you entered here will not be saved. Are you sure?';
	    }
	else if (submoduleid == "SADJSC1")
	    {
	    MsgList['LAB000'] = 'Post Stock Adjustment To Inventory';
	    MsgList['LAB001'] = 'Post Stock Adjustment'; 
	    MsgList['LAB002']   = ' to inventory'; 
	    MsgList['MSG001'] = 'An internal error occurred when saving data. Please contact your ServiceMax administrator to resolve this.';
	    MsgList['MSG002'] = 'An internal error occurred when retrieving data. Please contact your ServiceMax administrator to resolve this.'; 
	    MsgList['MSG003'] = 'ServiceMax Inventory module is not enabled for your organization.'; 
	    MsgList['MSG004'] = 'This stock adjustment has been posted to inventory already.';  
	    MsgList['MSG005'] = 'An error occurred when updating stock.'; 
	    MsgList['MSG006'] = 'An error occurred when deleting serial numbers. Please report this error to ServiceMax support.'; 
	    MsgList['MSG007'] = 'An error occurred when updating Stock Adjustment. Please report this error to ServiceMax support.'; 
	    }
	else if (submoduleid == "SXFRSC1")
	    {
	    MsgList['LAB000'] = 'Post Stock Transfer To Inventory';
	    MsgList['LAB001'] = 'Post Stock Transfer';    
	    MsgList['LAB002'] = ' to inventory';      		
	    MsgList['MSG001'] = 'An internal error occurred when saving data. Please contact your ServiceMax administrator to resolve this.';
	    MsgList['MSG002'] = 'An internal error occurred when retrieving data. Please contact your ServiceMax administrator to resolve this.'; 
	    MsgList['MSG003'] = 'ServiceMax Inventory module is not enabled for your organization.';    
	    MsgList['MSG004'] = 'An unexpected error occurred when retrieving stock transfer record.';    
	    MsgList['MSG005'] = ': Transfer quantity exceeds available quantity.';    
	    MsgList['MSG006'] = 'This stock transfer has been posted to inventory already.';    	
	    MsgList['MSG007'] = 'An error occurred when updating stock.'; 
	    MsgList['MSG008'] = 'An error occurred when updating Stock Transfer lines.'; 
	    MsgList['MSG999'] = 'Information you entered here will not be saved. Are you sure?';
	    }		
	else if (submoduleid == "WORDSC7")
	    {
	    MsgList['LAB000'] = 'Post Usage To Inventory';
	    MsgList['LAB001'] = 'Post usage/consumption for Work Order';    
	    MsgList['LAB002'] = ' to inventory';      		
	    MsgList['MSG001'] = 'An internal error occurred when saving data. Please contact your ServiceMax administrator to resolve this.';
	    MsgList['MSG002'] = 'An internal error occurred when retrieving data. Please contact your ServiceMax administrator to resolve this.'; 
	    MsgList['MSG003'] = 'ServiceMax Inventory module is not enabled for your organization.';    
	    MsgList['MSG004'] = 'There are no usage/consumption lines in this Work Order.';     
	    MsgList['MSG005'] = 'Record Type definition is missing. This is an internal error. Please report this error to ServiceMax support.';    
	    MsgList['MSG006'] = 'Usage/Consumption lines should have a line type "Parts" and not posted to inventory already.';    
	    MsgList['MSG007'] = 'An error occurred when updating stock.'; 
	    MsgList['MSG008'] = 'An error occurred when updating Work Order lines.'; 
	    MsgList['MSG009'] = 'Consumed From Location must be entered for all usage/consumption parts records.'; 
	    MsgList['MSG999'] = 'Information you entered here will not be saved. Are you sure?';
	    }	
	else if (submoduleid == "WORDSC9")
	    {
	    MsgList['LAB000'] = 'Process Receipts for Work Order';
	    MsgList['LAB001'] = 'Process Receipts for Work Order';    
	    MsgList['LAB002'] = 'Enter Received Quantity and/or Close Requests';          		
	    MsgList['LAB003'] = 'Submit'; 	
	    MsgList['LAB004'] = 'Cancel';   		
	    MsgList['LAB005'] = 'Product Name'; 
	    MsgList['LAB006'] = 'Quantity Requested';    		
	    MsgList['LAB007'] = 'Quantity Received'; 
	    MsgList['LAB008'] = 'Close Request';    
	    MsgList['MSG001'] = 'An internal error occurred when saving data. Please contact your ServiceMax administrator to resolve this.';
	    MsgList['MSG002'] = 'An internal error occurred when retrieving data. Please contact your ServiceMax administrator to resolve this.'; 
	    MsgList['MSG003'] = 'This is not a valid value for received quantity.'; 	
	    MsgList['MSG004'] = 'Received quantity cannot exceed requested quantity.';    		
	    MsgList['MSG005'] = 'This item has been shipped already. Cannot short-close.';    		
	    MsgList['MSG006'] = 'Shipment has been initiated for this request! Cannot short-close.';     		
	    MsgList['MSG007'] = 'You have not entered enough information to process receipts.'; 		
	    MsgList['MSG008'] = 'This Work Order is closed already. Cannot process receipts.'; 		
	    MsgList['MSG009'] = 'This Work Order has been canceled. Cannot process receipts.'; 		
	    MsgList['MSG010'] = 'Record Type definition is missing. This is an internal error. Please report this error to ServiceMax support.'; 
	    MsgList['MSG011'] = 'This parts request line is not open. Cannot proceed to process receipts'; 
	    MsgList['MSG012'] = 'There are no open parts request lines to process.'; 
	    MsgList['MSG013'] = 'Parts requests in this Work order without a From or To location are not listed here. To correct this, please enter the locations before processing receipts.'; 
	    MsgList['MSG014'] = 'From and To locations are not entered for any open parts requests. To correct this, please enter the locations before processing receipts.'; 
	    MsgList['MSG015'] = 'An error occurred when updating stock.'; 
	    MsgList['MSG016'] = 'An error occurred when updating Work Order lines.'; 
	    MsgList['MSG017'] = 'An error occurred when creating Work Order lines.'; 
	    MsgList['MSG018'] = 'Receipts processing completed successfully!'; 
	    MsgList['MSG999'] = 'Information you entered here will not be saved. Are you sure?';
	    }		
	else if (submoduleid == "PREQSC3")
	    {
	    MsgList['LAB000'] = 'Process Receipts for Parts Request';
	    MsgList['LAB001'] = 'Process Receipts for Parts Request';
	    MsgList['LAB002'] = 'Enter Received Quantity and/or Close Requests';
	    MsgList['LAB003'] = 'Submit';
	    MsgList['LAB004'] = 'Cancel';
	    MsgList['LAB005'] = 'Product Name';
	    MsgList['LAB006'] = 'Quantity Requested';
	    MsgList['LAB007'] = 'Quantity Received';
	    MsgList['LAB008'] = 'Close Request';
	    MsgList['MSG001'] = 'An internal error occurred when saving data. Please contact your ServiceMax administrator to resolve this.';
	    MsgList['MSG002'] = 'An internal error occurred when retrieving data. Please contact your ServiceMax administrator to resolve this.';
	    MsgList['MSG003'] = 'This Parts Request is completed already.';
	    MsgList['MSG004'] = 'This Parts Request has been canceled. Cannot process receipts.';
	    MsgList['MSG005'] = 'Default Supplier Location is not setup. This is a setup issue.\nPlease contact your ServiceMax administrator to resolve this.';
	    MsgList['MSG006'] = 'There are no open parts request lines to process.';
	    MsgList['MSG007'] = 'This is not a valid value for received quantity.';
	    MsgList['MSG008'] = 'Received quantity cannot exceed requested quantity.';
	    MsgList['MSG009'] = 'This item has been shipped already. Cannot short-close.';
	    MsgList['MSG010'] = 'Shipment has been initiated for this request! Cannot short-close.';
	    MsgList['MSG011'] = 'You have not entered enough information to process receipts.';
	    MsgList['MSG012'] = 'Receipts processing completed successfully!';
	    MsgList['MSG013'] = 'An error occurred when updating stock.'; 
	    MsgList['MSG999'] = 'Information you entered here will not be saved. Are you sure?';
	    }
	else if (submoduleid == "PORDSC6")
	    {
	    MsgList['LAB000'] = 'Process Receipts for RMA';
	    MsgList['LAB001'] = 'Process Receipts for RMA ';    
	    MsgList['LAB002'] = 'Enter Received Quantity and/or Close Lines';      		
	    MsgList['LAB003'] = 'Submit';      		
	    MsgList['LAB004'] = 'Cancel';      		
	    MsgList['LAB005'] = 'Product Name';    
	    MsgList['LAB006'] = 'Quantity Expected';      		
	    MsgList['LAB007'] = 'Quantity Received';      		
	    MsgList['LAB008'] = 'Close Line';      		
	    MsgList['MSG001'] = 'An internal error occurred when saving data. Please contact your ServiceMax administrator to resolve this.';
	    MsgList['MSG002'] = 'An internal error occurred when retrieving data. Please contact your ServiceMax administrator to resolve this.'; 
	    MsgList['MSG003'] = 'This RMA is closed already. Cannot process receipts.';      		
	    MsgList['MSG004'] = 'This RMA has been canceled. Cannot process receipts.';      		
	    MsgList['MSG005'] = 'Destination location cannot be blank.';      		
	    MsgList['MSG006'] = 'The destination location is not a stocking location.';      		
	    MsgList['MSG007'] = 'This RMA line is not open. Cannot process receipts.';      		
	    MsgList['MSG008'] = 'There are no open RMA lines to process.';      		
	    MsgList['MSG009'] = 'You have not entered enough information to process receipts.';      		
	    MsgList['MSG010'] = 'Record Type definition is missing. This is an internal error. Please report this error to ServiceMax support.'; 
	    MsgList['MSG011'] = 'This is not a valid value for received quantity.'; 
	    MsgList['MSG012'] = 'Received quantity cannot exceed expected quantity.'; 
	    MsgList['MSG013'] = 'An error occurred when updating stock.'; 
	    MsgList['MSG014'] = 'An error occurred when updating RMA lines.'; 
	    MsgList['MSG015'] = 'An error occurred when creating RMA lines.'; 
	    MsgList['MSG016'] = 'An error occurred when updating RMA Header.'; 
	    MsgList['MSG017'] = 'Receipts processing completed successfully!'; 
	    MsgList['MSG999'] = 'Information you entered here will not be saved. Are you sure?';
	    }		
	else if (submoduleid == "PORDSC8")
	    {
	    MsgList['LAB000'] = 'Process Shipments';
	    MsgList['LAB001'] = 'Process Shipments for Shipment Order';    
	    MsgList['LAB002'] = 'Enter Shipped Quantity and/or Close Requests ';      		
	    MsgList['LAB003'] = 'Submit'; 	
	    MsgList['LAB004'] = 'Cancel';   		
	    MsgList['LAB005'] = 'Product Name'; 
	    MsgList['LAB006'] = 'Quantity Requested';    		
	    MsgList['LAB007'] = 'Quantity Shipped'; 	
	    MsgList['LAB008'] = 'Close Request'; 		
	    MsgList['MSG001'] = 'An internal error occurred when saving data. Please contact your ServiceMax administrator to resolve this.';
	    MsgList['MSG002'] = 'An internal error occurred when retrieving data. Please contact your ServiceMax administrator to resolve this.'; 
	    MsgList['MSG003'] = 'This Shipment Order is closed already.';     		
	    MsgList['MSG004'] = 'This Shipment Order has been canceled. Cannot process shipments.';      		
	    MsgList['MSG005'] = 'The source location is blank for this shipment order. Cannot process shipments.';   		
	    MsgList['MSG006'] = 'The destination location is blank for this shipment order. Cannot process shipments.';    		
	    MsgList['MSG007'] = 'Default Customer Location is not setup. ';     		
	    MsgList['MSG008'] = 'There are no open shipment lines to process.'; 		
	    MsgList['MSG009'] = 'This is not a valid value for shipped quantity.';  		
	    MsgList['MSG010'] = 'Shipped quantity cannot exceed requested quantity.'; 
	    MsgList['MSG011'] = 'You have not entered enough information to process this shipment.'; 
	    MsgList['MSG012'] = 'An error occurred when updating stock.'; 
	    MsgList['MSG013'] = 'An error occurred when updating Shipment lines.'; 
	    MsgList['MSG014'] = 'An error occurred when updating Parts Request lines.'; 
	    MsgList['MSG015'] = 'An error occurred when updating Work Order lines.'; 
	    MsgList['MSG016'] = 'An error occurred when creating Shipment lines.'; 
	    MsgList['MSG017'] = 'An error occurred when updating Shipment Order.'; 
	    MsgList['MSG018'] = 'Shipments processing completed successfully!'; 
	    MsgList['MSG999'] = 'Information you entered here will not be saved. Are you sure?';
	    }
	else if (submoduleid == "SLKPSC1")
	    {
	    MsgList['LAB000'] = 'Stock Locator';
	    MsgList['LAB001'] = 'Show/Hide Options';
	    MsgList['LAB002'] = 'Your Location:  ';
	    MsgList['LAB003'] = ' Show Results As: ';
	    MsgList['LAB004'] = 'Find Stock';
	    MsgList['LAB005'] = 'Show/Hide Results';
	    MsgList['LAB006'] = 'Show/Hide Map';
	    MsgList['LAB007'] = 'Request Stock';
	    MsgList['LAB008'] = 'Cancel';
	    MsgList['LAB009'] = 'Location';
	    MsgList['LAB010'] = 'Street';
	    MsgList['LAB011'] = 'City';
	    MsgList['LAB012'] = 'State';
	    MsgList['LAB013'] = 'Zip';
	    MsgList['LAB014'] = 'Country';
	    MsgList['LAB015'] = 'Phone';
	    MsgList['LAB016'] = 'Available Quantity';
	    MsgList['LAB017'] = 'Distance';
	    MsgList['LAB018'] = 'Request';		
	    MsgList['LAB019'] = 'Map,Grid,Both';		
	    MsgList['LAB020'] = 'Kilometers,Miles';			
	    MsgList['LAB021'] = 'Options:';
	    MsgList['LAB022'] = 'Radius: ';
	    MsgList['MSG001'] = 'An internal error occurred when saving data. Please contact your ServiceMax administrator to resolve this.';
	    MsgList['MSG002'] = 'An internal error occurred when retrieving data. Please contact your ServiceMax administrator to resolve this.'; 
	    MsgList['MSG003'] = 'Please select a stock location to request from.';
	    MsgList['MSG004'] = 'Programming error. Invalid record type.';
	    MsgList['MSG005'] = 'Not Available.';
	    MsgList['MSG006'] = 'Find stock for:  ';
	    MsgList['MSG007'] = 'Required Quantity:  ';
	    MsgList['MSG008'] = 'Unable to display map.';
	    MsgList['MSG009'] = 'Address for the Required location is either incorrect or incomplete. The map may not be displayed properly.';
	    MsgList['MSG010'] = 'You are here!';
	    MsgList['MSG011'] = 'No stock available in any location.';
	    MsgList['MSG012'] = 'Double-click the image to request stock from this location.';
	    MsgList['MSG013'] = 'Phone:  ';
	    MsgList['MSG014'] = 'Stock:  ';
	    MsgList['MSG015'] = ': Are you sure to request stock from this location?';
	    MsgList['MSG017'] = 'Work Order Part Request updated successfully.';
	    MsgList['MSG018'] = 'Error occurred when updating parts request: ';
	    MsgList['MSG019'] = 'Programming error. Unsupported source record type.'; 
	    MsgList['MSG020'] = 'Part Request updated successfully.'; 
	    MsgList['MSG021'] = 'Unknown'; 
	    MsgList['MSG022'] = 'No stock available within the given radius';
	    MsgList['MSG999'] = 'Information you entered here will not be saved. Are you sure?';
	    }
	else
	    alert("Unsupported submodule " + submoduleid + ". This is a programming error.");
	}
}
/*=============================================================================*/
// Get the message for the given message number from the global hash table.
// Return "setup-issue" if the message is not found
function SVMXI_GetMessage(MsgNum)
{
    if (!MsgList[MsgNum])
	return "Message definition for " + MsgNum + " not found. This is a setup issue.\nPlease contact your ServiceMax administrator to resolve this.";

    return MsgList[MsgNum];
}
/*=============================================================================*/
function SVMXI_SetLabels(formname)
{
    var labels = document.getElementsByTagName('label');
    for (var i = 0; i < labels.length; i++)
	{
	var f = labels[i];
	if (MsgList[f.name])
	    f.innerText = MsgList[f.name];
	}
    var h1list = document.getElementsByTagName('h1');
    for (var k = 0; k < h1list.length; k++)
	{
	var f = h1list[k];
	if (MsgList[f.id])
	    f.innerHTML = MsgList[f.id];
	}
    var h2list = document.getElementsByTagName('h2');
    for (var m = 0; m < h2list.length; m++)
	{
	var f = h2list[m];
	if (MsgList[f.id])
	    f.innerHTML = MsgList[f.id];
	}
    var elems = document.forms[formname].elements;
    for (var j = 0; j < elems.length; j++)
	{
	var f = elems[j];
	if ((f.type == 'button' || f.type == 'checkbox') && MsgList[f.name])
		{
	    f.value = MsgList[f.name];
			if (f.type == 'button')
				f.title = MsgList[f.name];
		}
		
	}
	 //to populate picklist field
	 var selects = document.getElementsByTagName('select');
    for (var j = 0; j < selects.length; j++)
	{
	var f = selects[j];

	if (MsgList[f.name])
	     {
		
		  //var optionsListString  = MsgList[f.name];		 
		   //optionsList =optionsListString.split(',');		
		  // var optionsListString  = MsgList[f.name];		 
		   optionsList =MsgList[f.name].split(',');	
		 for (var k=0;k<optionsList.length;k++)
			{		
				var opt = document.createElement('OPTION');
				opt.value = optionsList[k];
				opt.text = optionsList[k];		//		opt.text = (optionsList[k]=='null')?'':optionsList[k];				
				f.options.add(opt, k);			
			}
			f.selectedIndex =optionsList.length-1;
		 }
	}
	if (MsgList["LAB000"])
		document.title = MsgList["LAB000"]; 
    return true;
}
/*================= END Release 2.0 changes for translation =================*/
function CloseWindow()
{
    window.close();
}

function SVMXI_GetCurrentTime()
{
    var serverTime = sforce.connection.getServerTimestamp();
    return serverTime.timestamp;
}

function SVMXI_CheckAndClose()
{
    var ans = confirm(SVMXI_GetMessage("MSG999"));
    if (ans) { CloseWindow(); }
}

function isValidNumber(evt)
{
    var charCode = (evt.which) ? evt.which : event.keyCode
    if (charCode > 31 && (charCode < 48 || charCode > 57))
	return false;

    return true;
}

function drawMsg(ta,msg)
{
    if (!ta) ta = document.getElementById("list_tbody");
    clear_table( ta );
    var tr = makeRow({'class':'headerRow'});ta.appendChild(tr);
    createTag(tr,"th",{'class':'actionColumn','scope':'col'}).innerHTML = msg;
}

function clear_table(tbody)
{
    if (!tbody) tbody = document.getElementById("list_tbody");
    while (tbody.rows.length > 0) 	{ tbody.deleteRow(0); }
}

function makeAttrs(i,ta)
{
    var atts = new Object();
    // how many rows in this table so far
    try { ta.even } catch (e) { ta.even = i};
    if (i==0) { // skin stuff
	    atts["class"] = "even first";
    } else if (ta.even == true) {
	    atts["class"] = "even";
    } else {
	    atts["class"] = "odd";
    }
    ta.even = !ta.even;
    atts["onmouseout"] = "if (typeof(hiOff) != 'undefined' && this.active == false){hiOff(this);}";
    atts["onmouseover"] = "if (typeof(hiOn) != 'undefined'){hiOn(this);}";
    return atts;
}

function makeRow(atts)
{
    var browser = navigator.appName;
    if (browser == "Microsoft Internet Explorer") {
	    var trTag = "<TR ";
	    for (key in atts) {
		    trTag += key + "=\"" + atts[key] + "\"";
	    }
	    trTag += ">";
	    var ret = document.createElement(trTag);
    } else {
	    var tr = document.createElement("TR");
	    for (key in atts) {
		    tr.setAttribute(key, atts[key]);
	    }
	    var ret = tr;
    }
    ret.active = false;
    return ret;
}

///******************************** STRING Functions ****************************************//	
// Removes leading whitespaces
function LTrim( value ) 
{
    var re = /\s*((\S+\s*)*)/;
    return value.replace(re, "$1");
}

// Removes ending whitespaces
function RTrim( value ) 
{
    var re = /((\s*\S+)*)\s*/;
    return value.replace(re, "$1");
}

// Removes leading and ending whitespaces
function trim( value ) 
{
    return LTrim(RTrim(value));
}
	
function Left(str, n)
{
    if (n <= 0)
	return "";
    else if (n > String(str).length)
	return str;
    else
	return String(str).substring(0,n);
}
function Right(str, n)
{
    if (n <= 0)
       return "";
    else if (n > String(str).length)
       return str;
    else {
       var iLen = String(str).length;
       return String(str).substring(iLen, iLen - n);
    }
}
	
//-----------------------  Date Utilities------------------------ //

function ConvertDateToSFDCDate(theDate)
{
    var today = theDate;
    var year = today.getFullYear();
    var month = parseFloat(today.getMonth()) + 1;
    if (month < 10) { month = "0" + month; }
    var day = parseFloat(today.getDate());
    if (day < 10) { day = "0" + day; }
    return  year + "-" + month + "-" + day;
}

/*=========   STOCK/SERIAL UTILITIES   ==========================================*/

/*==================================== Serial Number SAVE =========================================*/
var sSav_processLog = "";
var sSav_vProdStkAr; 
var sSav_vUser; // Stores User Name/deails 
var sSav_vUserId;
function SVMXI_DoSerialSave(cProdStkAr, cUserId) 
{	
	sSav_vProdStkAr = cProdStkAr; //An array containing: Product Id, From Product Stock ID, To Product Stock ID, Serial Number	var skSav_processLog = "";
	sSav_vcurrdate = new Date(); 
	sSav_vUserId =cUserId;
	var result;
	var resultAr = SVMXI_MultiDimensionalArray(cProdStkAr.length,4); //Same Size as of Input Array
	for (var a=0; a<sSav_vProdStkAr.length ;a++) //Loop the Prod array and do PS Update/Create Serial's PS ID
	{
		resultAr[a][0] = true; //Status True/false
		resultAr[a][1] = sSav_vProdStkAr[a][0]; //Product Id
		resultAr[a][2] = sSav_vProdStkAr[a][3]; //Serial No
		resultAr[a][3] = ""; //Error Msg

		if (sSav_vProdStkAr[a][0] != "" && sSav_vProdStkAr[a][2] != "" && sSav_vProdStkAr[a][3] != "" ) //Validate ProdAr Item is not blank
		{
			var selProdId = sSav_vProdStkAr[a][0];
			var selFromPSID = sSav_vProdStkAr[a][1];				
			var selToPSID = sSav_vProdStkAr[a][2];				
			var selSN = sSav_vProdStkAr[a][3];				
			if (SVMXI_saveProdSerial(selProdId,selFromPSID,selToPSID,selSN) == false)
			{
				resultAr[a][0] = false; //Status True/false
				resultAr[a][3] = sSav_processLog; //Error Msg
				sSav_processLog = "";
			}
		}
		else 
		{ 
			resultAr[a][0] = false; //Status True/false
			resultAr[a][3] = SVMXI_sSel_GetMessage("MSG005"); //Error Msg
			sSav_processLog = "";
		}
	}
	return resultAr;
}
/*=============================================================================*/
function SVMXI_saveProdSerial(selProdId,selFromPSID,selToPSID,selSN) 
{	
	var result;
	var soql = "Select Id, Name " ;
		soql = soql + " From SVMXC__Product_Serial__c  ";
		soql = soql + " WHERE SVMXC__Product_Stock__c  = '" + selFromPSID + "'";
		soql = soql + " And Name = '" + selSN + "'";
	try
	{
		var qrPS = sforce.connection.query(soql); 
	} 
	catch(e) 
	{			
		SVMXI_sSav_PutProcessLog(SVMXI_sSel_GetMessage("MSG002")+e);
		result = false;
	}

	// Create or Update Prod-serial record
	var ps = new sforce.SObject("SVMXC__Product_Serial__c");
	if (qrPS && qrPS.size > 0) // Prod-Serial Record Already Exist UPDATE IT
	{ 
		var recsPS = qrPS.getArray("records"); 
	    ps.Id = recsPS[0].Id; // existing Records prod-serial ID
	    ps.SVMXC__Product_Stock__c   = selToPSID;
	    try {
		var ret = sforce.connection.update([ps]); 
		    result = true;
		}
	    catch(e) {        
			SVMXI_sSav_PutProcessLog(SVMXI_sSel_GetMessage("MSG001")+e);
		result = false;
	    }
	} 
	else // PS Record Not Exist so Create It
	{ 
	    ps.Name  = selSN;
	    ps.SVMXC__Product_Stock__c   = selToPSID;
		ps.SVMXC__Product__c   = selProdId;
	    ps.SVMXC__Active__c = "True";
	    try {
		var ret = sforce.connection.create([ps]); 
		if (ret[0].getBoolean("success")) 
                {
                                result = true;              
                } 
                else 
                {
                                alert(ret[0].errors.message);
                                result = false;;
                }
		    
		}
	    catch(e) {        		
			SVMXI_sSav_PutProcessLog(SVMXI_sSel_GetMessage("MSG001")+e);
		result = false;
	    }
	} 
	return result;
}
/*=============================================================================*/
function SVMXI_sSav_PutProcessLog(Msg) 
{ 
	if (sSav_processLog) { sSav_processLog += "\n"; } 
	sSav_processLog += Msg;
}

/*==================================== Stock Save=========================================*/
var skSav_processLog = "";
var skSav_vProd; //Stores Product Name/Details (Used in Email Body)
var skSav_vLocation; //Stores Location Name/Details (Used in Email body)
var skSav_vUser; // Stores User Name/deails 9Used in Email body)
var skSav_vProductId;
var skSav_vSiteID;
var skSav_vStatus;
var skSav_vTransactionQty;
var skSav_vTransactionType; //(RMA, Shipment, SVO Receipt, SVO Usage, Parts Receipt, Stock Transfer, Stock Adjustment)
var skSav_vTransactionNumber; 
var skSav_vChangeType;
var skSav_vHeaderRefId;
var skSav_vLineReferenceId;
var skSav_vUserId;
var skSav_vcurrdate; 
var skSav_vpsID; //Product Stock Id
var skSav_vpsQty; //Existing Qty/Before Qty
var skSav_vpsUpdQty; // Updated Qty /after qty (Could be negative, for sending in email notification etc)
var skSav_vemailToUserId; //Id of User who will get Notified..on Negative Stock
var skSav_vPrice; // To Store the Price of Given product
var skSav_vInvAcct = ""; // To store Inventory Account value from Site - for posting in Stk Hist
var skSav_resArray = new Array(5); 
var skSav_vIsoCurrCode; // to store IsoCode, extracting from CurrencyType
var skSav_vCurrId; // To Store CurrId froom CurrencyType
var skSav_vPriceBkId; // to store PriceBook2 Id, Matching with Default Settings give in ServiceMax Settings
var skSav_vDefPriceBk; // to store Default PriceBook as specified in ServeMax Settings
	
///*******************************************************************************************************//	
function SVMXI_DoStockUpdate(cProductId, cSiteID, cStatus, cTransactionQty, cTransactionType, cTransactionNumber, cChangeType, cHeaderRefId, cLineReferenceId, cUserId)
{
	var res;
	if (SVMXI_skSavGetServiceMaxSettings())		//By GM 23Jun08 method wasn't having '()' added now   
	    {
	    if (SVMXI_skSavIsValidProduct(cProductId))
		{
		if (SVMXI_skSavIsValidSite(cSiteID))
		    {
		    res = SVMXI_ProcessStockUpdate(cProductId, cSiteID, cStatus, cTransactionQty, cTransactionType, cTransactionNumber, cChangeType, cHeaderRefId, cLineReferenceId, cUserId) ;
		    }
		else 
		    res = false;
		}
	    else 
		res = false;
	    }
	else 
	    res = false;

	//Draw Result array
	skSav_resArray[0] = res;
	skSav_resArray[1] = skSav_vpsID;
	skSav_resArray[2] = parseFloat(skSav_vpsQty); //Before Qty
	if (parseFloat(skSav_vpsUpdQty) > 0) {skSav_resArray[3] = parseFloat(skSav_vpsUpdQty);} //after Qty
	else {skSav_resArray[3] = 0;}
	skSav_resArray[4] = skSav_processLog;

	return skSav_resArray;
}
///*******************************************************************************************************//	
function SVMXI_ProcessStockUpdate(cProductId, cSiteID, cStatus, cTransactionQty, cTransactionType, cTransactionNumber, cChangeType, cHeaderRefId, cLineReferenceId, cUserId) 
{	
	skSav_vcurrdate = new Date(); 
	skSav_vProductId = cProductId;
	skSav_vSiteID = cSiteID;
	skSav_vStatus = cStatus;
	skSav_vTransactionQty = parseFloat(cTransactionQty);
	skSav_vTransactionType = cTransactionType;
	skSav_vTransactionNumber = cTransactionNumber; 
	skSav_vChangeType =cChangeType;
	skSav_vHeaderRefId = cHeaderRefId;
	skSav_vLineReferenceId = cLineReferenceId;
	skSav_vUserId =cUserId;
	var soql = "Select Id,SVMXC__Quantity2__c,  SVMXC__Status__c, SVMXC__Product__c, SVMXC__Location__c " ;
		soql = soql + " From SVMXC__Product_Stock__c ";
		soql = soql + " WHERE SVMXC__Status__c = '" + skSav_vStatus + "'";
		soql = soql + " And SVMXC__Product__c = '" + skSav_vProductId + "'";
		soql = soql + " And SVMXC__Location__c = '" + skSav_vSiteID + "'";
	//SVMXI_PutProcessLog("Query: " + soql); 	
	try
	{
		var qrPS = sforce.connection.query(soql); 
	} 
	catch(e) 
	{			
		SVMXI_PutProcessLog(SVMXI_sSel_GetMessage("MSG002")+e);
	}
	if (qrPS && qrPS.size > 0) // PS Record Already Exist
	{ 
		var recsPS = qrPS.getArray("records"); 
		skSav_vpsID = recsPS[0].Id; 
		skSav_vpsQty = parseFloat(recsPS[0].SVMXC__Quantity2__c);
		skSav_vpsUpdQty = SVMXI_updPS(skSav_vpsID,skSav_vpsQty,skSav_vTransactionQty,skSav_vChangeType);
	} 
	else // PS Record Not Exist so Create It
	{ 
		var ps = new sforce.SObject("SVMXC__Product_Stock__c");
		skSav_vpsQty =0;
	    ps.SVMXC__Location__c  = skSav_vSiteID;
	    ps.SVMXC__Product__c  = skSav_vProductId;
	    ps.SVMXC__Status__c  = skSav_vStatus;
	    ps.SVMXC__Quantity2__c  = skSav_vpsQty;
	    try 
		{
				var ret = sforce.connection.create([ps]); 
				if (ret[0].getBoolean("success")) 
                {
                               // return ret[0].id;                
                } 
                else 
                {
                                alert(ret[0].errors.message);
                                //return null;
                }
				skSav_vpsID = ret[0].id;
				skSav_vpsUpdQty = SVMXI_updPS(skSav_vpsID,skSav_vpsQty,skSav_vTransactionQty,skSav_vChangeType);
		}
	    catch(e) {        		
			SVMXI_PutProcessLog(SVMXI_sSel_GetMessage("MSG001")+e);
		return false;
	    }
	} 

	//////////If the new quantity is less than zero GENERATE and SENT NOTIFICATION Email (To: as specified in Servicemax settings)
	if (skSav_vpsUpdQty < 0) 
	    {
	    var emailTo;	//Get Email id to Notify
	    var soqlSS = "Select SVMXC__Notify_on_Negative_Stock__c,SVMXC__Notify_on_Negative_Stock__r.Email  " ;
		    soqlSS = soqlSS + " From SVMXC__ServiceMax_Settings__c  ";
	    //SVMXI_PutProcessLog("Query: " + soql); 	
	    try
		{
			emailTo = "";
			var qrSS = sforce.connection.query(soqlSS); 
			if (qrSS.size > 0) // Notification Email Found
			    { 
			    var recsSS = qrSS.getArray("records"); 
			    if (recsSS[0].SVMXC__Notify_on_Negative_Stock__c)
				{
				emailTo = recsSS[0].SVMXC__Notify_on_Negative_Stock__r.Email; 
				skSav_vemailToUserId = recsSS[0].SVMXC__Notify_on_Negative_Stock__c;
				}
			    } 

			if (emailTo != "") // Code to send Email to ssNotifyEmail
			    {	
				var request = new sforce.SingleEmailMessage(); 
				var userEmail = sforce.connection.getUserInfo().userEmail;
				request.replyTo = userEmail;
				request.subject = "ServiceMax Negative stock alert!";
				request.toAddresses = emailTo; 
				var emailMsg;
				var vT;
				emailMsg = SVMXI_sSel_GetMessage("MSG012");
				//"The following transaction has resulted in a negative stock quantity. Please verify that your organization follows the necessary processes to maintain integrity of stock information in ServiceMax. If your organization is fully compliant with the process requirements, report this issue to ServiceMax support immediately.";			
				emailMsg = emailMsg + "\n" + "\n";

				if (SVMXI_getProductDetails(skSav_vProductId) == true &&
						SVMXI_getSiteDetails(skSav_vSiteID) == true &&
						    SVMXI_getUserDetails(skSav_vUserId) == true)
				    {
				    emailMsg = emailMsg + SVMXI_sSel_GetMessage("MSG015") + " " + skSav_vTransactionType + "\n"  ;
				    emailMsg = emailMsg + SVMXI_sSel_GetMessage("MSG016") + " " + skSav_vTransactionNumber + "\n"  ;
				    emailMsg = emailMsg + SVMXI_sSel_GetMessage("MSG017") + " " + skSav_vProd + "\n" ;  //Add Code to Get Prod Name/Details
				    emailMsg = emailMsg + SVMXI_sSel_GetMessage("MSG018") + " " + skSav_vLocation + "\n" ; // Add Code to get Site Name/Details
				    emailMsg = emailMsg + SVMXI_sSel_GetMessage("MSG019") + " " + skSav_vStatus + "\n"  ;
				    emailMsg = emailMsg + SVMXI_sSel_GetMessage("MSG020") + " " + skSav_vpsQty + "\n"  ;
				    emailMsg = emailMsg + SVMXI_sSel_GetMessage("MSG021") + " " + skSav_vTransactionQty + "\n"  ;
				    emailMsg = emailMsg + SVMXI_sSel_GetMessage("MSG022") + " " + skSav_vpsUpdQty + "\n"  ;
				    emailMsg = emailMsg + SVMXI_sSel_GetMessage("MSG023") + " " + skSav_vUser + "\n";
				    emailMsg = emailMsg + SVMXI_sSel_GetMessage("MSG024") + " " + skSav_vcurrdate + "\n";
				    //SVMXI_PutProcessLog("email Body: " + emailMsg);
				    request.plainTextBody = emailMsg;

				    var sendMailRes = sforce.connection.sendEmail([request]); 
				    var eResults = emailResults(sendMailRes);
				    }
				else
				    {						
				    SVMXI_PutProcessLog(SVMXI_sSel_GetMessage("MSG014"));							
				    return true; //By GM 23Jun08, On Email error countinue without error.	Changed False to TRUE
				    }
			    }
			else {				
			    SVMXI_PutProcessLog(SVMXI_sSel_GetMessage("MSG014"));
			    return true; //By GM 23Jun08, On Email error countinue without error. Changed False to TRUE
			    }
		}
	    catch(e) 
		{				
			SVMXI_PutProcessLog(SVMXI_sSel_GetMessage("MSG002")+e);
			return false;
		}
	    }// Send Email CLOSE	

	if (SVMXI_getPriceDetails(skSav_vProductId, skSav_vSiteID) == true)
	    {
	    if(SVMXI_updateProductStockCost() == true)
		{
		var shistRes = 	SVMXI_createStockHist(); 
		return shistRes;
		}
	    }
	else {	return false;	}
}
///*******************************************************************************************************//	
function SVMXI_getPriceDetails(prodId, siteId)
{
	var soqlCostAt = "Select SVMXC__Costed_at_value__c,SVMXC__Inventory_Account__c  from SVMXC__Site__c" ;
	soqlCostAt += " Where Id = '" + siteId + "'";
	try
	{
		var qrCost = sforce.connection.query(soqlCostAt); 
		if (qrCost.size > 0) 
		{ 
			var recsCost = qrCost.getArray("records"); 
			skSav_vInvAcct = recsCost[0].SVMXC__Inventory_Account__c ; //new Field added to SIte, should copy value to Stock-Hist
			if (recsCost[0].SVMXC__Costed_at_value__c == true || recsCost[0].SVMXC__Costed_at_value__c == "true")
			{
				var soqlPrice = "Select SVMXC__Product_Cost__c from Product2" ;
				soqlPrice += " Where Id = '" + prodId + "'";
				try
				{
					var qrPrice = sforce.connection.query(soqlPrice); 
					if (qrPrice.size > 0) 
					{ 
						var recsPrice = qrPrice.getArray("records"); 
						skSav_vPrice = recsPrice[0].SVMXC__Product_Cost__c;
						return true;
					} 
					else {skSav_vPrice = 0;return true;}
					} 
				catch(e) 
				{
					SVMXI_PutProcessLog(SVMXI_sSel_GetMessage("MSG002")+e);
					return false;
				}
			}
			else {skSav_vPrice = 0;return true;}
		} 
		else {skSav_vPrice = 0;return true;}
	} 
	catch(e) 
	{			
		SVMXI_PutProcessLog(SVMXI_sSel_GetMessage("MSG002")+e);
		return false;
	}
}	
///*******************************************************************************************************//	
function SVMXI_skSavIsValidSite(cSiteID)
{
	var soqlVS = "Select SVMXC__Stocking_Location__c   " ;
	soqlVS += " From SVMXC__Site__c   ";
	soqlVS += " where Id = '" + cSiteID  + "'";
	//soqlVS += " And SVMXC__Stocking_Location__c = true ";   //Non-stockable site  is NOT an error in Rel 2.0	Syed 04/30/2008
	// SVMXI_sSel_PutProcessLog("Query: " + soqlSS); 	
	try
	{
		var qrVS = sforce.connection.query(soqlVS); 
		if (qrVS.size > 0) // site is Valid -Stockable 
		{ 
			return true;
		} 
		else {return false;}
		}
	catch(e) 
	{			 
		 SVMXI_PutProcessLog(SVMXI_sSel_GetMessage("MSG002")+e);
		 return false;
	}
}	
///*******************************************************************************************************//	
function SVMXI_skSavIsValidProduct(cProductId)
{
	var soqlVP = "Select SVMXC__Stockable__c  " ;
	soqlVP += " From Product2  ";
	soqlVP += " where Id = '" + cProductId  + "'";
 //	soqlVP += " And SVMXC__Stockable__c = true ";	//Non-stockable  product is NOT an error in Rel 2.0   Syed 04/30/2008
	//alert(soqlVP);
	// SVMXI_sSel_PutProcessLog("Query: " + soqlSS); 	
	try
	{
		var qrVP = sforce.connection.query(soqlVP); 
		if (qrVP.size > 0) // Product is Valid -Trackiable 
		{ 
			return true;
		} 
		else {return false;}
		}
	catch(e) 
	{			 
		 SVMXI_PutProcessLog(SVMXI_sSel_GetMessage("MSG002")+e);
		 return false;
	}
}	
///*******************************************************************************************************//	
function SVMXI_skSavGetServiceMaxSettings()
{
	var soqlSS = "Select SVMXC__Enable_Inventory_Module__c, SVMXC__Enable_Serial_Tracking__c,SVMXC__Check_Serial_Uniqueness__c   " ;
	soqlSS += " From SVMXC__ServiceMax_Settings__c  ";
	// soqlSS += " where SVMXC__Enable_Inventory_Module__c = true"; HS Commented out 6/25/2009 not needed.
	// SVMXI_sSel_PutProcessLog("Query: " + soqlSS); 	
	try
	{
		var qrSS = sforce.connection.query(soqlSS); 
		if (qrSS.size > 0) // Settings Found
		{ 
			return true;
		} 
		else {return false;}
		}
	catch(e) 
	{
		 return false;
		 SVMXI_PutProcessLog(SVMXI_sSel_GetMessage("MSG002")+ e);
	}
}	
///*******************************************************************************************************//	
function SVMXI_updateProductStockCost()
{
	var prodStock = new sforce.SObject("SVMXC__Product_Stock__c");
	prodStock.Id  = skSav_vpsID ;
	prodStock.SVMXC__Product_Cost__c  = skSav_vPrice;
	try 
	{
	var ret = sforce.connection.update([prodStock]);         	
		return true;
	}
	catch(e) 
	{        	
		SVMXI_PutProcessLog(SVMXI_sSel_GetMessage("MSG001")+e);
	return false;
	}
}	
///*******************************************************************************************************//	
function SVMXI_createStockHist()
{
	var shist = new sforce.SObject("SVMXC__Stock_History__c");
	shist.SVMXC__Product__c  = skSav_vProductId ;
	shist.SVMXC__Location__c = skSav_vSiteID ;
	shist.SVMXC__Status__c  = skSav_vStatus ;
	shist.SVMXC__Transaction_Type__c  = skSav_vTransactionType ;
	shist.SVMXC__Quantity_before_change2__c  = parseFloat(skSav_vpsQty) ;
	shist.SVMXC__Transaction_Quantity2__c  = parseFloat(skSav_vTransactionQty) ;
	shist.SVMXC__Change_Type__c  = skSav_vChangeType ;
	shist.SVMXC__Quantity_after_change2__c  = parseFloat(skSav_vpsUpdQty) ;
//	shist.SVMXC__Date_Changed__c  = skSav_vcurrdate ;
    shist.SVMXC__Date_Changed__c  = SVMXI_GetCurrentTime();   // Updated on Feb 6,2009 by Syed
	shist.SVMXC__Changed_By__c  = skSav_vUserId ;
	shist.SVMXC__Cost__c  = skSav_vPrice ;
	shist.SVMXC__Currency__c  = skSav_vIsoCurrCode ;
	shist.SVMXC__Product_Stock__c  = skSav_vpsID ;
	shist.SVMXC__Inventory_Account__c  = skSav_vInvAcct;

	if (skSav_vTransactionType == "RMA" || skSav_vTransactionType == "RMA Receipt")
	{
		shist.SVMXC__RMA__c  = skSav_vHeaderRefId ;
		shist.SVMXC__RMA_Line__c  = skSav_vLineReferenceId ;
	}

	if (skSav_vTransactionType == "Shipment")
	{
		shist.SVMXC__Shipment__c  = skSav_vHeaderRefId ;
		shist.SVMXC__Shipment_Line__c  = skSav_vLineReferenceId ;
	}

	if (skSav_vTransactionType == "SVO Receipt" || skSav_vTransactionType ==  "SVO Usage")
	{
		shist.SVMXC__Service_Order__c  = skSav_vHeaderRefId ;
		shist.SVMXC__Service_Order_Line__c  = skSav_vLineReferenceId ;
	}

	if (skSav_vTransactionType == "Parts Receipt")
	{
		shist.SVMXC__Parts_Request__c  = skSav_vHeaderRefId ;
		shist.SVMXC__Parts_Request_Line__c  = skSav_vLineReferenceId ;
	}

	if (skSav_vTransactionType == "Stock Transfer")
	{
		shist.SVMXC__Stock_Transfer__c  = skSav_vHeaderRefId ;
		shist.SVMXC__Stock_Transfer_Line__c  = skSav_vLineReferenceId ;
	}

	if (skSav_vTransactionType == "Stock Adjustment")
	{
		shist.SVMXC__Stock_Adjustment__c   = skSav_vHeaderRefId ;		
	}

	if (parseFloat(skSav_vpsUpdQty) < 0 ) {shist.SVMXC__Negative_Stock__c   = true;}
	else {shist.SVMXC__Negative_Stock__c   = false;}
	shist.SVMXC__Notified_User__c    = skSav_vemailToUserId ;

	try 
	{
	var ret = sforce.connection.create([shist]);
	if (ret[0].getBoolean("success")) 
                {
                                return true;                
                } 
                else 
                {
                                alert(ret[0].errors.message);
                                return false;
                }
	//SVMXI_PutProcessLog("Transaction Added in Stock History Object: ");
	return true;
	}
	catch(e) 
	{        	
		SVMXI_PutProcessLog(SVMXI_sSel_GetMessage("MSG001")+e);
	return false;
	}
}	
///*******************************************************************************************************//	
function SVMXI_updPS(psId,psQty, psTransQty, psChgTyp)
{
	var retUpdQty = 0; //This could be Negative also, 'Send Negative'
	if (psChgTyp == "Increase"){retUpdQty = parseFloat(psQty) + parseFloat(psTransQty); }
	if (psChgTyp == "Decrease"){retUpdQty = parseFloat(psQty) - parseFloat(psTransQty); }
	if (psChgTyp == "Set"){retUpdQty = parseFloat(psTransQty); }
	// Update new Qty in PS
	var psUpd = new sforce.SObject("SVMXC__Product_Stock__c");
	psUpd.id  = psId;
	if (retUpdQty < 0 ) {psUpd.SVMXC__Quantity2__c  = 0 ;}
	else {psUpd.SVMXC__Quantity2__c  = retUpdQty;}
	try 
	{
	var ret = sforce.connection.update([psUpd]); 
	//SVMXI_PutProcessLog("Updated PS Qty: ");
	}
	catch(e) 
	{        	
		SVMXI_PutProcessLog(SVMXI_sSel_GetMessage("MSG001")+e);
	}
	skSav_vpsID = ret[0].id;
	//if(psTransQty == 0) {return 0;}
	return retUpdQty;
}	
///*******************************************************************************************************//	
function SVMXI_getUserDetails(userId)
{
	var soqlUser = "Select Name from User " ;
	soqlUser = soqlUser + " Where Id = '" + userId + "'";
	//SVMXI_PutProcessLog("Query: " + soqlUser); 	
	try
		{
			var qrUser = sforce.connection.query(soqlUser); 
			if (qrUser.size > 0) 
			{ 
				var recsUser = qrUser.getArray("records"); 
				skSav_vUser = recsUser[0].Name; 
				return true;
			} 
			else {skSav_vUser = "";return true;}
		} 
		catch(e) 
		{				
			SVMXI_PutProcessLog(SVMXI_sSel_GetMessage("MSG002")+e);
			return false;
		}
}	
///*******************************************************************************************************//	
function SVMXI_getProductDetails(prodId)
{
	var soqlProd = "Select Name from Product2 " ;
	soqlProd = soqlProd + " WHERE Id = '" + prodId + "'";
	//SVMXI_PutProcessLog("Query: " + soqlProd); 	
	try
		{
			var qrProd = sforce.connection.query(soqlProd); 
			if (qrProd.size > 0) 
			{ 
				var recsProd = qrProd.getArray("records"); 
				skSav_vProd = recsProd[0].Name; 
				return true;
			} 
			else {skSav_vProd = "";return true;}
		} 
		catch(e) 
		{				
			SVMXI_PutProcessLog(SVMXI_sSel_GetMessage("MSG002")+e);
			return false;
		}
}	
///*******************************************************************************************************//	
function SVMXI_getSiteDetails(siteId)
{
	var soqlSite = "Select Name from SVMXC__Site__c " ;
	soqlSite = soqlSite + " WHERE Id = '" + siteId + "'";
	//SVMXI_PutProcessLog("Query: " + soqlSite); 	
	try
		{
			var qrSite = sforce.connection.query(soqlSite); 
			if (qrSite.size > 0) 
			{ 
				var recsSite = qrSite.getArray("records"); 
				skSav_vLocation = recsSite[0].Name; 
				return true;
			} 
			else {skSav_vLocation = ""; return true;}

		} 
		catch(e) 
		{				
			SVMXI_PutProcessLog(SVMXI_sSel_GetMessage("MSG002")+e);
			return false;
		}
}	
///*******************************************************************************************************//	
function emailResults(sendEmailResult) 
{ 
	if (sendEmailResult.length > 0) {
		if (sendEmailResult[0].getBoolean("success")) {	SVMXI_PutProcessLog(""); return true;} //Notification E-mail sent
		else {	SVMXI_PutProcessLog(SVMXI_sSel_GetMessage("MSG013")); return true;} //By GM23Jun08 Changed False to TRUE
	} 
	else { SVMXI_PutProcessLog(SVMXI_sSel_GetMessage("MSG013"));	return true;} //By GM23Jun08 Changed False to TRUE
}
///*******************************************************************************************************//	
function SVMXI_PutProcessLog(Msg) 
{ 
	if (skSav_processLog) { skSav_processLog += "\n"; } 
	skSav_processLog += Msg;
}
/*=============================================================================*/
function SVMXI_GetDocumentId(docName)
{
	var soqlDoc = "Select Id,Name From Document" ;
	soqlDoc = soqlDoc + " Where Name = '" + docName + "'";
	var qrDoc = sforce.connection.query(soqlDoc); 
	if (qrDoc.size > 0) 
	{ 
			var recs = qrDoc.getArray("records"); 
			return recs[0].Id; 
	} 
	else { return ""; }
}

var ApiSessionId;
/*==================================== Serial Number Selection =========================================*/
var sSel_ProdQtyAr; //Array has, Prod, Qty, FromSite, SromStatus, ToSite,To Status
var sSel_TransactionType;
var sSel_TransactionNumber; 
var sSel_UserId ;
var sSel_DocId;
var sSel_openWinHdl;
var sSel_MsgList = new Array();

// Calling Method - This will Launch Generic Utility for Serial Number selection
function SVMXI_DoSerialSelection(cProdQtyAr, cTransactionType, cTransactionNumber, cUserId, cApiSessionId)
{
	sSel_DocId =  SVMXI_GetDocumentId("SVMXI_Serial_Selection_Utility") ; 
	sSel_ProdQtyAr = cProdQtyAr;
	sSel_TransactionType = cTransactionType;
	sSel_TransactionNumber =cTransactionNumber; 
	sSel_UserId =cUserId;
	ApiSessionId = cApiSessionId;
	SVMXI_sSel_InitMessageList("SSELSC1");
	SVMXI_sSel_ProcessSerialSelection(sSel_ProdQtyAr, sSel_TransactionType, sSel_TransactionNumber, sSel_UserId) 
}
/*=============================================================================*/
function SVMXI_sSel_SerialSelectionResults(resultAr, transType)
{
	// Callback Function, would be called on Submit/cancel in serial-Selection 
	//Based on transaction type, Result will be Forwaded
	//transType: RMA, Shipment, SVO Receipt, SVO Usage, Parts Receipt, Stock Transfer, Stock Adjustment)
	//resultAr[0]: true/false; resultAr[1]:RecordCount; resultAr[2]: ProdArray
	if (sSel_openWinHdl) {sSel_openWinHdl.close();}
	switch(transType)
		{
		case "RMA":
		  SVMXI_Callback_ProcessPRReceipts(resultAr[0],resultAr[1],resultAr[2]);
		  break;    
		case "RMA Receipt":
		  SVMXI_Callback_ProcessRMAReceipts(resultAr[0],resultAr[1],resultAr[2]);
		  break;    
		case "Shipment":
		  SVMXI_Callback_ProcessShipment(resultAr[0],resultAr[1],resultAr[2]);
		  break;    
		case "SVO Receipt":
		  SVMXI_Callback_ProcessSVOReceipts(resultAr[0],resultAr[1],resultAr[2]);
		  break;    
		case "SVO Usage":
		  SVMXI_Callback_PostSVOUsage(resultAr[0],resultAr[1],resultAr[2]);
		  break;    
		case "Parts Receipt":
		  SVMXI_Callback_ProcessPRReceipts(resultAr[0],resultAr[1],resultAr[2]);
		  break;    
		case "Stock Transfer":
		  SVMXI_Callback_StockTransfer(resultAr[0],resultAr[1],resultAr[2]);
		  break;    
		case "Stock Adjustment":
		  SVMXI_Callback_StockAdjustment(resultAr[0],resultAr[1],resultAr[2]);
		  break;    
		default:
		}
}
//*******************************************************************************************//
var sSel_processLog = "";
var vProdQtyAr;
var vUser; // Stores User Name/deails 
var vProd; // Stores product Name/deails 
var vTransactionType; //(RMA, Shipment, SVO Receipt, SVO Usage, Parts Receipt, Stock Transfer, Stock Adjustment)
var vTransactionNumber; 
var vUserId;
var vcurrdate; 
var resDetailAr = new Array(); // This would be one of the return item in result array
var resArray = new Array(4); //Result Array (Output) , this would be one return object to calling method
var vEnInventory; // to store INVENTORY MODULE is Enabled or NOT
var vEnSerialTracking; // to store Serial No Tracking is Enabled or Not
var vEnSerialUniqueness; // To store: Type of Serial No Uniqueness enforced 
var resStatus = false;
var vRecCount;
var validProdAr; //Array of Valid Serialize Prducts -Filled in run-time
var atleastOneValidProdFound; 
var	selProdId; // to store selected prod
var selProdQty; // To store sel product qty
var selFromSiteID;
var selFromStatus;
var selFromPSID =""; //Find and store S id in this var, Used while returning results
var selToSiteID;
var selToStatus;
var selToPSID =""; //Find and Store in this Var, Used while returning results
var fromSerials;
var toSerials;
var selValidProdIndex; //to store the Index of Displayed Product
var excQtyErrDisplayed = false; // To Track err should be display only once on multiple Moves/ quick-Add of SN 
var vErr =""; //to Store the Err Msg on Serial No Uniqueness
var vErrList =""; //to Store details of Line Items (Sno -Duplicates)
var vQtyErr ="";
var vQtyErrList = "";
var totSNreq = 0;
var lastDrawnIndex;
var vApiSessionId;
///*******************************************************************************************************//	
function SVMXI_sSel_ProcessSerialSelection(cProdQtyAr, cTransactionType, cTransactionNumber, cUserId) 
{
    vcurrdate = new Date(); 
    vProdQtyAr = cProdQtyAr;
    vTransactionType = cTransactionType;
    vTransactionNumber = cTransactionNumber; 
    vUserId =cUserId;
    totSNreq = 0;
    //loop Input Array and calc total SN req.
    for (var a=0; a<vProdQtyAr.length; a++)
    {
	    if (vProdQtyAr[a][1]) {	totSNreq +=   parseInt(vProdQtyAr[a][1]);}
    }
    toSerials = SVMXI_MultiDimensionalArray(parseInt(totSNreq),3);
    isFirstTimeDrawn = false;


    if (SVMXI_sSel_getServiceMaxSettings() == true)
	{
	if ( vEnInventory == "false" || vEnSerialTracking == "false" ) //Check if Inventory Module & SerialTracking is enabled
	    {					
	    SVMXI_sSel_PutProcessLog(SVMXI_sSel_GetMessage("MSG003"));
	    SVMXI_sSel_buildResultArray(false);
	    //return true;
	    }
	else //Initiate Serial Selection
	    {
	    if ( SVMXI_sSel_validateInputs() == true)
		{
		if (atleastOneValidProdFound == false) 
		    { 						
		    SVMXI_sSel_PutProcessLog(SVMXI_sSel_GetMessage("MSG004"));
		    SVMXI_sSel_buildResultArray(false); 
		    }
		else 
		    {
		    var lenFromSN =0; //Defining Size of From Serial
		    for (var z=0; z<validProdAr.length;z++)
			{				
			if(validProdAr[z][0] != "")
			    {
			    lenFromSN += parseInt(SVMXI_sSel_getFromSNcount(validProdAr[z][0],validProdAr[z][3],validProdAr[z][2])); 
			    }
			}
			fromSerials =  SVMXI_MultiDimensionalArray(lenFromSN,2);						
			//// Extract serial Nos for All Products in ValidArray and Draw page.
			for (var z=0; z<validProdAr.length;z++)
			    {
			    selProdId = validProdAr[z][0]; //Product in Valid Array 
			    selProdQty = validProdAr[z][1]; //Product's Quantity in Valid Array 
			    selFromSiteID = validProdAr[z][2];
			    selFromStatus = validProdAr[z][3];
			    selToSiteID = validProdAr[z][4];
			    selToStatus = validProdAr[z][5];						
			    if (validProdAr[z][0] != "")
				{
				SVMXI_sSel_checkIfExistInPS(validProdAr[z][0],validProdAr[z][3],validProdAr[z][2]) //(selProdId,selFromStatus,selFromSiteID); 		////get current stock in From Site and From Status (SVMXC__Quantity2__c from SVMXC__Product_Stock__c). 
				}
			    }
			selValidProdIndex = 0;
			selProdId = validProdAr[selValidProdIndex][0]; //Product in Valid Array 
			selProdQty = validProdAr[selValidProdIndex][1]; //Product's Quantity in Valid Array 
			selFromSiteID = validProdAr[selValidProdIndex][2];
			selFromStatus = validProdAr[selValidProdIndex][3];
			selToSiteID = validProdAr[selValidProdIndex][4];
			selToStatus = validProdAr[selValidProdIndex][5];
			isFirstTimeDrawn = true;						
			if (totSNreq > 0) //Launch New Window - if req SN count are more than ZERO
			    {
			    sSel_openWinHdl = window.open ("/servlet/servlet.FileDownload?file=" + sSel_DocId ,"selserial","status=yes, location=no, toolbar=no, directories=no, resizable=yes, width=650, height=600, scrollbars=yes");
			    }
			else {SVMXI_sSel_buildResultArray(false);}
		    }
		}
	    else 
		{ 
		//SVMXI_sSel_PutProcessLog("Error in Given Input Parameters!"); 
		SVMXI_sSel_PutProcessLog(SVMXI_sSel_GetMessage("MSG005"));
		SVMXI_sSel_buildResultArray(false);
		}		
	    }
	}
    else 
	{ 			
	SVMXI_sSel_buildResultArray(false);
	}		
}
///*******************************************************************************************************//	
function SVMXI_sSel_getFromSNcount(prodId, st, site)
{
	var soql = "Select Id, Name, SVMXC__Product_Stock__c  " ;
	soql = soql + " From SVMXC__Product_Serial__c ";
	soql = soql + " WHERE SVMXC__Product_Stock__r.SVMXC__Status__c = '" + st + "'";
	soql = soql + " And SVMXC__Product_Stock__r.SVMXC__Product__c = '" + prodId + "'";
	soql = soql + " And SVMXC__Product_Stock__r.SVMXC__Location__c = '" + site + "'";
	// SVMXI_sSel_PutProcessLog("Query: " + soql); 	
	try
	{
		var qrPS = sforce.connection.query(soql); 
		if (qrPS && qrPS.size > 0) // PS Record Exist
		{ 
			return qrPS.size;
		} 
		else { return 0; } //// PS Record Not Exist
	} 
	catch(e) 
	{
		 SVMXI_sSel_PutProcessLog(SVMXI_sSel_GetMessage("MSG002")+e);
		 sSel_openWinHdl.SVMXI_sSel_showErrorLog();
	}
}
///*******************************************************************************************************//	
function SVMXI_sSel_checkIfExistInPS(prodId, st, site)
{
	var soql = "Select Id,SVMXC__Quantity2__c,  SVMXC__Status__c, SVMXC__Product__c, SVMXC__Location__c " ;
	soql = soql + " From SVMXC__Product_Stock__c ";
	soql = soql + " WHERE SVMXC__Status__c = '" + st + "'";
	soql = soql + " And SVMXC__Product__c = '" + prodId + "'";
	soql = soql + " And SVMXC__Location__c = '" + site + "'";
	// SVMXI_sSel_PutProcessLog("Query: " + soql); 	
	try
	{
		var qrPS = sforce.connection.query(soql); 
		if (qrPS && qrPS.size > 0) // PS Record Already Exist
		{ 
			var recsPS = qrPS.getArray("records"); 
			fromProdIdInPS = recsPS[0].Id; 
			fromProdInPSqty = recsPS[0].SVMXC__Quantity2__c; 
			//if (fromProdInPSqty > 0 ) // Record found in PS and Has Qty: Get Serial No Array Filled
			//{
				var getSN =  SVMXI_sSel_getExistingSerial(fromProdIdInPS,prodId) //fromProdIdInPS: Id Is of corresponding Rec found in PS
			//}
			//isFromProdExistInPS = true;
		} 
	} 
	catch(e) 
	{
		 SVMXI_sSel_PutProcessLog(SVMXI_sSel_GetMessage("MSG002")+e);
		 sSel_openWinHdl.SVMXI_sSel_showErrorLog();
	}
}
///*******************************************************************************************************//	
var snCount = 0;//To Store total Found SN for all valid prods
function SVMXI_sSel_getExistingSerial(psId,prodId)
{
	var soqlSN = "Select Name From SVMXC__Product_Serial__c" ;
	soqlSN = soqlSN + " Where SVMXC__Product_Stock__c = '" + psId + "'";
	// SVMXI_sSel_PutProcessLog("Query: " + soqlSN); 	
	//alert(soqlSN);
	try
		{
			var qrSN = sforce.connection.query(soqlSN); 
			if (qrSN.size > 0) 
			{ 
				var recsSN = qrSN.getArray("records"); 
				for (var k=0; k < qrSN.size; k++)
				{
					fromSerials[snCount][0] = prodId;
					fromSerials[snCount][1] = recsSN[k].Name;
					snCount++;
					//fromSerials[k][2] = psId;
					//fromSerials.push(recsSN[k].Name); 
				}
				return true;
			} 
			else {return true;}
		} 
		catch(e) 
		{				 
			 SVMXI_sSel_PutProcessLog(SVMXI_sSel_GetMessage("MSG002")+e);
			 sSel_openWinHdl.SVMXI_sSel_showErrorLog();
		}

}
///*******************************************************************************************************//	
function SVMXI_sSel_isSerializedProd(prodId)
{
	var soqlProd = "Select Name,SVMXC__Enable_Serialized_Tracking__c   from Product2 " ;
	soqlProd = soqlProd + " WHERE Id = '" + prodId + "'";
	soqlProd = soqlProd + " And SVMXC__Enable_Serialized_Tracking__c = true";

	// SVMXI_sSel_PutProcessLog("Query: " + soqlProd); 	
	try
	{
		var qrProd = sforce.connection.query(soqlProd); 
		if (qrProd.size > 0) 
		{ 
			return true; 
		}
		else {return false;}
	} 
	catch(e) 
	{			 
		 SVMXI_sSel_PutProcessLog(SVMXI_sSel_GetMessage("MSG002")+e);
		 sSel_openWinHdl.SVMXI_sSel_showErrorLog();
	}
}
///*******************************************************************************************************//	
var toSNcount =0;
function SVMXI_sSel_validateSN(val,snEntryType) //Logic to validate he given Serial No UNIQUENESS
{	
	if( SVMXI_sSel_ifExceedTheQty() == false) // logic to verify if excess SN are not selected than required for each product and same is not added Twice
	{
		if ( SVMXI_sSel_uniqnessCheckOneSN(val) == true)
		{
			toSerials[toSNcount][0] = selProdId;			
			toSerials[toSNcount][1] = val;
			toSerials[toSNcount][2] = snEntryType;
			toSNcount++;
			return true;
		}
		else {return false;}
	}
	else if (excQtyErrDisplayed == false) //For each Prod once, as Quick-Add can launch multile addition
		 {
			sSel_openWinHdl.alert(SVMXI_sSel_GetMessage("MSG006"));
			excQtyErrDisplayed = true;
			return false;
		 } 
}
///*******************************************************************************************************//	
var sSel_SoftUniqErr1 = "";
var sSel_SoftUniqErrList1 = "";
var vErr1 = "";
function SVMXI_sSel_uniqnessCheckOneSN(sn) //Logic to validate the given Serial No UNIQUENESS
{	
var result = true;
for (var b=0; b<toSerials.length;b++) //loop toSerial and run uniquenesscheck for each sn 
{
	if (toSerials[b][0] != "" && toSerials[b][1] != "")
	{
		var res =  SVMXI_sSel_ifItemExistInArray(sn);
		if ( res == false ) {}//if Duplicate Sno NOT Found do nothing
		else //Duplicate Sno Found
		{
			if (vEnSerialUniqueness == "Strict" ) //ServiceMax Settings for Uniqueness Check
			{
				vErr1 = SVMXI_sSel_GetMessage("MSG007")+"\n"; 
				vErr1 += SVMXI_sSel_GetMessage("MSG008") + sn + "\n"; // + " {" + SVMXI_sSel_getProductDetails(selProdId) + "} \n";
				result = false;	
			}
			if (vEnSerialUniqueness == "Soft" )
			{
				sSel_SoftUniqErr1 = SVMXI_sSel_GetMessage("MSG009")+"\n"; 
				result = true;	
			}
				if (vEnSerialUniqueness == "None" || vEnSerialUniqueness == "" || vEnSerialUniqueness == null || vEnSerialUniqueness.length < 1)
				{
					result = true;	
				}
			}
		}//If Close :toSerial Array
	}//For Close -toSerial Array

	if (vErr1.length > 0){sSel_openWinHdl.alert(vErr1);}
	return result;
}
///*******************************************************************************************************//	
function SVMXI_sSel_buildResultArray(res) //Logic to validate the given Serial No UNIQUENESS
{	
	var resultAr = new Array();
	if(res != null)
	{
		prodResultAr =  SVMXI_MultiDimensionalArray(parseInt(totSNreq),8);
		var validRecInAr =0;
		for (var j=0; j<toSerials.length;j++) //loop toSerial for each valid entry in array
		{
			if(toSerials[j][0] != "")
			{
				validRecInAr++
			}
		}		
		var pId = "";
		var currPID ="";
		var r =0; //result Count
		if (res == true)
		{ 
			for (var j=0; j<toSerials.length;j++) //loop toSerial for each selected sn 
			{
				if(toSerials[j][0] != "" && toSerials[j][1] != "")
				{
					pId = toSerials[j][0];
					if (pId != currPID) //To enforce, PSID retrival should happen only ONCE for each product in array
					{	
						currPID = pId;
						//find from & To:  Site , Status from valid prod arr
						for (var x=0; x<validProdAr.length;x++) //loop toSerial for each selected sn 
						{
							if(currPID == validProdAr[x][0])
							{
								selFromSiteID = validProdAr[x][2];
								selFromStatus = validProdAr[x][3];
								selToSiteID = validProdAr[x][4];
								selToStatus = validProdAr[x][5];
							}
						}
						selFromPSID =  SVMXI_sSel_getPSIDIfExist(currPID,selFromStatus,selFromSiteID);
						selToPSID =  SVMXI_sSel_getPSIDIfExist(currPID,selToStatus,selToSiteID);
					}
					prodResultAr[r][0] = toSerials[j][0]; //ProductId
					prodResultAr[r][1] = selFromSiteID; 
					prodResultAr[r][2] = selFromStatus; 
					prodResultAr[r][3] = selFromPSID;
					prodResultAr[r][4] = selToSiteID; 
					prodResultAr[r][5] = selToStatus; 
					prodResultAr[r][6] = selToPSID;
					prodResultAr[r][7] = toSerials[j][1]; //sn no
					r++;
				}
			}		
			resultAr[0] = res; // True/false
			resultAr[1] = validRecInAr; //Record count of total number of serials selected for save			
			resultAr[2] = prodResultAr;
		}
		else // Return TRUE with count Zero
		{
			resultAr[0] = true; // True/false
			resultAr[1] = 0; //Record count of total number of serials selected for save ZERO
			resultAr[2] = sSel_processLog;
		}
	}
	else
	{
		resultAr[0] = false; // True/false if Window Canceled than Send FALSE
		resultAr[1] = 0; //Record count of total number of serials selected for save ZERO
		resultAr[2] = "Cancelled";
	}

	 SVMXI_sSel_SerialSelectionResults(resultAr,vTransactionType); // this Method MUST be available in Calling-Client, On Submit/Cancel btn click in Serial-Utilit THIS will be called 
		//alert("Result:\n" + resultAr.toString() );
		//window.close();
		//return "Success";
}
///*******************************************************************************************************//	
function SVMXI_sSel_uniqnessCheckAllSN() //Logic to validate he given Serial No UNIQUENESS
{	
	var result = true;
	for (var a=0; a<validProdAr.length;a++) //Loop Valid Products array and run Uniquness check for each prod
	{
		if (validProdAr[a][0] != "")
		{
			var prodId = validProdAr[a][0];
			for (var b=0; b<toSerials.length;b++) //loop toSerial and run uniquenesscheck for each sn 
			{
				if (toSerials[b][0] != "" && toSerials[b][0] == prodId && toSerials[b][1] != "")
				{
					var sn = toSerials[b][1];
					if (SVMXI_sSel_ifSNisDuplicate(sn,prodId)) //if Duplicate Sno Found
					{
						if (vEnSerialUniqueness == "Strict" ) //ServiceMax Settings for Uniqueness Check
						{
							vErr = SVMXI_sSel_GetMessage("MSG007")+"\n"; 
							vErrList += SVMXI_sSel_GetMessage("MSG008")+ sn + " {" +  SVMXI_sSel_getProductDetails(prodId) + "} \n";
							result = false;	
						}
						if (vEnSerialUniqueness == "Soft" )
						{
							vErr = SVMXI_sSel_GetMessage("MSG009")+"\n"; 
							vErrList += SVMXI_sSel_GetMessage("MSG008") + sn + " {" +  SVMXI_sSel_getProductDetails(prodId) + "} \n";
							result = true;	
						}
						if (vEnSerialUniqueness == "None" || vEnSerialUniqueness == "" || vEnSerialUniqueness == null || vEnSerialUniqueness.length < 1)
						{
							result = true;	
						}
					}
				}//If Close :toSerial Array
			}//For Close -toSerial Array
		} //IF Close -Valid prod array
	}//For close : valid prod Array

	return result;
}
///*******************************************************************************************************//	
function SVMXI_sSel_ifSNisDuplicate(sNo, prodId)
{
	//Check if the combination of serial number and product number is present in SVMXI_Product_Serial__c object
	var soqlSN = "Select Name, SVMXC__Product__c, SVMXC__Product_Stock__c," ;
	soqlSN += " SVMXC__Product_Stock__r.SVMXC__Location__c,SVMXC__Product_Stock__r.SVMXC__Status__c";
	soqlSN += " from SVMXC__Product_Serial__c " ;
	soqlSN += " Where SVMXC__Product__c = '" + prodId + "'"; 
	soqlSN += " And Name = '" + sNo + "'";
	soqlSN += " And SVMXC__Product_Stock__r.SVMXC__Status__c != 'Scrap' ";
	soqlSN += " And SVMXC__Product_Stock__r.SVMXC__Location__c != '" + selFromSiteID + "'";
	// SVMXI_sSel_PutProcessLog("Query: " + soqlSN); 	
	try
		{
			var qrSN = sforce.connection.query(soqlSN); 
			if (qrSN.size > 0) 
			{ 
				//Duplicate found 
				return true; 
			}
			else {return false;}
		} 
		catch(e) 
		{
			 SVMXI_sSel_PutProcessLog(SVMXI_sSel_GetMessage("MSG002")+ e);
			 sSel_openWinHdl.SVMXI_sSel_showErrorLog();
		}
}
///*******************************************************************************************************//	
function SVMXI_sSel_validateSelSNqty() // This Checks for All products in Valid Array
{
	var result = true;
	//Loop Valid Products array and find Check Req SN qty is provided
	for (var a=0; a<validProdAr.length;a++)
	{
		if (validProdAr[a][0] != "")
		{
			//1.check if the number of serial numbers entered matches the received quantity for all products
			var prod = validProdAr[a][0];
			var reqSNcount  = validProdAr[a][1]; //for Select Product 
			var selSNcount = 0;

			for (var z=0; z<toSerials.length;z++)
			{
				if (toSerials[z][0] == prod && toSerials[z][1] != ""){ selSNcount++;}
			}
			if (selSNcount != reqSNcount ) 
			{
				vQtyErr = SVMXI_sSel_GetMessage("MSG010");	//"The number of serial numbers you entered does not match the received quantity.";
				vQtyErrList += SVMXI_sSel_GetMessage("MSG011") + ' ' + SVMXI_sSel_getProductDetails(prod) + "\n";
				result = false;
			}
		}			
	}		
	return result;
}
///*******************************************************************************************************//	
function SVMXI_sSel_ifExceedTheQty() //This checks For Selected product ONLY
{
	//Add Logic to verify the selected count of SN against Qty
	var reqSNcount  = validProdAr[selValidProdIndex][1]; //for Select Product 
	var selSNcount =0;
	for (var z=0; z<toSerials.length;z++)
	{
		if (toSerials[z][0] == selProdId && toSerials[z][1] != ""){ selSNcount++;}
	}
	if (selSNcount < reqSNcount ) {return false;} //Not exceeded
	else {return true;} //exceed the allowed limit
}

///*******************************************************************************************************//	
function SVMXI_sSel_ifItemExistInArray(valToFind)
{
	var result = false;
	var ar = toSerials;
	for (var z=0; z<ar.length;z++)
	{
		if (ar[z][1] == valToFind ) //ar[z][0] == selProdId && 
		{ 
		result = true;
		}
	}
	return result;
}

///*******************************************************************************************************//	
function SVMXI_sSel_validateInputs()
{
	atleastOneValidProdFound = false;
	var x =0;
	for (var i=0; i<vProdQtyAr.length; i++) 
	    {	
	    if (vProdQtyAr[i][0].toString() != "")
		{
		if (SVMXI_sSel_isSerializedProd(vProdQtyAr[i][0]) == true)
		    {
		    atleastOneValidProdFound = true;
		    x = x+1;
		    }
		}
	    }

		////For each product in the input array,check if SVMXC__Serialized_Tracking__c is true in Product2 object
	validProdAr =  SVMXI_MultiDimensionalArray(x, 6); 
	x=0;
	for (var i=0; i<vProdQtyAr.length; i++) 
	    {
	    if (vProdQtyAr[i][0].toString() != "")
		{
		if ( SVMXI_sSel_isSerializedProd(vProdQtyAr[i][0]) == true) ////Push Valid Serialized product to new array.
		    {
		    validProdAr[x][0] = vProdQtyAr[i][0];
		    validProdAr[x][1] = parseInt(vProdQtyAr[i][1]);
		    validProdAr[x][2] = vProdQtyAr[i][2];
		    validProdAr[x][3] = vProdQtyAr[i][3];
		    validProdAr[x][4] = vProdQtyAr[i][4];
		    validProdAr[x][5] = vProdQtyAr[i][5];
		    x = x+1;
		    }
		}
	    }
	///// FROM //Check if a record exists for the given product, to site and to status combination in SVMXC__Product_Stock__c object
	//var vFromPSID =  SVMXI_sSel_getPSIDIfExist(prodId,vFromStatus,vFromSiteID);

	///// TO //Check if a record exists for the given product, from site and from status combination in SVMXC__Product_Stock__c object
	//var vToPSID =  SVMXI_sSel_getPSIDIfExist(prodId,vToStatus,vToSiteID);

	return true;			
}
///*******************************************************************************************************//	
function SVMXI_sSel_getServiceMaxSettings()
{
	var soqlSS = "Select SVMXC__Enable_Inventory_Module__c, SVMXC__Enable_Serial_Tracking__c,SVMXC__Check_Serial_Uniqueness__c   " ;
	soqlSS = soqlSS + " From SVMXC__ServiceMax_Settings__c  ";
		// SVMXI_sSel_PutProcessLog("Query: " + soqlSS); 	
		try
		{
			var qrSS = sforce.connection.query(soqlSS); 
			if (qrSS.size > 0) // Settings Found
			{ 
				var recsSS = qrSS.getArray("records"); 
				vEnInventory = recsSS[0].SVMXC__Enable_Inventory_Module__c; 
				vEnSerialTracking = recsSS[0].SVMXC__Enable_Serial_Tracking__c;
				vEnSerialUniqueness = recsSS[0].SVMXC__Check_Serial_Uniqueness__c;
				return true;
			} 
			else {vEnInventory = false; vEnSerialTracking = false; vEnSerialUniqueness = false; return true;}
		}
		catch(e) 
		{
			SVMXI_sSel_PutProcessLog(SVMXI_sSel_GetMessage("MSG002")+e);
			 sSel_openWinHdl.SVMXI_sSel_showErrorLog();
		}
}	
///*******************************************************************************************************//	
function SVMXI_sSel_isSNInFromList(newSN) //This checks For Select product ONLY
{
	var result = false;
	for (var z=0; z<fromSerials.length;z++)
	{
		if ((fromSerials[z][1] == newSN) && (fromSerials[z][0] != "") && (fromSerials[z][1] != ""))
		{ 
			result = true; //newSN already exists in FromSerials List
		}
	}
	return result; 
}
///*******************************************************************************************************//	
function SVMXI_sSel_getPSIDIfExist(prodId, st, site)
{
	var soql = "Select Id,SVMXC__Quantity2__c,  SVMXC__Status__c, SVMXC__Product__c, SVMXC__Location__c " ;
	soql = soql + " From SVMXC__Product_Stock__c ";
	soql = soql + " WHERE SVMXC__Status__c = '" + st + "'";
	soql = soql + " And SVMXC__Product__c = '" + prodId + "'";
	soql = soql + " And SVMXC__Location__c = '" + site + "'";
	// SVMXI_sSel_PutProcessLog("Query: " + soql); 	
	var result = "";
	try
	{
		var qrPS = sforce.connection.query(soql); 
		if (qrPS && qrPS.size > 0) // PS Record Already Exist
		{ 
			var recsPS = qrPS.getArray("records"); 
			result = recsPS[0].Id; 
		} 
		else { result = ""; } //// PS Record Not Exist
	return result;
	} 
	catch(e) 
	{
		 SVMXI_sSel_PutProcessLog(SVMXI_sSel_GetMessage("MSG002")+ e); 
		 sSel_openWinHdl.SVMXI_sSel_showErrorLog();
	}
}
///*******************************************************************************************************//	
function SVMXI_sSel_getProductDetails(prodId)
{
	var soqlProd = "Select Name from Product2 " ;
	soqlProd = soqlProd + " WHERE Id = '" + prodId + "'";
	// SVMXI_sSel_PutProcessLog("Query: " + soqlProd); 	
	try
		{
			var qrProd = sforce.connection.query(soqlProd); 
			if (qrProd.size > 0) 
			{ 
				var recsProd = qrProd.getArray("records"); 
				vProd = recsProd[0].Name; 
				return vProd;
			} 
			else {vProd = "";return vProd;}
		} 
		catch(e) 
		{
			 SVMXI_sSel_PutProcessLog(SVMXI_sSel_GetMessage("MSG002") + e);
			 sSel_openWinHdl.SVMXI_sSel_showErrorLog();
		}
}	
///*******************************************************************************************************//	
function SVMXI_sSel_getSiteDetails(siteId)
{
	var soqlSite = "Select Name from SVMXC__Site__c " ;
	soqlSite = soqlSite + " WHERE Id = '" + siteId + "'";
	// SVMXI_sSel_PutProcessLog("Query: " + soqlSite); 	
	try
		{
			var qrSite = sforce.connection.query(soqlSite); 
			if (qrSite.size > 0) 
			{ 
				var recsSite = qrSite.getArray("records"); 
				var vLocation = recsSite[0].Name; 
				return vLocation;
			} 
			else {vLocation = ""; return vLocation;}

		} 
		catch(e) 
		{
			 SVMXI_sSel_PutProcessLog(SVMXI_sSel_GetMessage("MSG002") + e);
			 sSel_openWinHdl.SVMXI_sSel_showErrorLog();
		}
}	
///*******************************************************************************************//
function SVMXI_MultiDimensionalArray(iRows,iCols) 
{ 
	//alert(iRows + ":" +iCols);
	var i; 
	var j; 
	var a = new Array(iRows); 
	for (i=0; i < iRows; i++) 
	{ 
		a[i] = new Array(iCols); 
		for (j=0; j < iCols; j++) 
		{ 
           a[i][j] = ""; 
		} 
	} 
   return(a); 
} 
///*******************************************************************************************************//	
function SVMXI_sSel_PutProcessLog(Msg) 
{ 
	if (sSel_processLog) { sSel_processLog +=  "\n"; } 
	sSel_processLog += Msg;
}
/*=============================================================================*/
function SVMXI_sSel_InitMessageList(submoduleid)
{
    var found = false;

    var LangList = new Array();

    		// Hash (Map) of SFDC language ISO code to Language picklist in ServiceMax tags object
    LangList["en_US"] = "English";
    LangList["de"] = "German";
    LangList["es"] = "Spanish";
    LangList["fr"] = "French";
    LangList["it"] = "Italian";
    LangList["ja"] = "Japanese";
    LangList["sv"] = "Swedish";
    LangList["ko"] = "Korean";
    LangList["zh_TW"] = "Chinese (Traditional)";
    LangList["zh_CN"] = "Chinese (Simplified)";
    LangList["pt_BR"] = "Portuguese (Brazilian)";
    LangList["nl_NL"] = "Dutch";
    LangList["da"] = "Danish";
    LangList["th"] = "Thai";
    LangList["fi"] = "Finnish";
    LangList["ru"] = "Russian";

    var UserLang = sforce.connection.getUserInfo().userLanguage;	// ISO code of the user's language

    if (!LangList[UserLang]) { UserLang = "English"; }		// if user's language is not found, default it to English
    else { UserLang = LangList[UserLang]; }

    var soql = "SELECT Id, Name, SVMXC__Tag_Text__c, SVMXC__Language__c " +
    		"FROM SVMXC__ServiceMax_Tags__c " +
		"WHERE SVMXC__SubmoduleID__c = '" + submoduleid + "' " +
		"AND SVMXC__Language__c IN ('Master', '" + UserLang + "')";
    var qr = sforce.connection.query(soql);
    var tagrecs = new sforce.QueryResultIterator(qr);
    while (tagrecs.hasNext())
    	{
        var tagrec = tagrecs.next();
	var TagId = tagrec.Name;
	var TagText = tagrec.SVMXC__Tag_Text__c;
	var Lang = tagrec.SVMXC__Language__c;
	if (Lang == "Master" && !sSel_MsgList[TagId])
	    sSel_MsgList[TagId] = TagText;
	else if (Lang == UserLang && TagText && TagText.length > 0)	// Translation available in the specific language
	    sSel_MsgList[TagId] = TagText;

	found = true;
	}

    if (!found)
	{
	sSel_MsgList['LAB000'] = 'ServiceMax: Serial Selection';
	sSel_MsgList['LAB001'] = 'Serial Number Selection';
	sSel_MsgList['LAB002'] = 'Add';
	sSel_MsgList['LAB003'] = 'Submit';
	sSel_MsgList['LAB004'] = 'Cancel';
	sSel_MsgList['LAB005'] = '<   Prev';
	sSel_MsgList['LAB006'] = 'Next  >';
	sSel_MsgList['LAB007'] = 'Quick Add';
	sSel_MsgList['LAB008'] = 'Transaction Type:  ';
	sSel_MsgList['LAB009'] = 'Product:  ';
	sSel_MsgList['LAB010'] = 'Required Quantity:  ';
	sSel_MsgList['LAB011'] = '       --None--        ';
	sSel_MsgList['LAB012'] = 'From Location:';
	sSel_MsgList['LAB013'] = 'To Location:';
	sSel_MsgList['LAB014'] = 'Status:';
	sSel_MsgList['LAB015'] = 'Remove';
	sSel_MsgList['MSG001'] = 'An internal error occurred when saving data. Please contact your ServiceMax administrator to resolve this.';
	sSel_MsgList['MSG002'] = 'An internal error occurred when retrieving data. Please contact your ServiceMax administrator to resolve this.';
	sSel_MsgList['MSG003'] = 'Inventory Module or Serialized Tracking of inventory is not enabled in your organization';
	sSel_MsgList['MSG004'] = 'This ServiceMax transaction did not have any serialized products to process.';
	sSel_MsgList['MSG005'] = 'There was an internal error in data sent from the parent ServiceMax transaction. Please report this to ServiceMax support.';
	sSel_MsgList['MSG006'] = 'You have already entered the required number of serials or too many serial numbers selected.';
	sSel_MsgList['MSG007'] = 'Duplicate serial numbers are not allowed. Please correct your entries and click Submit again.';
	sSel_MsgList['MSG008'] = 'Duplicate Serial Number:';
	sSel_MsgList['MSG009'] = 'Duplicate serial numbers found. This is not an error. However, please verify and confirm your entries are accurate and click Submit again.';
	sSel_MsgList['MSG010'] = 'The number of serial numbers you entered does not match the received quantity.';
	sSel_MsgList['MSG011'] = 'Not enough serial numbers selected for this product: ';
	sSel_MsgList['MSG012'] = 'The following transaction has resulted in a negative stock quantity. Please verify that your organization follows the necessary processes to maintain integrity of stock information in ServiceMax. If your organization is fully compliant with the process requirements, report this issue to ServiceMax support immediately.';
	sSel_MsgList['MSG013'] = 'An occurred when sending email about negative stock.';
	sSel_MsgList['MSG014'] = 'Email about negative stock could not be sent due to insufficient information. Please report this to your ServiceMax administrator.';
	sSel_MsgList['MSG015'] = 'Transaction Type:  ';
	sSel_MsgList['MSG016'] = 'Transaction Number:';
	sSel_MsgList['MSG017'] = 'Product:  ';
	sSel_MsgList['MSG018'] = 'Location:';
	sSel_MsgList['MSG019'] = 'Status:';
	sSel_MsgList['MSG020'] = 'Quantity Before:';
	sSel_MsgList['MSG021'] = 'Transaction Quantity:';
	sSel_MsgList['MSG022'] = 'Quantity After:';
	sSel_MsgList['MSG023'] = 'ServiceMax User:';
	sSel_MsgList['MSG024'] = 'Date/Time:';
	sSel_MsgList['MSG025'] = 'Error: Invalid Data.<br/>Review all error messages below to correct your data.';
	sSel_MsgList['MSG026'] = 'This is the First Record';
	sSel_MsgList['MSG027'] = 'This is the Last Record';
	sSel_MsgList['MSG028'] = 'Please enter a valid new serial number, Provided serial number already exists on the list.';
	sSel_MsgList['MSG029'] = 'Please enter a valid serial number and number of serials first.';
	sSel_MsgList['MSG030'] = 'Please enter a valid serial number';
	sSel_MsgList['MSG031'] = 'Error:';
	sSel_MsgList['MSG032'] = 'Please select one or more serial numbers.';
	sSel_MsgList['MSG999'] = 'Information you entered here will not be saved. Are you sure?';
	}
}
/*=============================================================================*/
function SVMXI_sSel_GetMessage(MsgNum)
{
    if (!sSel_MsgList[MsgNum])
	return "Message definition for " + MsgNum + " not found. This is a setup issue.\nPlease contact your ServiceMax administrator to resolve this.";

    return sSel_MsgList[MsgNum];
}
/*=============================================================================*/
</fileContent>
    <fileName>SVMXC_Library.js</fileName>
    <name>SVMXC_StockLookupSVO</name>
    <supportsCaching>true</supportsCaching>
</Scontrol>
